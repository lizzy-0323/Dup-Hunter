[{"A_title": "fixed controller name in markup", "A_clean_title": ["fix", "control", "name", "markup"], "B_title": "Update forms.ngdoc", "B_clean_title": ["updat", "form", "ngdoc"], "A_body": "Request Type: docs\n\nHow to reproduce: \n\nComponent(s): forms\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nThe \"Binding to form and control state\" sample had a wrong controller name which prevents the sample from running\n\n**Other Comments:**\n", "A_clean_body": ["request", "type", "doc", "how", "reproduc", "compon", "form", "impact", "small", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "bind", "form", "control", "state", "sampl", "had", "wrong", "control", "name", "which", "prevent", "sampl", "run", "**other", "comment"], "B_body": "The controller name defined in script.js is \"ExampleController\". But name \"Contorller\" is used in html. Fix the controller name. \n", "B_clean_body": ["control", "name", "defin", "script", "js", "examplecontrol", "exampl", "control", "but", "name", "contorl", "use", "html", "fix", "control", "name"], "title_sim": [0.03813343008672029], "body_sim": [0.309642539065429], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 1}, {"A_title": "feat($compile): improve filter system of directive", "A_clean_title": ["feat", "compil", "improv", "filter", "system", "direct"], "B_title": "Add support for multiple ignored directives", "B_clean_title": ["add", "support", "multipl", "ignor", "direct"], "A_body": "**What kind of change does this PR introduce? (Bug fix, feature, docs update, ...)**\nFeature\n\n**What is the current behavior? (You can also link to an open issue here)**\nwhen you\n\n```\n$compile(element, undefined, undefined, 'ngController')($scope);\n$scope.$apply();\n```\n\nonly a single directive can be excluded\n\n**What is the new behavior (if this is a feature change)?**\nwith this patch we could have more control on what directives we want to compile.\nAn example could be:\n\n```\nelement.attr(\"ng-include\", \"template\");\n$compile(element, undefined, undefined, function(name){ return name == 'ngInclude'; })($scope);\n$scope.$apply();\n```\n\nso we could compile just the directives we need. maybe just those attached runtime.\nthis way we can avoid re-attaching controllers or other ng-directives.\n\n**Does this PR introduce a breaking change?**\nNo. the code provided is backward compatible\n\n**Please check if the PR fulfills these requirements**\n- [x] The commit message follows our guidelines: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format\n- [x] Tests for the changes have been added (for bug fixes / features)\n- [x] Docs have been added / updated (for bug fixes / features)\n\n**Other information**:\n", "A_clean_body": ["**what", "kind", "chang", "thi", "pr", "introduc", "bug", "fix", "featur", "doc", "updat", "featur", "**what", "current", "behavior", "you", "also", "link", "open", "issu", "here", "when", "you", "compil", "element", "undefin", "undefin", "'ngcontrol", "'ng", "control", "scope", "scope", "appli", "onli", "singl", "direct", "exclud", "**what", "new", "behavior", "thi", "featur", "chang", "thi", "patch", "we", "could", "have", "more", "control", "what", "direct", "we", "want", "compil", "exampl", "could", "element", "attr", "ng", "includ", "templat", "compil", "element", "undefin", "undefin", "function", "name", "return", "name", "'nginclud", "'ng", "includ", "scope", "scope", "appli", "so", "we", "could", "compil", "just", "direct", "we", "need", "mayb", "just", "those", "attach", "runtim", "thi", "way", "we", "avoid", "re", "attach", "control", "or", "other", "ng", "direct", "**doe", "thi", "pr", "introduc", "break", "chang", "no", "code", "provid", "backward", "compat", "**pleas", "check", "pr", "fulfil", "these", "requirements**", "commit", "messag", "follow", "our", "guidelin", "http", "md", "github", "com", "angular", "angular", "js", "blob", "master", "contribut", "commit", "messag", "format", "test", "chang", "have", "been", "ad", "bug", "fix", "featur", "doc", "have", "been", "ad", "updat", "bug", "fix", "featur", "**other", "information**"], "B_body": "Sometimes it is useful to have a possibility to ignore more than one directive.\n", "B_clean_body": ["sometim", "it", "use", "have", "possibl", "ignor", "more", "than", "one", "direct"], "title_sim": [0.32931213557060846], "body_sim": [0.3470037487182014], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.4187448807445758, 0.7655305956603258], "location_sim": [0.0, 0.0], "pattern": 0, "time": 266}, {"A_title": "Repeater fixes", "A_clean_title": ["repeat", "fix"], "B_title": "fix(ngClass) when reversing the orderByFilter ngClassOdd and ngClassEven is not updated.", "B_clean_title": ["fix", "ngclass", "ng", "class", "when", "revers", "orderbyfilt", "order", "by", "filter", "ngclassodd", "ng", "class", "odd", "ngclasseven", "ng", "class", "even", "not", "updat"], "A_body": "I have reverted the original fix for #933 because it was making the repeater unstable and in general was causing a lot of churn in the DOM. The current fix via ngModel is not ideal, but better IMO.\n\nI also added proper fix for #1076. Similar fix was originally submitted by an external contributor, Misko dismissed it and accepted only tests because these tests were now passing thanks to the repeater changes - but that was only because the repeater was inefficient and was rebuilding the dom on every digest.\n", "A_clean_body": ["have", "revert", "origin", "fix", "933", "becaus", "it", "wa", "make", "repeat", "unstabl", "gener", "wa", "caus", "lot", "churn", "dom", "current", "fix", "via", "ngmodel", "ng", "model", "not", "ideal", "but", "better", "imo", "also", "ad", "proper", "fix", "1076", "similar", "fix", "wa", "origin", "submit", "by", "extern", "contributor", "misko", "dismiss", "it", "accept", "onli", "test", "becaus", "these", "test", "were", "now", "pass", "thank", "repeat", "chang", "but", "that", "wa", "onli", "becaus", "repeat", "wa", "ineffici", "wa", "rebuild", "dom", "everi", "digest"], "B_body": "Related to issue #1563\n", "B_clean_body": ["relat", "issu", "1563"], "title_sim": [0.0738473457891514], "body_sim": [0.03397307779305984], "file_list_sim": 0.14285714285714285, "overlap_files_len": 1, "code_sim": [0.7461505201194053, 0.9847599382275364], "location_sim": [0.15074626865671642, 1.0], "pattern": -1, "time": 10}, {"A_title": "fix(Angular.js): allow query parameter arrays", "A_clean_title": ["fix", "angular", "js", "allow", "queri", "paramet", "array"], "B_title": "feature(urlKeyValue): not rewriting duplicate params in url", "B_clean_title": ["featur", "urlkeyvalu", "url", "key", "valu", "not", "rewrit", "duplic", "param", "url"], "A_body": "Allow url?key=value1&key=value2, to be parsed into an object with an array {key: ['value1,'value2']}.\n", "A_clean_body": ["allow", "url", "key=value1", "key=value2", "pars", "into", "object", "array", "key", "'value1", "'value2"], "B_body": "parseKeyValue and toKeyValue can work with duplicates:\n    1) parseKeyValue looks for presence of obj[key]\n    2) detects and replaces obj[key] with [obj[key],val]\n    3) then pushes more duplicates if neccessary\n    4) toKeyValue decodes array correctly\n    5)(not changed) $location.search({param: 'key'}) still replaces if neccessary\n    6)(not changed) $location.search({param: ['key','key2']}) sets the url with duplicates\n\n**BREAKING CHANGE**: the url parameter duplicates are not rewritten anymore.\n    This will only effect deeplinks. Deeplinks in current apps that depend on\n    rewriting the duplicates will break. The deeplinks should\n    be changes to appear how they should look after angular strips the duplicates.\n", "B_clean_body": ["parsekeyvalu", "pars", "key", "valu", "tokeyvalu", "key", "valu", "work", "duplic", "parsekeyvalu", "pars", "key", "valu", "look", "presenc", "obj", "key", "detect", "replac", "obj", "key", "obj", "key", "val", "then", "push", "more", "duplic", "neccessari", "tokeyvalu", "key", "valu", "decod", "array", "correctli", "not", "chang", "locat", "search", "param", "'key", "still", "replac", "neccessari", "not", "chang", "locat", "search", "param", "'key", "'key2", "set", "url", "duplic", "**break", "change**", "url", "paramet", "duplic", "are", "not", "rewritten", "anymor", "thi", "will", "onli", "effect", "deeplink", "deeplink", "current", "app", "that", "depend", "rewrit", "duplic", "will", "break", "deeplink", "chang", "appear", "how", "they", "look", "after", "angular", "strip", "duplic"], "title_sim": [0.11586788933529095], "body_sim": [0.6469589950746801], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.3485795097000502, 0.6618313734920169], "location_sim": [0.45, 0.5853658536585366], "pattern": 0, "time": 55}, {"A_title": "added unit tests for PR #2835", "A_clean_title": ["ad", "unit", "test", "pr", "2835"], "B_title": "feat($resource): PUT/POST call should not always update the value object", "B_clean_title": ["feat", "resourc", "put", "post", "call", "not", "alway", "updat", "valu", "object"], "A_body": "this is my first unittest here - so... please someone check that it's good enough.\n", "A_clean_body": ["thi", "my", "first", "unittest", "here", "so", "pleas", "someon", "check", "that", "it", "'s", "good", "enough"], "B_body": "Fixes: #1609\n", "B_clean_body": ["fix", "1609"], "title_sim": [-0.013194082069061116], "body_sim": [0.08061842649622636], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.4286159057071605, 0.4564238068939842], "location_sim": [0.0, 0.0], "pattern": -1, "time": 13}, {"A_title": "refactor($q): make $q Promises A+ v1.1 compilant", "A_clean_title": ["refactor", "make", "promis", "a+", "v1", "compil"], "B_title": "fix($q): pass promise-aplus-tests v2.0.3 WIP", "B_clean_title": ["fix", "pass", "promis", "aplu", "test", "v2", "wip"], "A_body": "Refactor to make $q Promises A+ v1.1 compilant\n", "A_clean_body": ["refactor", "make", "promis", "a+", "v1", "compil"], "B_body": "This is still a work in progress, but this implementation is now passing the\nfull promises-aplus-tests v2.0.3.\n\nIt is still necessary to shrink this down and hopefully provide a better\nflyweight/prototype-based implementation.\n\nFixes #5223\n", "B_clean_body": ["thi", "still", "work", "progress", "but", "thi", "implement", "now", "pass", "full", "promis", "aplu", "test", "v2", "it", "still", "necessari", "shrink", "thi", "down", "hope", "provid", "better", "base", "flyweight", "prototyp", "implement", "fix", "5223"], "title_sim": [0.3729671905455352], "body_sim": [0.285581181500473], "file_list_sim": 0.6, "overlap_files_len": 3, "code_sim": [0.22965023166178078, 0.22965023166178078], "location_sim": [0.7970479704797048, 0.935064935064935], "pattern": -1, "time": 30}, {"A_title": "Don't send empty String in place of no body", "A_clean_title": ["n't", "send", "empti", "string", "place", "no", "bodi"], "B_title": "fix($httpBackend): remove Content-Type header on DELETE requests", "B_clean_title": ["fix", "httpbackend", "http", "backend", "remov", "content", "type", "header", "delet", "request"], "A_body": "XMLHttpRequest.send spec defines different semantics for an empty string as compared to null, any string, whether empty or not, should be sent with a Content-Type of text/plain, whereas null should have no Content-Type header set.  Since the user hasn't passed in content to send, the latter should be used.\n\nSee http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n\nCombined with this bug in WebKit based browsers:\n\nhttps://code.google.com/p/chromium/issues/detail?id=172802\n\nThis means when no body is supplied, the `Content-Type` ends up being application/xml, which for an empty String, means the body is invalid according to the content type.  This causes issues for web servers that automatically parse the body according to the declared content type, such as this issue in Play framework:\n\nhttps://github.com/playframework/playframework/issues/1676\n", "A_clean_body": ["xmlhttprequest", "send", "xml", "http", "request", "spec", "defin", "differ", "semant", "empti", "string", "as", "compar", "null", "ani", "string", "whether", "empti", "or", "not", "sent", "content", "type", "text", "plain", "wherea", "null", "have", "no", "content", "type", "header", "set", "sinc", "user", "ha", "n't", "pass", "content", "send", "latter", "use", "see", "http", "w3", "www", "org", "tr", "xmlhttprequest", "xml", "http", "request", "send", "method", "combin", "thi", "bug", "webkit", "web", "kit", "base", "browser", "http", "googl", "code", "com", "chromium", "issu", "detail", "id=172802", "thi", "mean", "when", "no", "bodi", "suppli", "content", "type", "end", "up", "be", "applic", "xml", "which", "empti", "string", "mean", "bodi", "invalid", "accord", "content", "type", "thi", "caus", "issu", "web", "server", "that", "automat", "pars", "bodi", "accord", "declar", "content", "type", "such", "as", "thi", "issu", "play", "framework", "http", "github", "com", "playframework", "playframework", "issu", "1676"], "B_body": "Sending empty string with `XMLHttpRequest`'s `post` method causes browsers adding unneeded `Content-Type` request header on `DELETE` requests. Chrome adds `Content-Type:application/xml`, Firefox and IE adds `Content-Type text/plain`. Sending `null` insted of empty string fixes the problem.\n\nMore detail: https://github.com/angular/angular.js/issues/2149#issuecomment-22664501\n", "B_clean_body": ["send", "empti", "string", "xmlhttprequest", "xml", "http", "request", "'s", "post", "method", "caus", "browser", "ad", "unneed", "content", "type", "request", "header", "delet", "request", "chrome", "add", "content", "type", "applic", "xml", "firefox", "ie", "add", "content", "type", "text", "plain", "send", "null", "inst", "empti", "string", "fix", "problem", "more", "detail", "http", "github", "com", "angular", "angular", "js", "issu", "2149", "issuecom", "22664501"], "title_sim": [0.19329997385369058], "body_sim": [0.8130617040450384], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.42198601477377384, 1.0], "location_sim": [0.5384615384615384, 1.0], "pattern": -1, "time": 11}, {"A_title": "fix(browserTrigger): declare msie variable", "A_clean_title": ["fix", "browsertrigg", "browser", "trigger", "declar", "msie", "variabl"], "B_title": "Remove more bits and pieces of Internet Explorer 8 support", "B_clean_title": ["remov", "more", "bit", "piec", "internet", "explor", "support"], "A_body": "The variable `msie` was used in strict mode without declaring it first,\ncausing both jshint and the module tests to fail. This change fixes the\nproblem.\n", "A_clean_body": ["variabl", "msie", "wa", "use", "strict", "mode", "without", "declar", "it", "first", "caus", "both", "jshint", "modul", "test", "fail", "thi", "chang", "fix", "problem"], "B_body": "Some of these are just comments that were explaining code removed in e843ae7a4cfb746760e1d8c3578d9ec613c3e2ee. The most relevant (functional) change is the one to ngSanitize.\n\nI've also removed adjusted some comments referring to IE8 and IE9 to only mention IE9.\n", "B_clean_body": ["some", "these", "are", "just", "comment", "that", "were", "explain", "code", "remov", "e843ae7a4cfb746760e1d8c3578d9ec613c3e2e", "most", "relev", "function", "chang", "one", "ngsanit", "ng", "sanit", "'ve", "also", "remov", "adjust", "some", "comment", "refer", "ie8", "ie9", "onli", "mention", "ie9"], "title_sim": [0.006669153841327395], "body_sim": [0.080333007725734], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "fixed controller name in markup", "A_clean_title": ["fix", "control", "name", "markup"], "B_title": "error correction", "B_clean_title": ["error", "correct"], "A_body": "Request Type: docs\n\nHow to reproduce: \n\nComponent(s): forms\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nThe \"Binding to form and control state\" sample had a wrong controller name which prevents the sample from running\n\n**Other Comments:**\n", "A_clean_body": ["request", "type", "doc", "how", "reproduc", "compon", "form", "impact", "small", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "bind", "form", "control", "state", "sampl", "had", "wrong", "control", "name", "which", "prevent", "sampl", "run", "**other", "comment"], "B_body": "In the example did not match the controller name in the script and HTML code\n", "B_clean_body": ["exampl", "did", "not", "match", "control", "name", "script", "html", "code"], "title_sim": [-0.023640238500599497], "body_sim": [0.3024852553578994], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 5}, {"A_title": "fix for #2361", "A_clean_title": ["fix", "2361"], "B_title": "Fixed incomplete merge", "B_clean_title": ["fix", "incomplet", "merg"], "A_body": "removed merge conflict comment in angular-mocks.js\n", "A_clean_body": ["remov", "merg", "conflict", "comment", "angular", "mock", "js"], "B_body": "", "B_clean_body": [], "title_sim": [0.46547485819365203], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 6}, {"A_title": "I18n changes", "A_clean_title": ["i18n", "chang"], "B_title": "chore(ngLocale): regenerate locale files", "B_clean_title": ["chore", "nglocal", "ng", "local", "regener", "local", "file"], "A_body": "Closes #10158\nCloses #8174 \nCloses #12134 \n", "A_clean_body": ["close", "10158", "close", "8174", "close", "12134"], "B_body": "", "B_clean_body": [], "title_sim": [0.0010489649862652133], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 7}, {"A_title": "feat($resource): PUT/POST call should not always update the value object", "A_clean_title": ["feat", "resourc", "put", "post", "call", "not", "alway", "updat", "valu", "object"], "B_title": "Support for 'extending' data", "B_clean_title": ["support", "'extend", "data"], "A_body": "Fixes: #1609\n", "A_clean_body": ["fix", "1609"], "B_body": "By adding 'extend:true' to action params you can have the data returned from server extend (deeply) the client side object rather than overwrite it.\n\nThis is useful primarily for updates - e.g. when you save the object and get a returned object with some of the data changed and yet have client data which must be kept.\n\nOne possible flow:\nYou have an object on the client which has an array displayed by a carousel - thus each item has an 'isActive' property on the client side.\nWhen saving the object you need to return the object for many reasons one of which ,ight be to get updated IDs when some items are new and must be created on server side - getting an ID.\nThis scenario would normally overwrite the entire client object making the carousel slide to the first slide - rather than maintaining the selected slide as needed.\nBy extending the client data with the server data you can avoid that.\n", "B_clean_body": ["by", "ad", "'extend", "true", "action", "param", "you", "have", "data", "return", "server", "extend", "deepli", "client", "side", "object", "rather", "than", "overwrit", "it", "thi", "use", "primarili", "updat", "when", "you", "save", "object", "get", "return", "object", "some", "data", "chang", "yet", "have", "client", "data", "which", "must", "kept", "one", "possibl", "flow", "you", "have", "object", "client", "which", "ha", "array", "display", "by", "carousel", "thu", "each", "item", "ha", "'isact", "'i", "activ", "properti", "client", "side", "when", "save", "object", "you", "need", "return", "object", "mani", "reason", "one", "which", "ight", "get", "updat", "id", "ds", "when", "some", "item", "are", "new", "must", "creat", "server", "side", "get", "id", "thi", "scenario", "would", "normal", "overwrit", "entir", "client", "object", "make", "carousel", "slide", "first", "slide", "rather", "than", "maintain", "select", "slide", "as", "need", "by", "extend", "client", "data", "server", "data", "you", "avoid", "that"], "title_sim": [0.08847296889816782], "body_sim": [-0.024768092858578353], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.6769090642061992, 0.8094295013230716], "location_sim": [0.43859649122807015, 0.7575757575757576], "pattern": 0, "time": 27}, {"A_title": "fix(core): drop the toBoolean function", "A_clean_title": ["fix", "core", "drop", "toboolean", "boolean", "function"], "B_title": "Update ngIf.js doc. Added missing description of ng-if behavior.", "B_clean_title": ["updat", "ngif", "js", "ng", "doc", "ad", "miss", "descript", "ng", "behavior"], "A_body": "So far Angular have used the toBoolean function to decide if the parsed value\nis truthy. The function made more values falsy than regular JavaScript would,\ne.g. strings 'f' and 'no' were both treated as falsy. This creates suble bugs\nwhen backend sends a non-empty string with one of these values and something\nsuddenly hides in the application\n\nBREAKING CHANGE: values 'f', '0', 'false', 'no', 'n', '[]' are no longer\ntreated as falsy. Only JavaScript falsy values are now treated as falsy by the\nexpression parser; there are six of them: false, null, undefined, NaN, 0 and \"\".\n\nFixes #3969\nFixes #4277\n\ncc @IgorMinar @petebacondarwin\n", "A_clean_body": ["so", "far", "angular", "have", "use", "toboolean", "boolean", "function", "decid", "pars", "valu", "truthi", "function", "made", "more", "valu", "falsi", "than", "regular", "javascript", "java", "script", "would", "string", "'no", "were", "both", "treat", "as", "falsi", "thi", "creat", "subl", "bug", "when", "backend", "send", "non", "empti", "string", "one", "these", "valu", "someth", "suddenli", "hide", "applic", "break", "chang", "valu", "'fals", "'no", "are", "no", "longer", "treat", "as", "falsi", "onli", "javascript", "java", "script", "falsi", "valu", "are", "now", "treat", "as", "falsi", "by", "express", "parser", "there", "are", "six", "them", "fals", "null", "undefin", "nan", "na", "fix", "3969", "fix", "4277", "cc", "igorminar", "igor", "minar", "petebacondarwin"], "B_body": "Added missing description of ng-if behavior that it will return false for \"f\", \"0\", \"false\", \"no\", \"n\", \"[]\" values because it use toBoolean function\n", "B_clean_body": ["ad", "miss", "descript", "ng", "behavior", "that", "it", "will", "return", "fals", "fals", "no", "valu", "becaus", "it", "use", "toboolean", "boolean", "function"], "title_sim": [0.039452033379356884], "body_sim": [0.3746066502394351], "file_list_sim": 0.1, "overlap_files_len": 1, "code_sim": [0.027202689357564182, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 13}, {"A_title": "Promises A+ Compliance", "A_clean_title": ["promis", "a+", "complianc"], "B_title": "fix(q.js): if rejection handler throws an exception, reject promise", "B_clean_title": ["fix", "js", "reject", "handler", "throw", "except", "reject", "promis"], "A_body": "", "A_clean_body": [], "B_body": "per Promise/A+ spec\n", "B_clean_body": ["per", "promis", "a+", "spec"], "title_sim": [0.46265790920754535], "body_sim": [0.0], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.018696179304009658, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "feat(loader): add convenience method for creating components", "A_clean_title": ["feat", "loader", "add", "conveni", "method", "creat", "compon"], "B_title": "WIP angular.component implementation [ci skip]", "B_clean_title": ["wip", "angular", "compon", "implement", "ci", "skip"], "A_body": "The proposed syntax:\n\n``` js\nangular.module('myApp').component('myComponent', {\n  template: '<div></div>', //string | Function, default: ''\n  templateUrl: 'a.html', //string | Function, default: undefined\n  controller: MyCtrl, //string | Function, default: function(){}\n  controllerAs: 'vm', //string, default: component name\n  transclude: false, //boolean | object, default: true\n  isolate: false, //boolean, default: true (scope: {} .vs. scope: true)\n  bindings: {abc: '@'}, //object, default: {} (passed to bindToController)\n  $canActivate: MyCtrl.canActivate, //Function, default: undefined (passed to factory.$canActivate)\n  $routeConfig: MyCtrl.routeConfig, //RouteConfig, default: undefined (passed to factory.$routeConfig)\n});\n```\n\nThis means that for the most common use-case of simple component ppl will only need to pass template, controller and bindings.\n\nI've discussed this with @btford and we've decided to change a couple of things from #12907:\n1. Controller lifecycle hooks (onActivate, onDeactivate, etc.) are not  going to be part of the component options since it makes more sense that the developer will just put those as methods of his controller (this way those methods have access to controller's state)\n2. In case developer passes a function for template/templateUrl, this function is injectable with locals of $element and $attrs. This is important because today if you pass a function for template/templateUrl in DDO, you get element as attrs, but for DI you rely on the injectable DDO factory. In the component helper you don't have a factory, therefore we make all functions that can be passed in options injectable.\n\nDocs are still missing obviously, but I would like to get some feedback before moving on.\n\nCloses #10007 \n", "A_clean_body": ["propos", "syntax", "js", "angular", "modul", "'myapp", "'mi", "app", "compon", "'mycompon", "'mi", "compon", "templat", "div", "div", "string", "function", "default", "templateurl", "templat", "url", "html", "string", "function", "default", "undefin", "control", "myctrl", "my", "ctrl", "string", "function", "default", "function", "controllera", "control", "as", "'vm", "string", "default", "compon", "name", "transclud", "fals", "boolean", "object", "default", "true", "isol", "fals", "boolean", "default", "true", "scope", "vs", "scope", "true", "bind", "abc", "object", "default", "pass", "bindtocontrol", "bind", "control", "canactiv", "activ", "myctrl", "canactiv", "my", "ctrl", "activ", "function", "default", "undefin", "pass", "factori", "canactiv", "activ", "routeconfig", "rout", "config", "myctrl", "routeconfig", "my", "ctrl", "rout", "config", "routeconfig", "rout", "config", "default", "undefin", "pass", "factori", "routeconfig", "rout", "config", "thi", "mean", "that", "most", "common", "use", "case", "simpl", "compon", "ppl", "will", "onli", "need", "pass", "templat", "control", "bind", "'ve", "discuss", "thi", "btford", "we", "'ve", "decid", "chang", "coupl", "thing", "12907", "control", "lifecycl", "hook", "onactiv", "activ", "ondeactiv", "deactiv", "etc", "are", "not", "go", "part", "compon", "option", "sinc", "it", "make", "more", "sens", "that", "develop", "will", "just", "put", "those", "as", "method", "hi", "control", "thi", "way", "those", "method", "have", "access", "control", "'s", "state", "case", "develop", "pass", "function", "templat", "templateurl", "templat", "url", "thi", "function", "inject", "local", "element", "attr", "thi", "import", "becaus", "today", "you", "pass", "function", "templat", "templateurl", "templat", "url", "ddo", "you", "get", "element", "as", "attr", "but", "di", "you", "reli", "inject", "ddo", "factori", "compon", "helper", "you", "n't", "have", "factori", "therefor", "we", "make", "all", "function", "that", "pass", "option", "inject", "doc", "are", "still", "miss", "obvious", "but", "would", "like", "get", "some", "feedback", "befor", "move", "close", "10007"], "B_body": "Needs tests and experimentation, it would be nice to make this work well\nwith TypeScript decorators for ease of use.\n\nThe whole \"controller instantiated after templateUrl is loaded\" thing seems\nnot-ideal, it would be cool if a templateUrl function could be a method of\nthe component controller.\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/angular/angular.js/12166)\n\n<!-- Reviewable:end -->\n", "B_clean_body": ["need", "test", "experiment", "it", "would", "nice", "make", "thi", "work", "well", "typescript", "type", "script", "decor", "eas", "use", "whole", "control", "instanti", "after", "templateurl", "templat", "url", "load", "thing", "seem", "not", "ideal", "it", "would", "cool", "templateurl", "templat", "url", "function", "could", "method", "compon", "control", "review", "start", "img", "src=", "http", "png", "review", "button", "io", "review", "height=40", "alt=", "review", "review", "http", "review", "io", "review", "angular", "angular", "js", "12166", "review", "end"], "title_sim": [0.295841678174689], "body_sim": [0.4361991790559358], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.6759752939723764, 0.5220705386125787], "location_sim": [0.41358024691358025, 1.0], "pattern": 0, "time": 97}, {"A_title": "fix($rootScope): remove history event handler when app is torn down", "A_clean_title": ["fix", "rootscop", "root", "scope", "remov", "histori", "event", "handler", "when", "app", "torn", "down"], "B_title": "feat(shutdown): Add the ability for an app to shutdown", "B_clean_title": ["feat", "shutdown", "add", "abil", "app", "shutdown"], "A_body": "Remember the popstate and hashchange handler registered with window\nwhen the application bootstraps, and remove it when the application\nis torn down\n\nCloses #9897\n", "A_clean_body": ["rememb", "popstat", "hashchang", "handler", "regist", "window", "when", "applic", "bootstrap", "remov", "it", "when", "applic", "torn", "down", "close", "9897"], "B_body": "Adds a new `$shutdown` service that can be used to shutdown an app and the `$shutdownProvider` that can be used to register tasks that need to be executed when shutting down an app.\n\nAdded tasks for `$rootElement`, `$rootScope` and `$browser` to be able to shutdown an app\n\nRefactor `$interval` so it delegates to `$browser` just like `$timeout` does\n", "B_clean_body": ["add", "new", "shutdown", "servic", "that", "use", "shutdown", "app", "shutdownprovid", "shutdown", "provid", "that", "use", "regist", "task", "that", "need", "execut", "when", "shut", "down", "app", "ad", "task", "rootel", "root", "element", "rootscop", "root", "scope", "browser", "abl", "shutdown", "app", "refactor", "interv", "so", "it", "deleg", "browser", "just", "like", "timeout"], "title_sim": [0.03996264434146392], "body_sim": [0.09385882818841207], "file_list_sim": 0.2727272727272727, "overlap_files_len": 3, "code_sim": [0.12351667288790578, 0.10501088971105331], "location_sim": [0.04419191919191919, 0.12110726643598616], "pattern": 0, "time": 130}, {"A_title": "i18n - Extended Number Format Symbol Rules", "A_clean_title": ["i18n", "extend", "number", "format", "symbol", "rule"], "B_title": "i18n: Taking numberformatsymbolsext into account", "B_clean_title": ["i18n", "take", "numberformatsymbolsext", "into", "account"], "A_body": "- Added `numberformatsymbolsext.js` to Closure Slurper script\n- Regenerated locales\n\nThis should correct the configurations for many locales.\n\nFixes currency symbol issue in #8931.\n", "A_clean_body": ["ad", "numberformatsymbolsext", "js", "closur", "slurper", "script", "regener", "local", "thi", "correct", "configur", "mani", "local", "fix", "currenc", "symbol", "issu", "8931"], "B_body": "There are some errors in certain locale files, I noticed most latin american currencies were wrong. The problem is that closure library keeps a separate file numberformatsymbolsext.js for some languages.\n\nThis change uses this file too to generate the correct currency chars.\n\nThe locale generation process now downloads number format symbols from\nthis url too\n\nhttp://closure-library.googlecode.com/svn/trunk/closure/goog/i18n/numberformatsymbolsext.js\n\nMost locales should now be correct\n", "B_clean_body": ["there", "are", "some", "error", "certain", "local", "file", "notic", "most", "latin", "american", "currenc", "were", "wrong", "problem", "that", "closur", "librari", "keep", "separ", "file", "numberformatsymbolsext", "js", "some", "languag", "thi", "chang", "use", "thi", "file", "too", "gener", "correct", "currenc", "char", "local", "gener", "process", "now", "download", "number", "format", "symbol", "thi", "url", "too", "http", "closur", "librari", "googlecod", "js", "com", "svn", "trunk", "closur", "goog", "i18n", "numberformatsymbolsext", "most", "local", "now", "correct"], "title_sim": [-0.020031133764404085], "body_sim": [0.44472594080593997], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 304}, {"A_title": "chore(mocks): wrap angular-mocks.js in closure", "A_clean_title": ["chore", "mock", "wrap", "angular", "mock", "js", "closur"], "B_title": "chore(ngMock): Encapsulated ngMock in module wrapper", "B_clean_title": ["chore", "ngmock", "ng", "mock", "encapsul", "ngmock", "ng", "mock", "modul", "wrapper"], "A_body": "The `use strict;` that was at the top of this file was bleeding into other files and preventing the use of other test helpers that don't use strict mode. This was in a TODO so I figured it just needed to get committed :)\n", "A_clean_body": ["use", "strict", "that", "wa", "at", "top", "thi", "file", "wa", "bleed", "into", "other", "file", "prevent", "use", "other", "test", "helper", "that", "n't", "use", "strict", "mode", "thi", "wa", "todo", "so", "figur", "it", "just", "need", "get", "commit"], "B_body": "(I know this issue is very old, but maybe this will help spark discussion on the subject of Testing.)\n\nFixes issue #533 - encapsulate angular-mocks.js into closure (vojtajina)\n- Leaving mocks out of 'min' grunt task because it probably doesn't belong in most production implementations of angularjs i.e. for testing purposes. Well, probably the same for the unminified version. This might spark further talk.\n", "B_clean_body": ["know", "thi", "issu", "veri", "old", "but", "mayb", "thi", "will", "help", "spark", "discuss", "subject", "test", "fix", "issu", "533", "encapsul", "angular", "mock", "js", "into", "closur", "vojtajina", "leav", "mock", "out", "'min", "grunt", "task", "becaus", "it", "probabl", "n't", "belong", "most", "product", "implement", "angularj", "test", "purpos", "well", "probabl", "same", "unminifi", "version", "thi", "might", "spark", "further", "talk"], "title_sim": [0.7683305677881429], "body_sim": [0.33409318037514785], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.7071067811865476, 0.7071067811865476], "location_sim": [0.4166666666666667, 0.4166666666666667], "pattern": 0, "time": 116}, {"A_title": "fix($sniffer): IE9 backspace bug in compatibility mode", "A_clean_title": ["fix", "sniffer", "ie9", "backspac", "bug", "compat", "mode"], "B_title": "fix(inputs): ignoring input events in IE caused by placeholder changes o...", "B_clean_title": ["fix", "input", "ignor", "input", "event", "ie", "caus", "by", "placehold", "chang"], "A_body": "Change IE9 input event workaround in $sniffer to\nwork in compatibility mode (msie can be less than 9)\n\nCloses #3110\n", "A_clean_body": ["chang", "ie9", "input", "event", "workaround", "sniffer", "work", "compat", "mode", "msie", "less", "than", "close", "3110"], "B_body": "...r focus/blur on inputs with placeholders\n\nThis is my attempt at fixing #8242 as well as the extra placeholder issues with focus/blur. I'm assuming I'm missing a weird test case that still breaks somewhere, but I still think this is an improvement (it definitely is for my use cases).\n", "B_clean_body": ["focu", "blur", "input", "placehold", "thi", "my", "attempt", "at", "fix", "8242", "as", "well", "as", "extra", "placehold", "issu", "focu", "blur", "'m", "assum", "'m", "miss", "weird", "test", "case", "that", "still", "break", "somewher", "but", "still", "think", "thi", "improv", "it", "definit", "my", "use", "case"], "title_sim": [0.05535536357894034], "body_sim": [0.2311313953837922], "file_list_sim": 0.4, "overlap_files_len": 2, "code_sim": [0.001990948653471409, 0.06381484092584368], "location_sim": [0.06440677966101695, 0.5277777777777778], "pattern": -1, "time": 40}, {"A_title": "fix($resource): return result from prototype methods", "A_clean_title": ["fix", "resourc", "return", "result", "prototyp", "method"], "B_title": "feat($resource): expose $promise and $response in promise-based api", "B_clean_title": ["feat", "resourc", "expos", "promis", "respons", "promis", "base", "api"], "A_body": "1. `Resource[name]` returns `value` that contains `$then` and other useful things. [#L476](https://github.com/angular/angular.js/blob/master/src/ngResource/resource.js#L476)\n2. `Resource.prototype['$' + name]` invokes `Resource[name]` at the end but returns nothing. [#L502](https://github.com/angular/angular.js/blob/master/src/ngResource/resource.js#L502)\n\n**Possible fix:**  add `return` state to the end of the `Resource.prototype['$' + name]` definition.\n", "A_clean_body": ["resourc", "name", "return", "valu", "that", "contain", "then", "other", "use", "thing", "l476", "http", "js", "github", "com", "angular", "angular", "js", "blob", "master", "src", "ngresourc", "resourc", "ng", "resourc", "l476", "resourc", "prototyp", "name", "invok", "resourc", "name", "at", "end", "but", "return", "noth", "l502", "http", "js", "github", "com", "angular", "angular", "js", "blob", "master", "src", "ngresourc", "resourc", "ng", "resourc", "l502", "**possibl", "fix", "add", "return", "state", "end", "resourc", "prototyp", "name", "definit"], "B_body": "This is a WIP to show a possible $resource promise-based api discussed in https://github.com/angular/angular.js/commit/dba6bc73e802fdae685a9f351d3e23c7efa8568a\n\nMain changes:\n- `$promise` and `$response` (http response) are exposed on resource instance object in addition to `$then` and `$resolved`.\n- on success, the promise resolves to the same resource instance object filled with data. This is as expected to enable using it in resolve section of `$route.when()`.\n\nArguably, `$then` and `$response.resource` are not needed anymore, what do you think?\n", "B_clean_body": ["thi", "wip", "show", "possibl", "resourc", "promis", "base", "api", "discuss", "http", "github", "com", "angular", "angular", "js", "commit", "dba6bc73e802fdae685a9f351d3e23c7efa8568a", "main", "chang", "promis", "respons", "http", "respons", "are", "expos", "resourc", "instanc", "object", "addit", "then", "resolv", "success", "promis", "resolv", "same", "resourc", "instanc", "object", "fill", "data", "thi", "as", "expect", "enabl", "it", "resolv", "section", "rout", "when", "arguabl", "then", "respons", "resourc", "are", "not", "need", "anymor", "what", "you", "think"], "title_sim": [0.33079294659693464], "body_sim": [0.6502785045747773], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.03456156967181506, 0.088744921852705], "location_sim": [0.0, 0.0], "pattern": 0, "time": 52}, {"A_title": "New repeat fixes", "A_clean_title": ["new", "repeat", "fix"], "B_title": "feat(ngRepeat): add support for hash for item in items", "B_clean_title": ["feat", "ngrepeat", "ng", "repeat", "add", "support", "hash", "item", "item"], "A_body": "", "A_clean_body": [], "B_body": "BREAKING CHANGE:\n\nDefault behavior for hg-repeat is to associate the\nDOM elements by position rather then by identity.\n(Previously it was associate by object identity)\n\nIt is considered an error to have two items produce\nthe same hash key. (This was tolerated before.)\n\nTo get the old behavior one can simply add the\n$hash call to the hg-repeat expressions:\nitem in items => $hash(item) for item in items\n", "B_clean_body": ["break", "chang", "default", "behavior", "hg", "repeat", "associ", "dom", "element", "by", "posit", "rather", "then", "by", "ident", "previous", "it", "wa", "associ", "by", "object", "ident", "it", "consid", "error", "have", "two", "item", "produc", "same", "hash", "key", "thi", "wa", "toler", "befor", "get", "old", "behavior", "one", "simpli", "add", "hash", "call", "hg", "repeat", "express", "item", "item", "hash", "item", "item", "item"], "title_sim": [0.5470612241928645], "body_sim": [0.0], "file_list_sim": 0.5714285714285714, "overlap_files_len": 4, "code_sim": [0.8306516542553962, 0.8553185544224085], "location_sim": [0.9190620272314675, 0.9296097934200459], "pattern": 0, "time": 6}, {"A_title": "refactor($parse): new and faster $parse", "A_clean_title": ["refactor", "pars", "new", "faster", "pars"], "B_title": "fix($parse): mark empty expressions as constants and literals", "B_clean_title": ["fix", "pars", "mark", "empti", "express", "as", "constant", "liter"], "A_body": "Change the way parse works from the old mechanism to a multiple stages\nparsing and code generation. The new parse is a four stages parsing\n- Lexer\n- AST building\n- AST processing\n- Cacheing, one-time binding and `$watch` optimizations\n\nThe Lexer phase remains unchanged.\n\nAST building phase follows Mozilla Parse API [1] and generates an AST that is compatible. The only exception was needed for `filters` as JavaScript does not support filters, in this case, a filter is transformed into a `CallExpression` that has an extra property named `filter` with the value of `true`. This phase is heavily based on the previous implementation of `$parse`.\n\nThe AST processing phase transforms the AST into a function that can be executed to evaluate the expression. The logic for expressions remains unchanged. The AST processing phase works in two different ways depending if csp is enabled or disabled. If csp is enabled, the processing phase returns pre-generated function that interpret specific parts of the AST.\nWhen csp is disabled, then the entire expression is compiled into a single function that is later evaluated using `Function`. In both cases, the returning function has the properties `constant`, `literal` and `inputs` as in the previous implementation. These are used in the next phase to perform different optimizations.\n\nThe cacheing, one-time binding and `$watch` optimizations phase remains mostly unchanged.\n\n[1] https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\n", "A_clean_body": ["chang", "way", "pars", "work", "old", "mechan", "multipl", "stage", "pars", "code", "gener", "new", "pars", "four", "stage", "pars", "lexer", "ast", "build", "ast", "process", "cach", "one", "time", "bind", "watch", "optim", "lexer", "phase", "remain", "unchang", "ast", "build", "phase", "follow", "mozilla", "pars", "api", "gener", "ast", "that", "compat", "onli", "except", "wa", "need", "filter", "as", "javascript", "java", "script", "not", "support", "filter", "thi", "case", "filter", "transform", "into", "callexpress", "call", "express", "that", "ha", "extra", "properti", "name", "filter", "valu", "true", "thi", "phase", "heavili", "base", "previou", "implement", "pars", "ast", "process", "phase", "transform", "ast", "into", "function", "that", "execut", "evalu", "express", "logic", "express", "remain", "unchang", "ast", "process", "phase", "work", "two", "differ", "way", "depend", "csp", "enabl", "or", "disabl", "csp", "enabl", "process", "phase", "return", "pre", "gener", "function", "that", "interpret", "specif", "part", "ast", "when", "csp", "disabl", "then", "entir", "express", "compil", "into", "singl", "function", "that", "later", "evalu", "function", "both", "case", "return", "function", "ha", "properti", "constant", "liter", "input", "as", "previou", "implement", "these", "are", "use", "next", "phase", "perform", "differ", "optim", "cach", "one", "time", "bind", "watch", "optim", "phase", "remain", "mostli", "unchang", "http", "mozilla", "api", "develop", "org", "en", "us", "doc", "mozilla", "project", "spidermonkey", "parser", "spider", "monkey"], "B_body": "In response of [#1405 (comment)](https://github.com/angular/angular.js/issues/1405#issuecomment-45525863)\n\nI decided to mark it as a literal because `$parse('undefined')` is a literal.\n", "B_clean_body": ["respons", "1405", "comment", "http", "github", "com", "angular", "angular", "js", "issu", "1405", "issuecom", "45525863", "decid", "mark", "it", "as", "liter", "becaus", "pars", "'undefin", "liter"], "title_sim": [0.4572722932616888], "body_sim": [0.24135918997814657], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 201}, {"A_title": "feat($animator): support CSS3 transition-delay property detection", "A_clean_title": ["feat", "anim", "support", "css3", "transit", "delay", "properti", "detect"], "B_title": "Update animator.js", "B_clean_title": ["updat", "anim", "js"], "A_body": "$animator doesn't pay attention to the CSS3 Transition Delay `transition-delay` property which is good for pushing an animation to start later. This fix provides that functionality.\n", "A_clean_body": ["anim", "n't", "pay", "attent", "css3", "transit", "delay", "transit", "delay", "properti", "which", "good", "push", "anim", "start", "later", "thi", "fix", "provid", "that", "function"], "B_body": "Added support for transition-delay property.\n", "B_clean_body": ["ad", "support", "transit", "delay", "properti"], "title_sim": [0.39819210243068054], "body_sim": [0.7290463405674648], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.7974793837740511, 1.0], "location_sim": [0.6097560975609756, 1.0], "pattern": 0, "time": 10}, {"A_title": "fix($animate): skip unnecessary addClass/removeClass animations", "A_clean_title": ["fix", "anim", "skip", "unnecessari", "addclass", "removeclass", "add", "class", "remov", "class", "anim"], "B_title": "fix(ngShowHide): stop ngShow and ngHide applying animations incorrectly", "B_clean_title": ["fix", "ngshowhid", "ng", "show", "hide", "stop", "ngshow", "ng", "show", "nghide", "ng", "hide", "appli", "anim", "incorrectli"], "A_body": "Skip addClass animations if the element already contains the class that is being\nadded to element. Also skip removeClass animations if the element does not contain\nthe class that is being removed.\n\nCloses #4401\nCloses #2332\n", "A_clean_body": ["skip", "addclass", "add", "class", "anim", "element", "alreadi", "contain", "class", "that", "be", "ad", "element", "also", "skip", "removeclass", "remov", "class", "anim", "element", "not", "contain", "class", "that", "be", "remov", "close", "4401", "close", "2332"], "B_body": "Fix ngShow and ngHide so they don't animate in/out their classes every time the watch expression is evaluated.  These directives now only change when the watch expression's boolean value actually changes.\n\nCloses #4401\n", "B_clean_body": ["fix", "ngshow", "ng", "show", "nghide", "ng", "hide", "so", "they", "n't", "anim", "out", "their", "class", "everi", "time", "watch", "express", "evalu", "these", "direct", "now", "onli", "chang", "when", "watch", "express", "'s", "boolean", "valu", "actual", "chang", "close", "4401"], "title_sim": [0.38880088607168195], "body_sim": [0.37063319713683157], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.021330786371997878, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 6}, {"A_title": "Update $window documentation to support 1.2.2", "A_clean_title": ["updat", "window", "document", "support"], "B_title": "docs($window): move use of $window to controller", "B_clean_title": ["doc", "window", "move", "use", "window", "control"], "A_body": "When you currently run the code example for $window you get the following error in the console:\n\n```\nError: [$parse:isecwindow] http://errors.angularjs.org/1.2.2/$parse/isecwindow?p0=%24window.alert(greeting)\n    at Error (<anonymous>)\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.2.2/angular.min.js:6:449\n    at Va (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.2/angular.min.js:85:122)\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.2.2/angular.min.js:160:152\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.2.2/angular.min.js:177:167\n    at g.$eval (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.2/angular.min.js:101:39)\n    at g.$apply (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.2/angular.min.js:101:317)\n    at HTMLButtonElement.<anonymous> (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.2/angular.min.js:177:149)\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.2.2/angular.min.js:27:15\n    at Array.forEach (native) \n```\n\nThis PR fixes that issue.\n", "A_clean_body": ["when", "you", "current", "run", "code", "exampl", "window", "you", "get", "follow", "error", "consol", "error", "pars", "isecwindow", "http", "angularj", "error", "org", "pars", "isecwindow", "p0=", "24window", "alert", "greet", "at", "error", "anonym", "at", "http", "googleapi", "min", "js:6:449", "ajax", "com", "ajax", "lib", "angularj", "angular", "at", "va", "http", "googleapi", "min", "js:85:122", "ajax", "com", "ajax", "lib", "angularj", "angular", "at", "http", "googleapi", "min", "js:160:152", "ajax", "com", "ajax", "lib", "angularj", "angular", "at", "http", "googleapi", "min", "js:177:167", "ajax", "com", "ajax", "lib", "angularj", "angular", "at", "eval", "http", "googleapi", "min", "js:101:39", "ajax", "com", "ajax", "lib", "angularj", "angular", "at", "appli", "http", "googleapi", "min", "js:101:317", "ajax", "com", "ajax", "lib", "angularj", "angular", "at", "htmlbuttonel", "html", "button", "element", "anonym", "http", "googleapi", "min", "js:177:149", "ajax", "com", "ajax", "lib", "angularj", "angular", "at", "http", "googleapi", "min", "js:27:15", "ajax", "com", "ajax", "lib", "angularj", "angular", "at", "array", "foreach", "each", "nativ", "thi", "pr", "fix", "that", "issu"], "B_body": "Move use of $window from expression to controller, because accessing\n$window in expressions is now dissalowed and doesn't work.\n\nCode example doesn't work, this PR will fix this.\n", "B_clean_body": ["move", "use", "window", "express", "control", "becaus", "access", "window", "express", "now", "dissalow", "n't", "work", "code", "exampl", "n't", "work", "thi", "pr", "will", "fix", "thi"], "title_sim": [0.31450010470381745], "body_sim": [0.09601585920841069], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.30941809333997733, 0.30941809333997733], "location_sim": [1.0, 1.0], "pattern": 0, "time": 2}, {"A_title": "Sanitize innert document", "A_clean_title": ["sanit", "innert", "document"], "B_title": "fix(sanitize): Do not duplicate self closing elements", "B_clean_title": ["fix", "sanit", "not", "duplic", "self", "close", "element"], "A_body": "", "A_clean_body": [], "B_body": "This is a refinement on top of #11790 that handles self closing elements\n", "B_clean_body": ["thi", "refin", "top", "11790", "that", "handl", "self", "close", "element"], "title_sim": [0.6234905191674249], "body_sim": [0.0], "file_list_sim": 0.45454545454545453, "overlap_files_len": 5, "code_sim": [0.24885266563893937, 0.29453080748979305], "location_sim": [0.7941747572815534, 0.8949671772428884], "pattern": 0, "time": 6}, {"A_title": "Update step_05", "A_clean_title": ["updat", "step", "05"], "B_title": "Fixing missing dependency in Step 5 of tutorial", "B_clean_title": ["fix", "miss", "depend", "step", "tutori"], "A_body": "This is missing in the source downloaded for step 5 and in the documentation for step 5.\n", "A_clean_body": ["thi", "miss", "sourc", "download", "step", "document", "step"], "B_body": "", "B_clean_body": [], "title_sim": [0.7365379848075386], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 1}, {"A_title": "Fix issue: 15536", "A_clean_title": ["fix", "issu", "15536"], "B_title": "fix($injector): do not use inherited $inject", "B_clean_title": ["fix", "injector", "not", "use", "inherit", "inject"], "A_body": "This PR only demonstrates a fix, it still needs for someone to add tests.\r\n\r\nCloses #15536", "A_clean_body": ["thi", "pr", "onli", "demonstr", "fix", "it", "still", "need", "someon", "add", "test", "close", "15536"], "B_body": "Ensure that a function has its own $inject property, and not an inherited\r\nproperty, when annotating. This ensures that derived functions / classes do not\r\nget the dependencies of their super class.\r\n\r\nFixes #15536\r\n\r\n**What kind of change does this PR introduce? (Bug fix, feature, docs update, ...)**\r\n\r\nBug fix\r\n\r\n**What is the current behavior? (You can also link to an open issue here)**\r\n\r\n#15536 \r\n\r\n**What is the new behavior (if this is a feature change)?**\r\n\r\n\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nYes\r\n\r\n**Please check if the PR fulfills these requirements**\r\n- [x] The commit message follows our guidelines: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n**Other information**:\r\n\r\nBREAKING CHANGE:\r\n\r\nPrior to this PR, derived classes with no dependencies could extend base classes with dependencies, as long as the derived classes did not have constructors. As of this PR, the derived class would be seen as having no dependencies, and the base class's constructor would be called with no arguments.", "B_clean_body": ["ensur", "that", "function", "ha", "it", "own", "inject", "properti", "not", "inherit", "properti", "when", "annot", "thi", "ensur", "that", "deriv", "function", "class", "not", "get", "depend", "their", "super", "class", "fix", "15536", "**what", "kind", "chang", "thi", "pr", "introduc", "bug", "fix", "featur", "doc", "updat", "bug", "fix", "**what", "current", "behavior", "you", "also", "link", "open", "issu", "here", "15536", "**what", "new", "behavior", "thi", "featur", "chang", "**doe", "thi", "pr", "introduc", "break", "chang", "ye", "**pleas", "check", "pr", "fulfil", "these", "requirements**", "commit", "messag", "follow", "our", "guidelin", "http", "md", "github", "com", "angular", "angular", "js", "blob", "master", "contribut", "commit", "messag", "format", "test", "chang", "have", "been", "ad", "bug", "fix", "featur", "doc", "have", "been", "ad", "updat", "bug", "fix", "featur", "**other", "information**", "break", "chang", "prior", "thi", "pr", "deriv", "class", "no", "depend", "could", "extend", "base", "class", "depend", "as", "long", "as", "deriv", "class", "did", "not", "have", "constructor", "as", "thi", "pr", "deriv", "class", "would", "seen", "as", "have", "no", "depend", "base", "class", "'s", "constructor", "would", "call", "no", "argument"], "title_sim": [0.2053988480860735], "body_sim": [0.36663369550712493], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.24137327974998746, 0.8362550155068059], "location_sim": [0.4166666666666667, 1.0], "pattern": 1, "time": 1}, {"A_title": "Ng animate", "A_clean_title": ["ng", "anim"], "B_title": "feat(ngAnimate): add support for animation", "B_clean_title": ["feat", "nganim", "ng", "anim", "add", "support", "anim"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.8584844830739604], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 2}, {"A_title": "Update index.ngdoc (karma-cli installation)", "A_clean_title": ["updat", "index", "ngdoc", "karma", "cli", "instal"], "B_title": "Karma installation on Mac/Linux command fix", "B_clean_title": ["karma", "instal", "mac", "linux", "command", "fix"], "A_body": "Request Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nAdded karma-cli installation (as proposed here http://stackoverflow.com/a/22329409/451962) which fixes karma's ability to run scripts\\test.bat on windows.\nTested and working.\n\n**Other Comments:**\n", "A_clean_body": ["request", "type", "doc", "how", "reproduc", "compon", "impact", "small", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "ad", "karma", "cli", "instal", "as", "propos", "here", "http", "stackoverflow", "com", "22329409", "451962", "which", "fix", "karma", "'s", "abil", "run", "bat", "script", "test", "window", "test", "work", "**other", "comment"], "B_body": "", "B_clean_body": [], "title_sim": [-0.0007271512064196808], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 2}, {"A_title": "feat($httpBackend): flush requests in desired order", "A_clean_title": ["feat", "httpbackend", "http", "backend", "flush", "request", "desir", "order"], "B_title": "feat(ngMock): add flushByIndex function", "B_clean_title": ["feat", "ngmock", "ng", "mock", "add", "flushbyindex", "flush", "by", "index", "function"], "A_body": "**What kind of change does this PR introduce? (Bug fix, feature, docs update, ...)**\n\nfeature\n\n**What is the current behavior? (You can also link to an open issue here)**\n#13717 We are currently unable to test what happens if two HTTP requests complete in a different order with the current API.\n\n**What is the new behavior (if this is a feature change)?**\n\nNow `$httpBackend.flush` has the second parameter `start`. So you can flush any range of pending requests array. Hence you can flush requests in a different order.\n\n**Does this PR introduce a breaking change?**\n\nNo.\n\n**Please check if the PR fulfills these requirements**\n- [x] The commit message follows our guidelines: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format\n- [x] Tests for the changes have been added (for bug fixes / features)\n- [x] Docs have been added / updated (for bug fixes / features)\n\n**Other information**:\n\nIt was impossible to flush pending requests in desired order.\nNow it is possible because you can specify a `start` number.\n", "A_clean_body": ["**what", "kind", "chang", "thi", "pr", "introduc", "bug", "fix", "featur", "doc", "updat", "featur", "**what", "current", "behavior", "you", "also", "link", "open", "issu", "here", "13717", "we", "are", "current", "unabl", "test", "what", "happen", "two", "http", "request", "complet", "differ", "order", "current", "api", "**what", "new", "behavior", "thi", "featur", "chang", "now", "httpbackend", "flush", "http", "backend", "ha", "second", "paramet", "start", "so", "you", "flush", "ani", "rang", "pend", "request", "array", "henc", "you", "flush", "request", "differ", "order", "**doe", "thi", "pr", "introduc", "break", "chang", "no", "**pleas", "check", "pr", "fulfil", "these", "requirements**", "commit", "messag", "follow", "our", "guidelin", "http", "md", "github", "com", "angular", "angular", "js", "blob", "master", "contribut", "commit", "messag", "format", "test", "chang", "have", "been", "ad", "bug", "fix", "featur", "doc", "have", "been", "ad", "updat", "bug", "fix", "featur", "**other", "information**", "it", "wa", "imposs", "flush", "pend", "request", "desir", "order", "now", "it", "possibl", "becaus", "you", "specifi", "start", "number"], "B_body": "Request Type: feature\n\nHow to reproduce: \n\nComponent(s): ngMock\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nI've recently needed to flush httpBackend requests in an arbitrary order to add unit tests around an edge case. This PR satisfies that need.\n\n**Other Comments:**\n\nAdds a flushByIndex function to allow pending requests on httpBackend to be flushed in an arbitrary\norder.\n", "B_clean_body": ["request", "type", "featur", "how", "reproduc", "compon", "ngmock", "ng", "mock", "impact", "small", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "'ve", "recent", "need", "flush", "httpbackend", "http", "backend", "request", "arbitrari", "order", "add", "unit", "test", "around", "edg", "case", "thi", "pr", "satisfi", "that", "need", "**other", "comment", "add", "flushbyindex", "flush", "by", "index", "function", "allow", "pend", "request", "httpbackend", "http", "backend", "flush", "arbitrari", "order"], "title_sim": [0.11257611482027116], "body_sim": [0.3157934204592674], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.5136663560236134, 0.515064088514497], "location_sim": [0.0, 0.0], "pattern": 0, "time": 887}, {"A_title": "fix(jqLite): Adding more support for custom element tagnames", "A_clean_title": ["fix", "jqlite", "jq", "lite", "ad", "more", "support", "custom", "element", "tagnam"], "B_title": "fix(jqLite): properly handle dash-delimited node names in `jqLiteBuildFragment`", "B_clean_title": ["fix", "jqlite", "jq", "lite", "properli", "handl", "dash", "delimit", "node", "name", "jqlitebuildfrag", "jq", "lite", "build", "fragment"], "A_body": "Before this change, jqLite would allow you to create elements such as\n\"my-foo\" and \"div-foo\" but would not allow you to create certain\nelements such as \"tr-foo\" and  \"td-foo\".  This is incorrect as well as\nundocumented and unexpected.\n", "A_clean_body": ["befor", "thi", "chang", "jqlite", "jq", "lite", "would", "allow", "you", "creat", "element", "such", "as", "my", "foo", "div", "foo", "but", "would", "not", "allow", "you", "creat", "certain", "element", "such", "as", "tr", "foo", "td", "foo", "thi", "incorrect", "as", "well", "as", "undocu", "unexpect"], "B_body": "Closes #10617\n", "B_clean_body": ["close", "10617"], "title_sim": [0.23561409430697236], "body_sim": [0.014310204317516416], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.5714924403897067, 0.5714924403897067], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "fix(orderBy): ensure correct ordering with arrays of objects and no predicate", "A_clean_title": ["fix", "orderbi", "order", "by", "ensur", "correct", "order", "array", "object", "no", "predic"], "B_title": "feat(orderBy): speed optimization", "B_clean_title": ["feat", "orderbi", "order", "by", "speed", "optim"], "A_body": "This fix also considerably refactors how the `orderBy` filter works in internally.\n\nThe new algorithm precomputes the predicate values for the array being ordered. This makes the algorith easier to follow but also ensures that this computation is done a maximum of n times, whereas in the previous algorithm it could be greater. The downside is that we must temporarily store this intermediate array.\n\nThere could be performance implications, but they are as likely to be beneficial as detrimental. It could probably do with benchmarking.\n\nCloses #11866\n", "A_clean_body": ["thi", "fix", "also", "consider", "refactor", "how", "orderbi", "order", "by", "filter", "work", "intern", "new", "algorithm", "precomput", "predic", "valu", "array", "be", "order", "thi", "make", "algorith", "easier", "follow", "but", "also", "ensur", "that", "thi", "comput", "done", "maximum", "time", "wherea", "previou", "algorithm", "it", "could", "greater", "downsid", "that", "we", "must", "temporarili", "store", "thi", "intermedi", "array", "there", "could", "perform", "implic", "but", "they", "are", "as", "like", "benefici", "as", "detriment", "it", "could", "probabl", "benchmark", "close", "11866"], "B_body": "Closes #4177.\n", "B_clean_body": ["close", "4177"], "title_sim": [0.2934569427044872], "body_sim": [0.12356673604243573], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.08702528101094986, 0.14098241136993903], "location_sim": [0.0, 0.0], "pattern": -1, "time": 613}, {"A_title": "fix($animate): ensure transition-property is not changed when only keyframe animations are in use", "A_clean_title": ["fix", "anim", "ensur", "transit", "properti", "not", "chang", "when", "onli", "keyfram", "anim", "are", "use"], "B_title": "fix(ngAnimate): fix regression with animations on translate properties", "B_clean_title": ["fix", "nganim", "ng", "anim", "fix", "regress", "anim", "translat", "properti"], "A_body": "Closes #3933\n", "A_clean_body": ["close", "3933"], "B_body": "1.2.0rc1 induced a fix that prevented animations from running twice, but this had the unintended consequence of causing animations on translate, translateX, and translateY to sometimes not run. This fix checks for those cases and only applies the work-around when appropriate.\n\nMy only issue is that I'm not sure how to (or if we even can) test this.\n\nCloses #3933\n", "B_clean_body": ["0rc1", "induc", "fix", "that", "prevent", "anim", "run", "twice", "but", "thi", "had", "unintend", "consequ", "caus", "anim", "translat", "translatex", "translat", "translatey", "translat", "sometim", "not", "run", "thi", "fix", "check", "those", "case", "onli", "appli", "work", "around", "when", "appropri", "my", "onli", "issu", "that", "'m", "not", "sure", "how", "or", "we", "even", "test", "thi", "close", "3933"], "title_sim": [0.7669708391145308], "body_sim": [0.12316058643507334], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.09459150358059296, 0.0], "location_sim": [0.29333333333333333, 0.5641025641025641], "pattern": 1, "time": 5}, {"A_title": "docs(guide/Migrating from Previous Versions): Removes duplicate #13c252", "A_clean_title": ["doc", "guid", "migrat", "previou", "version", "remov", "duplic", "13c252"], "B_title": "docs(guide/migration): remove duplicate IE11 section", "B_clean_title": ["doc", "guid", "migrat", "remov", "duplic", "ie11", "section"], "A_body": "Removes duplicate #13c252 **IE11 only** migration text.", "A_clean_body": ["remov", "duplic", "13c252", "**ie11", "only**", "migrat", "text"], "B_body": "Remove duplicate IE11 section from 1.6 migration guide:\r\nhttps://github.com/angular/angular.js/blob/master/docs/content/guide/migration.ngdoc#L487-L493\r\nhttps://github.com/angular/angular.js/blob/master/docs/content/guide/migration.ngdoc#L537-L543", "B_clean_body": ["remov", "duplic", "ie11", "section", "migrat", "guid", "http", "ngdoc", "github", "com", "angular", "angular", "js", "blob", "master", "doc", "content", "guid", "migrat", "l487", "l493", "http", "ngdoc", "github", "com", "angular", "angular", "js", "blob", "master", "doc", "content", "guid", "migrat", "l537", "l543"], "title_sim": [0.6152636296708852], "body_sim": [0.3524405976883811], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 0}, {"A_title": "fix($compile): use the correct namespace for transcluded svg elements", "A_clean_title": ["fix", "compil", "use", "correct", "namespac", "transclud", "svg", "element"], "B_title": "Added namespace tracking to $compile", "B_clean_title": ["ad", "namespac", "track", "compil"], "A_body": "Via transclusion, svg elements can occur outside an `<svg>` container in an\nAngular template but are put into an `<svg>` container through compilation\nand linking.\n\nE.g.\nGiven that `svg-container` is a transcluding directive with\nthe followingg template:\n\n```\n<svg ng-transclude></svg>\n```\n\nThe following markup creates a `<circle>` inside of an `<svg>` element\nduring runtime:\n\n```\n<svg-container>\n  <circle></circle>\n</svg-container>\n```\n\nHowever, this produces non working `<circle>` elements, as svg elements\nneeds to be created inside of an `<svg>` element.\n\nThis change detects for most cases the correct namespace of transcluded content\nand recreates that content in the correct `<svg>` container\nwhen needed during compilation. For special cases it adds an addition argument\nto `$transclude` that allows to specify the future parent node of elements\nthat will be cloned and attached using the `cloneAttachFn`.\n\nRelated to #8494\n", "A_clean_body": ["via", "transclus", "svg", "element", "occur", "outsid", "svg", "contain", "angular", "templat", "but", "are", "put", "into", "svg", "contain", "through", "compil", "link", "given", "that", "svg", "contain", "transclud", "direct", "followingg", "templat", "svg", "ng", "transclud", "svg", "follow", "markup", "creat", "circl", "insid", "svg", "element", "dure", "runtim", "svg", "contain", "circl", "circl", "contain", "svg", "howev", "thi", "produc", "non", "work", "circl", "element", "as", "svg", "element", "need", "creat", "insid", "svg", "element", "thi", "chang", "detect", "most", "case", "correct", "namespac", "transclud", "content", "recreat", "that", "content", "correct", "svg", "contain", "when", "need", "dure", "compil", "special", "case", "it", "add", "addit", "argument", "transclud", "that", "allow", "specifi", "futur", "parent", "node", "element", "that", "will", "clone", "attach", "cloneattachfn", "clone", "attach", "fn", "relat", "8494"], "B_body": "This is in relation to #8494\n### Things to note:\n1. This is a work in progress.\n2. This needs cleaned up badly.\n3. The commits need flattened.\n4. etc.\n### Basic Idea\n\nAdded namespace tracking to the compile process.\n\nWhen a namespace change is detected, it updates a namespace context object that contains methods to wrap and clone elements appropriately. There is some ugliness where the namespace context had to be ferried around via some monkey-patches to get them into the appropriate closures.\n", "B_clean_body": ["thi", "relat", "8494", "thing", "note", "thi", "work", "progress", "thi", "need", "clean", "up", "badli", "commit", "need", "flatten", "etc", "basic", "idea", "ad", "namespac", "track", "compil", "process", "when", "namespac", "chang", "detect", "it", "updat", "namespac", "context", "object", "that", "contain", "method", "wrap", "clone", "element", "appropri", "there", "some", "ugli", "where", "namespac", "context", "had", "ferri", "around", "via", "some", "monkey", "patch", "get", "them", "into", "appropri", "closur"], "title_sim": [0.4329837599834448], "body_sim": [0.34931784380564596], "file_list_sim": 0.3333333333333333, "overlap_files_len": 2, "code_sim": [0.8256098042442098, 0.8488011613920846], "location_sim": [0.36973833902161546, 0.40726817042606517], "pattern": 1, "time": 6}, {"A_title": "refactor(ngRoute): compile the route once and reuse the regex", "A_clean_title": ["refactor", "ngrout", "ng", "rout", "compil", "rout", "onc", "reus", "regex"], "B_title": "feat($route): express style route matching", "B_clean_title": ["feat", "rout", "express", "style", "rout", "match"], "A_body": "Compile the route path once and reuse it in the future\n", "A_clean_body": ["compil", "rout", "path", "onc", "reus", "it", "futur"], "B_body": "visionmedia/express style route matching:\n- optional params\n- wildcard params\n- regexes\n\n``` javascript\n.when('/bar/:foo?)\n  $location.path('/bar') --> $routePrams: {}\n  $location.path('/bar/foovalue') --> $routePrams: {foo: 'foovalue'}\n\n.when('/bar/*')\n  $location.path('/bar/foovalue') --> $routeParams: {0: 'foovalue'}\n\n.when('/bar/*.*)\n  $location.path('/bar/foo.js') --> $routeParams: {0: 'foo', 1: 'js}\n\n.when(/\\/(\\d+)/)\n  $location.path('/12') --> $routeParams: {0: '12'}\n```\n", "B_clean_body": ["visionmedia", "express", "style", "rout", "match", "option", "param", "wildcard", "param", "regex", "javascript", "when", "bar", "foo", "locat", "path", "bar", "routepram", "rout", "pram", "locat", "path", "bar", "foovalu", "routepram", "rout", "pram", "foo", "'foovalu", "when", "bar", "locat", "path", "bar", "foovalu", "routeparam", "rout", "param", "'foovalu", "when", "bar", "locat", "path", "js", "bar", "foo", "routeparam", "rout", "param", "'foo", "'j", "when", "d+", "locat", "path", "12", "routeparam", "rout", "param", "'12"], "title_sim": [0.7728480721043853], "body_sim": [0.6117668938376086], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.39074554321506344, 0.22918322651099435], "location_sim": [0.38223938223938225, 0.5351351351351351], "pattern": 0, "time": 215}, {"A_title": "docs(docs.css): add media query fix", "A_clean_title": ["doc", "doc", "css", "add", "media", "queri", "fix"], "B_title": "chore(docs): fix layout between 769px and 992px", "B_clean_title": ["chore", "doc", "fix", "layout", "between", "769px", "992px"], "A_body": "Request Type: docs\n\nHow to reproduce: resize browser to between 992px and 768px\n\nComponent(s): \n\nImpact: \n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n**Other Comments:**\n\nshow main-body content that is hidden underneath bootstrap navbar\nbetween 992px and 768px screen width\n", "A_clean_body": ["request", "type", "doc", "how", "reproduc", "resiz", "browser", "between", "992px", "768px", "compon", "impact", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "**other", "comment", "show", "main", "bodi", "content", "that", "hidden", "underneath", "bootstrap", "navbar", "between", "992px", "768px", "screen", "width"], "B_body": "Left nav and main content were tucked slightly under the version picker / breadcrumb navbar\n\n![angulardocs](https://f.cloud.github.com/assets/1153097/2283956/f793dcf4-9fc3-11e3-9b7b-ab5a947e16ac.PNG)\n", "B_clean_body": ["left", "nav", "main", "content", "were", "tuck", "slightli", "under", "version", "picker", "breadcrumb", "navbar", "angulardoc", "http", "9fc3", "11e3", "9b7b", "cloud", "github", "ab5a947e16ac", "png", "com", "asset", "1153097", "2283956", "f793dcf4"], "title_sim": [0.2793589547998165], "body_sim": [0.26161639723798086], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 1, "time": 42}, {"A_title": "fix(ngInput): When 'name' attribute is a property name, '$name' should be evaluated to the property value", "A_clean_title": ["fix", "nginput", "ng", "input", "when", "'name", "attribut", "properti", "name", "name", "evalu", "properti", "valu"], "B_title": "feat(input): allow templates on the `name` attribute of an <input>", "B_clean_title": ["feat", "input", "allow", "templat", "name", "attribut", "input"], "A_body": "Not exactly sure if this is a bug fix or a feature enhancement. For simple cases such as the following, it works:\n\n``` html\n<form name=\"myForm\">\n    User name: <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n    <span class=\"error\" ng-show=\"myForm.userName.$error.required\">Required!</span>\n</form>\n```\n\nBut if the `<input>` is dynamically generated and the `name` is a scope property, it run into issue:\n\n``` html\n<form name=\"myForm\">\n    <div ng-repeat=\"field in formFields\">\n        <span>{{field.label}}</span>\n        <input type=\"text\" name=\"{{field.name}}\" required>\n        <span class=\"error\" ng-show=\"myForm[field.name].$error.required\">Required!</span>\n    </div>\n</form>\n```\n", "A_clean_body": ["not", "exactli", "sure", "thi", "bug", "fix", "or", "featur", "enhanc", "simpl", "case", "such", "as", "follow", "it", "work", "html", "form", "name=", "myform", "my", "form", "user", "name", "input", "type=", "text", "name=", "usernam", "user", "name", "ng", "model=", "user", "name", "requir", "span", "class=", "error", "ng", "show=", "myform", "usernam", "my", "form", "user", "name", "error", "requir", "requir", "span", "form", "but", "input", "dynam", "gener", "name", "scope", "properti", "it", "run", "into", "issu", "html", "form", "name=", "myform", "my", "form", "div", "ng", "repeat=", "field", "formfield", "form", "field", "span", "field", "label", "span", "input", "type=", "text", "name=", "field", "name", "requir", "span", "class=", "error", "ng", "show=", "myform", "my", "form", "field", "name", "error", "requir", "requir", "span", "div", "form"], "B_body": "Handle the `name` attribute on an `<input>` as a template\n", "B_clean_body": ["handl", "name", "attribut", "input", "as", "templat"], "title_sim": [0.6257301983517849], "body_sim": [0.29428377436748476], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.22058320077349922, 0.024337495643568186], "location_sim": [0.0, 0.0], "pattern": 0, "time": 78}, {"A_title": "Fix Money simbol for Argentina", "A_clean_title": ["fix", "money", "simbol", "argentina"], "B_title": "Fixes Argentina's currency.", "B_clean_title": ["fix", "argentina", "'s", "currenc"], "A_body": "es-ar is Argentina translation. Argentina has pesos with '$' currency symbol.\n", "A_clean_body": ["es", "ar", "argentina", "translat", "argentina", "ha", "peso", "currenc", "symbol"], "B_body": "Currency symbol is '$'. The symbol is placed before the number.\n\nCloses #8583\n", "B_clean_body": ["currenc", "symbol", "symbol", "place", "befor", "number", "close", "8583"], "title_sim": [0.5386098940684985], "body_sim": [0.743612066480535], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 1}, {"A_title": "feat($http): adds xhrFields to $http config object", "A_clean_title": ["feat", "http", "add", "xhrfield", "xhr", "field", "http", "config", "object"], "B_title": "feat($http): add option for unsafe xhr requests in FirefoxOS", "B_clean_title": ["feat", "http", "add", "option", "unsaf", "xhr", "request", "firefoxo", "firefox", "os"], "A_body": "The `xhrFields` object is passed to the XMLHttpRequest constructor making it possible to set non-standard properties on the XMLHttpRequest object. It is also possible to set the object on `$http.defaults` to use it globally. With this functionality it is possible to set the `mozSystem` and `mozAnon` properties, which is required to use angular in a packaged Firefox OS app. See https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#XMLHttpRequest()\n\nCloses #2318\n", "A_clean_body": ["xhrfield", "xhr", "field", "object", "pass", "xmlhttprequest", "xml", "http", "request", "constructor", "make", "it", "possibl", "set", "non", "standard", "properti", "xmlhttprequest", "xml", "http", "request", "object", "it", "also", "possibl", "set", "object", "http", "default", "use", "it", "global", "thi", "function", "it", "possibl", "set", "mozsystem", "moz", "system", "mozanon", "moz", "anon", "properti", "which", "requir", "use", "angular", "packag", "firefox", "os", "app", "see", "http", "mozilla", "us", "doc", "dom", "xmlhttprequest", "develop", "org", "en", "xml", "http", "request", "xmlhttprequest", "xml", "http", "request", "close", "2318"], "B_body": "Previously, it was not possible to pass settings to the constructor of the XMLHttpRequest.  This\nadds an optional config property `xhrConfig` to the $http constructor, allowing us to do so.  This\nis required for use of the mozAnon and mozSystem options for FirefoxOS.\nSee https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#XMLHttpRequest() for details.\n\nCloses #2318\n", "B_clean_body": ["previous", "it", "wa", "not", "possibl", "pass", "set", "constructor", "xmlhttprequest", "xml", "http", "request", "thi", "add", "option", "config", "properti", "xhrconfig", "xhr", "config", "http", "constructor", "allow", "us", "so", "thi", "requir", "use", "mozanon", "moz", "anon", "mozsystem", "moz", "system", "option", "firefoxo", "firefox", "os", "see", "http", "mozilla", "us", "doc", "dom", "xmlhttprequest", "develop", "org", "en", "xml", "http", "request", "xmlhttprequest", "xml", "http", "request", "detail", "close", "2318"], "title_sim": [0.4441846255850327], "body_sim": [0.7558626113664302], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.5487385995964524, 0.6915102599750256], "location_sim": [0.48704663212435234, 0.9215686274509803], "pattern": 1, "time": 0}, {"A_title": "fix(ngSanitize): prefer textContent to innerText to avoid layout thrashing", "A_clean_title": ["fix", "ngsanit", "ng", "sanit", "prefer", "textcont", "text", "content", "innertext", "inner", "text", "avoid", "layout", "thrash"], "B_title": "fix(sanitize): prevent layout trashing if possible", "B_clean_title": ["fix", "sanit", "prevent", "layout", "trash", "possibl"], "A_body": "innerText depends on styling as it doesn't display hidden elements.\nTherefore, it's better to use textContent not to cause unnecessary\nreflows. However, IE<9 don't support textContent so the innerText\nfallback is necessary. Note that we need to check for undefine\nand not just reverse the order of these two since for an empty string\ninnerText would still be checked and a reflow would occur.\n\nFix #4720.\n", "A_clean_body": ["innertext", "inner", "text", "depend", "style", "as", "it", "n't", "display", "hidden", "element", "therefor", "it", "'s", "better", "use", "textcont", "text", "content", "not", "caus", "unnecessari", "reflow", "howev", "ie", "n't", "support", "textcont", "text", "content", "so", "innertext", "inner", "text", "fallback", "necessari", "note", "that", "we", "need", "check", "undefin", "not", "just", "revers", "order", "these", "two", "sinc", "empti", "string", "innertext", "inner", "text", "would", "still", "check", "reflow", "would", "occur", "fix", "4720"], "B_body": "Using the style agnostic \"textContent\" in favor\nfor for \"innerText\" prevents layout trashing.\n\nFixes #4720\n", "B_clean_body": ["style", "agnost", "textcont", "text", "content", "favor", "innertext", "inner", "text", "prevent", "layout", "trash", "fix", "4720"], "title_sim": [0.5013784121479872], "body_sim": [0.5323771689904705], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.41483297334055025, 0.37936384769965364], "location_sim": [0.0, 0.0], "pattern": 1, "time": 1}, {"A_title": "fix($route): fix redirection with optional/eager params", "A_clean_title": ["fix", "rout", "fix", "redirect", "option", "eager", "param"], "B_title": "fix(ngRoute): wrong redirect to paths containing optional or special parameters", "B_clean_title": ["fix", "ngrout", "ng", "rout", "wrong", "redirect", "path", "contain", "option", "or", "special", "paramet"], "A_body": "Previously, when (automatically) redirecting from path that fetured a trailing slash and optional or \"eager\" parameters, the resulting path would (incorrectly) contain the special characters (`?`,`*`) along with the parameter values.\n(There is also a first (unrelated) commit, that fixes the names of 2 tests in `routeSpec`.)\n\nCloses #9819\n", "A_clean_body": ["previous", "when", "automat", "redirect", "path", "that", "fetur", "trail", "slash", "option", "or", "eager", "paramet", "result", "path", "would", "incorrectli", "contain", "special", "charact", "along", "paramet", "valu", "there", "also", "first", "unrel", "commit", "that", "fix", "name", "test", "routespec", "rout", "spec", "close", "9819"], "B_body": "When the path contains optional parameters `?` or special parameters `*` the redirects to those routes are broken, the location will end with the relative encoded character.\n\nTo reproduce the issue:\n- create a route with optional parameters, es. `$routeProvider.when('/profile/:userId?', ...)`\n- angular will add the automatic redirect with or without the trailing **/**, in this case `'/profile/:userId?/'`\n- point your browser to the redirect `http://localhost/#!/profile/0/`, you'll see the encoded `? (%3F)` at the end of the url: `http://localhost/#!/profile/0%3F`\n\nHappens also for the special parameters `*` and also for the opposite scenario, when the route has the ending **/** (`/profile/:userId?/`) and you browse the url without slash `/profile/0`. It affects every redirect that uses the function interpolate in combination with special parameters.\n", "B_clean_body": ["when", "path", "contain", "option", "paramet", "or", "special", "paramet", "redirect", "those", "rout", "are", "broken", "locat", "will", "end", "rel", "encod", "charact", "reproduc", "issu", "creat", "rout", "option", "paramet", "es", "routeprovid", "when", "rout", "provid", "profil", "userid", "user", "id", "angular", "will", "add", "automat", "redirect", "or", "without", "trail", "thi", "case", "profil", "userid", "user", "id", "point", "your", "browser", "redirect", "http", "localhost", "profil", "you", "'ll", "see", "encod", "3f", "at", "end", "url", "http", "localhost", "profil", "3f", "happen", "also", "special", "paramet", "also", "opposit", "scenario", "when", "rout", "ha", "end", "profil", "userid", "user", "id", "you", "brows", "url", "without", "slash", "profil", "it", "affect", "everi", "redirect", "that", "use", "function", "interpol", "combin", "special", "paramet"], "title_sim": [0.641875485465953], "body_sim": [0.6986263428854138], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 290}, {"A_title": "revert fix($location): make legacy browsers behave like modern ones in html5Mode", "A_clean_title": ["revert", "fix", "locat", "make", "legaci", "browser", "behav", "like", "modern", "one", "html5mode"], "B_title": "fix($location): consider baseHref in relative link for legacy browsers", "B_clean_title": ["fix", "locat", "consid", "basehref", "base", "href", "rel", "link", "legaci", "browser"], "A_body": "These commits have caused more problems than they've been worth, and we get to remove some code, too.\n\nReverts: https://github.com/angular/angular.js/commit/3f047704c70a957596371fec554d3e1fb066a29d, https://github.com/angular/angular.js/commit/49e7c32bb45ce3984df6768ba7b2f6a723a4ebe7\n\nOpinions on reverting these would be appreciated! /cc @IgorMinar\n", "A_clean_body": ["these", "commit", "have", "caus", "more", "problem", "than", "they", "'ve", "been", "worth", "we", "get", "remov", "some", "code", "too", "revert", "http", "github", "com", "angular", "angular", "js", "commit", "3f047704c70a957596371fec554d3e1fb066a29d", "http", "github", "com", "angular", "angular", "js", "commit", "49e7c32bb45ce3984df6768ba7b2f6a723a4ebe7", "opinion", "revert", "these", "would", "appreci", "cc", "igorminar", "igor", "minar"], "B_body": "Request Type: bug\n\n**How to reproduce:**\n\nIn a legacy browser that doesn't support HTML5 push state (ie: IE9) have the following:\n- `$locationProvider.html5Mode(true).hashPrefix('!');` in app configuration;\n- a number of routes such as `/foo`, `/bar` in the `$routeProvider` configuration;\n- `<base href=\"/en/\">` in page headers;\n- `<a href=\"/en/foo\">` in a link.\n\nWhen clicking a link, it is rewritten as: `http://host/en/#!/en/foo` \nExpected: `http://host/en/#!/foo`\n\nComponent(s): $location\n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Other Comments:**\n\nI couldn't yet devise any test for covering this case. This fix concern a click handler on the `$rootElement` which (afaik) is not covered in the current tests.\n\nPlease let me know if you find it reasonable and if you have ideas on how to test for it.\nThanks!\n", "B_clean_body": ["request", "type", "bug", "**how", "reproduc", "legaci", "browser", "that", "n't", "support", "html5", "push", "state", "ie", "ie9", "have", "follow", "locationprovid", "html5mode", "locat", "provid", "true", "hashprefix", "hash", "prefix", "app", "configur", "number", "rout", "such", "as", "foo", "bar", "routeprovid", "rout", "provid", "configur", "base", "href=", "en", "page", "header", "href=", "en", "foo", "link", "when", "click", "link", "it", "rewritten", "as", "http", "host", "en", "en", "foo", "expect", "http", "host", "en", "foo", "compon", "locat", "impact", "medium", "complex", "small", "thi", "issu", "relat", "**other", "comment", "could", "n't", "yet", "devis", "ani", "test", "cover", "thi", "case", "thi", "fix", "concern", "click", "handler", "rootel", "root", "element", "which", "afaik", "not", "cover", "current", "test", "pleas", "let", "me", "know", "you", "find", "it", "reason", "you", "have", "idea", "how", "test", "it", "thank"], "title_sim": [0.516353533110875], "body_sim": [0.14478303694550676], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 19}, {"A_title": "Update ngClass.js", "A_clean_title": ["updat", "ngclass", "js", "ng", "class"], "B_title": "fix(ngClass): handle index change correctly", "B_clean_title": ["fix", "ngclass", "ng", "class", "handl", "index", "chang", "correctli"], "A_body": "I don't know if this was intended, but I don't think the code was comparing the indexes correctly and it was causing some weird behavior when using the ng-class-even and ng-class-odd directives.\n\nSee the following plunkr for an example of the bug.  http://plnkr.co/edit/VAi6DB0QdWRutNGnVdSL?p=preview\n\nSelect the Red Radio button option to see that when switching classes on rows the classes are not always switched properly.\n", "A_clean_body": ["n't", "know", "thi", "wa", "intend", "but", "n't", "think", "code", "wa", "compar", "index", "correctli", "it", "wa", "caus", "some", "weird", "behavior", "when", "ng", "class", "even", "ng", "class", "odd", "direct", "see", "follow", "plunkr", "exampl", "bug", "http", "plnkr", "co", "edit", "vai6db0qdwrutngnvdsl", "ai6db0qd", "rut", "gn", "vd", "sl", "p=preview", "select", "red", "radio", "button", "option", "see", "that", "when", "switch", "class", "row", "class", "are", "not", "alway", "switch", "properli"], "B_body": "changed the odd/even calculation to be done using modulo operation instead of bitwise operation. the bitwise operation caused issues with operator precedance (`mod !== old$index & 1` is actually parsed as `(mod !== old$index) & 1` and not `mod !== (old$index & 1)` as might be expected). decided it is better to just use modulo operation for readibility instead of adding parentheses.\n\nfixes #7256\n", "B_clean_body": ["chang", "odd", "even", "calcul", "done", "modulo", "oper", "instead", "bitwis", "oper", "bitwis", "oper", "caus", "issu", "oper", "preced", "mod", "old", "index", "actual", "pars", "as", "mod", "old", "index", "not", "mod", "old", "index", "as", "might", "expect", "decid", "it", "better", "just", "use", "modulo", "oper", "readibl", "instead", "ad", "parenthes", "fix", "7256"], "title_sim": [0.8056930023997493], "body_sim": [0.31736922429210535], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.35714285714285715, 1.0], "pattern": 0, "time": 19}, {"A_title": "fixed controller name in markup", "A_clean_title": ["fix", "control", "name", "markup"], "B_title": "Corrected controller name in html binding", "B_clean_title": ["correct", "control", "name", "html", "bind"], "A_body": "Request Type: docs\n\nHow to reproduce: \n\nComponent(s): forms\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nThe \"Binding to form and control state\" sample had a wrong controller name which prevents the sample from running\n\n**Other Comments:**\n", "A_clean_body": ["request", "type", "doc", "how", "reproduc", "compon", "form", "impact", "small", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "bind", "form", "control", "state", "sampl", "had", "wrong", "control", "name", "which", "prevent", "sampl", "run", "**other", "comment"], "B_body": "Request Type: bug\n\nHow to reproduce: Go to https://docs.angularjs.org/api/ng/filter/orderBy and check the example in the bottom\n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nThis is a very tiny problem with one of the demos on the orderBy doc page.\n\n**Other Comments:**\n\nController was set to Ctrl and controller was named ExampleController in js. Changed the html binding to ExampleController to fix the demo.\n", "B_clean_body": ["request", "type", "bug", "how", "reproduc", "go", "http", "angularj", "doc", "org", "api", "ng", "filter", "orderbi", "order", "by", "check", "exampl", "bottom", "compon", "impact", "small", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "thi", "veri", "tini", "problem", "one", "demo", "orderbi", "order", "by", "doc", "page", "**other", "comment", "control", "wa", "set", "ctrl", "control", "wa", "name", "examplecontrol", "exampl", "control", "js", "chang", "html", "bind", "examplecontrol", "exampl", "control", "fix", "demo"], "title_sim": [0.5669581708227978], "body_sim": [0.7130934504733227], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 5}, {"A_title": "refactor: remove the remaining IE8 code bits from the codebase", "A_clean_title": ["refactor", "remov", "remain", "ie8", "code", "bit", "codebas"], "B_title": "chore(IE8): remove all IE8 specific code", "B_clean_title": ["chore", "ie8", "remov", "all", "ie8", "specif", "code"], "A_body": "", "A_clean_body": [], "B_body": "Remove all code that was IE8 specific\n", "B_clean_body": ["remov", "all", "code", "that", "wa", "ie8", "specif"], "title_sim": [0.5010399860607603], "body_sim": [0.0], "file_list_sim": 0.18181818181818182, "overlap_files_len": 4, "code_sim": [0.0, 0.0], "location_sim": [0.2546972860125261, 0.9457364341085271], "pattern": 0, "time": 32}, {"A_title": "Docs(tutorial): Corrected a spelling mistake in step 7", "A_clean_title": ["doc", "tutori", "correct", "spell", "mistak", "step"], "B_title": "docs (tutorial/step_07): Correcting a type-o", "B_clean_title": ["doc", "07", "tutori", "step", "correct", "type"], "A_body": "rpobbaly -> probably\n", "A_clean_body": ["rpobbali", "probabl"], "B_body": "Changing the spelling of probably.\n", "B_clean_body": ["chang", "spell", "probabl"], "title_sim": [0.9769573468515399], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 4}, {"A_title": "feat($http): Pass http config to response interceptors", "A_clean_title": ["feat", "http", "pass", "http", "config", "respons", "interceptor"], "B_title": "feat($http): promise-based request interceptors", "B_clean_title": ["feat", "http", "promis", "base", "request", "interceptor"], "A_body": "Allow response interceptors to use the config object passed to the\n$http call that the response originated from\n\n---\n\nThis arose from a use case where I needed a global loading indicator with loading messages that were customized for each endpoint.\n\nHere is a jsfiddle I created that demonstrates this use case with a build of angular including this change: http://jsfiddle.net/ashelvey/UJ2Xx/ \n\nYou can use Charles, Fiddler, etc.. to throttle http calls for a more realistic demo.\n\n(CLA signed)\n", "A_clean_body": ["allow", "respons", "interceptor", "use", "config", "object", "pass", "http", "call", "that", "respons", "origin", "thi", "aros", "use", "case", "where", "need", "global", "load", "indic", "load", "messag", "that", "were", "custom", "each", "endpoint", "here", "jsfiddl", "creat", "that", "demonstr", "thi", "use", "case", "build", "angular", "includ", "thi", "chang", "http", "jsfiddl", "net", "ashelvey", "uj2xx", "you", "use", "charl", "fiddler", "etc", "throttl", "http", "call", "more", "realist", "demo", "cla", "sign"], "B_body": "Currently there is no easy way to globally intercept requests sent with $http \u2013 similar to the way responses can be intercepted with response interceptors. Furthermore, there are many legitimate scenarios and use-cases where the need for request interception arises; for example\n- if security tokens, parameters or headers need to be calculated for each individual request\n- for collecting statistics like request counts, measuring turnaround times etc.\n- for dynamic, client-side redirects (e.g., rewrite /api/x to /api/experimental/x for resource x but not resource y)\n\nPlease see #929 for a further discussion (and use-cases) on this topic.\n## Implementation\n\nThe request interceptor registration works exactly like the registration of response interceptors (in fact, I have put this into a separate routine to make it more explicit). If request interceptors are present, they are prepended to the promise chain returned by $http \u2013 this was mostly devised and written by @splondike \u2013 this gives the interceptors a lot of flexibility and fits very well into the Angular API.\n## Tests and Documentation\n\nThis pull requests includes both tests and documentation of the new feature.\n\nA note on testing: a separate call to $rootScope.$apply is necessary to test the interceptors with the mocked http backend.\n## Example\n\n```\n// register interceptor using an anonymous function\n$httpProvider.requestInterceptors.push(function() {\n  return function(promise) {\n    return promise.then(function(config) {\n\n      // the config object will be used by the actual request\n      // you can modify it here\n\n      config.url = '/intercepted/' + config.url;\n\n      // return the config object to pass it on to the next interceptor\n      return config;\n\n      // if you reject the promise, the promise\n      // returned by $http will be rejected\n    };\n  };\n});\n```\n## Compatibility\n\nWhen no request interceptors are registered, no promises are prepended to the chain. Therefore, this feature should be completely backwards compatible \u2013 if you register not interceptors everything stays the same.\n", "B_clean_body": ["current", "there", "no", "easi", "way", "global", "intercept", "request", "sent", "http", "similar", "way", "respons", "intercept", "respons", "interceptor", "furthermor", "there", "are", "mani", "legitim", "scenario", "use", "case", "where", "need", "request", "intercept", "aris", "exampl", "secur", "token", "paramet", "or", "header", "need", "calcul", "each", "individu", "request", "collect", "statist", "like", "request", "count", "measur", "turnaround", "time", "etc", "dynam", "client", "side", "redirect", "rewrit", "api", "api", "experiment", "resourc", "but", "not", "resourc", "pleas", "see", "929", "further", "discuss", "use", "case", "thi", "topic", "implement", "request", "interceptor", "registr", "work", "exactli", "like", "registr", "respons", "interceptor", "fact", "have", "put", "thi", "into", "separ", "routin", "make", "it", "more", "explicit", "request", "interceptor", "are", "present", "they", "are", "prepend", "promis", "chain", "return", "by", "http", "thi", "wa", "mostli", "devis", "written", "by", "splondik", "thi", "give", "interceptor", "lot", "flexibl", "fit", "veri", "well", "into", "angular", "api", "test", "document", "thi", "pull", "request", "includ", "both", "test", "document", "new", "featur", "note", "test", "separ", "call", "rootscop", "root", "scope", "appli", "necessari", "test", "interceptor", "mock", "http", "backend", "exampl", "regist", "interceptor", "anonym", "function", "httpprovid", "requestinterceptor", "push", "http", "provid", "request", "interceptor", "function", "return", "function", "promis", "return", "promis", "then", "function", "config", "config", "object", "will", "use", "by", "actual", "request", "you", "modifi", "it", "here", "config", "url", "intercept", "config", "url", "return", "config", "object", "pass", "it", "next", "interceptor", "return", "config", "you", "reject", "promis", "promis", "return", "by", "http", "will", "reject", "compat", "when", "no", "request", "interceptor", "are", "regist", "no", "promis", "are", "prepend", "chain", "therefor", "thi", "featur", "complet", "backward", "compat", "you", "regist", "not", "interceptor", "everyth", "stay", "same"], "title_sim": [0.3930398941644181], "body_sim": [0.4901491430064569], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.7604455430316073, 0.7604455430316073], "location_sim": [0.5333333333333333, 0.5333333333333333], "pattern": 0, "time": 38}, {"A_title": "fix: Use Date.now() instead of Event.timeStamp to detect animation end", "A_clean_title": ["fix", "use", "date", "now", "instead", "event", "timestamp", "time", "stamp", "detect", "anim", "end"], "B_title": "fix(ngAnimate): do not use event.timeStamp anymore for time tracking", "B_clean_title": ["fix", "nganim", "ng", "anim", "not", "use", "event", "timestamp", "time", "stamp", "anymor", "time", "track"], "A_body": "Chrome and Firefox are planning to change event.timeStamp to be a\nhigh resolution time instead of epoch time. This means that the\nevent.timeStamp will not longer be compatible with Date.now()[1, 2]\n\nInstead we can use Date.now() at the moment when the event is\nreceived by event listener instead.\n\nThis addresses  https://github.com/angular/angular.js/issues/13496\n\n[1] http://crbug.com/538600\n[2] https://bugzilla.mozilla.org/show_bug.cgi?id=1231619#c3\n", "A_clean_body": ["chrome", "firefox", "are", "plan", "chang", "event", "timestamp", "time", "stamp", "high", "resolut", "time", "instead", "epoch", "time", "thi", "mean", "that", "event", "timestamp", "time", "stamp", "will", "not", "longer", "compat", "date", "now", "instead", "we", "use", "date", "now", "at", "moment", "when", "event", "receiv", "by", "event", "listen", "instead", "thi", "address", "http", "github", "com", "angular", "angular", "js", "issu", "13496", "http", "crbug", "com", "538600", "http", "mozilla", "cgi", "bugzilla", "bug", "org", "show", "id=1231619", "c3"], "B_body": "Due to recent changes in Chrome, Firefox and Webkit use of the\nevent.timeStamp value will lead to unpredictable behaviour due to\nprecision changes. Therefore it's best to stick entirely to use\n`Date.now()` when it comes to confirming the end of transition-\nending values. See #13494 for more info.\n\nApplies to 1.2, 1.3, 1.4 and 1.5.\n\nCloses #13494\n", "B_clean_body": ["due", "recent", "chang", "chrome", "firefox", "webkit", "use", "event", "timestamp", "time", "stamp", "valu", "will", "lead", "unpredict", "behaviour", "due", "precis", "chang", "therefor", "it", "'s", "best", "stick", "entir", "use", "date", "now", "when", "it", "come", "confirm", "end", "transit", "end", "valu", "see", "13494", "more", "info", "appli", "close", "13494"], "title_sim": [0.5702676198864595], "body_sim": [0.4785015687266416], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": -1, "time": 0}, {"A_title": "fix(httpBackend): should not read response data when request is aborted", "A_clean_title": ["fix", "httpbackend", "http", "backend", "not", "read", "respons", "data", "when", "request", "abort"], "B_title": "fix($httpBackend): Fix for IE9 AJAX request aborting error.", "B_clean_title": ["fix", "httpbackend", "http", "backend", "fix", "ie9", "ajax", "request", "abort", "error"], "A_body": "When a request is aborted, it makes no sense to read the response headers or text.\nAlso in IE9, trying to read data (either response headers or text) from an aborted request\nthrows an Error c00c023f.\n\nFixes #4913\n", "A_clean_body": ["when", "request", "abort", "it", "make", "no", "sens", "read", "respons", "header", "or", "text", "also", "ie9", "tri", "read", "data", "either", "respons", "header", "or", "text", "abort", "request", "throw", "error", "c00c023f", "fix", "4913"], "B_body": "Aborting AJAX requests in IE9 makes the XHR object's properties inaccessible and throws the following error:\n\n```\nSCRIPT575: Could not complete the operation due to error c00c023f.\n```\n", "B_clean_body": ["abort", "ajax", "request", "ie9", "make", "xhr", "object", "'s", "properti", "inaccess", "throw", "follow", "error", "script575", "could", "not", "complet", "oper", "due", "error", "c00c023f"], "title_sim": [0.4855382989822706], "body_sim": [0.6261606193852216], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.45743806271168735, 0.2696094265185389], "location_sim": [0.6527777777777778, 1.0], "pattern": 1, "time": 25}, {"A_title": "fix(ngAnimate): correctly retain and restore existing styles during and after animation", "A_clean_title": ["fix", "nganim", "ng", "anim", "correctli", "retain", "restor", "exist", "style", "dure", "after", "anim"], "B_title": "fix($animate): Correctly retain the old element styles when applyStyle...", "B_clean_title": ["fix", "anim", "correctli", "retain", "old", "element", "style", "when", "applystyl", "appli", "style"], "A_body": "Closes #4869\n", "A_clean_body": ["close", "4869"], "B_body": "...adds new ones. Fixes #4869\n", "B_clean_body": ["add", "new", "one", "fix", "4869"], "title_sim": [0.7854084993773783], "body_sim": [-0.015361879215017565], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.9672438576853876, 0.9672438576853876], "location_sim": [0.6636771300448431, 0.6636771300448431], "pattern": 1, "time": 11}, {"A_title": "fix(ngAnimate): ensure animations are not attempted on text nodes", "A_clean_title": ["fix", "nganim", "ng", "anim", "ensur", "anim", "are", "not", "attempt", "text", "node"], "B_title": "fix(ngAnimate): Fix text node animation", "B_clean_title": ["fix", "nganim", "ng", "anim", "fix", "text", "node", "anim"], "A_body": "With the large refactor in 1.4.0-rc.0, the detection code failed to\nfilter out text nodes from animating. This fix ensures that now properly\nhappens.\n\nCloses #11703\n", "A_clean_body": ["larg", "refactor", "rc", "detect", "code", "fail", "filter", "out", "text", "node", "anim", "thi", "fix", "ensur", "that", "now", "properli", "happen", "close", "11703"], "B_body": "Change to comment stripping code to return text nodes in addition to element nodes\n\nCloses #11703\n", "B_clean_body": ["chang", "comment", "strip", "code", "return", "text", "node", "addit", "element", "node", "close", "11703"], "title_sim": [0.920204342249064], "body_sim": [0.4300197807117002], "file_list_sim": 0.6, "overlap_files_len": 3, "code_sim": [0.522936994070003, 0.5018089929521209], "location_sim": [0.2760416666666667, 0.3271604938271605], "pattern": 1, "time": 9}, {"A_title": "fix(ngHref): remove attribute when empty value instead of ignoring", "A_clean_title": ["fix", "nghref", "ng", "href", "remov", "attribut", "when", "empti", "valu", "instead", "ignor"], "B_title": "fix(ngHref): allow setting href to empty string", "B_clean_title": ["fix", "nghref", "ng", "href", "allow", "set", "href", "empti", "string"], "A_body": "this will allow updating the values of ng-src, ng-srcset, ng-href back to empty state while preserving the intended behavior of not setting the attribute to an empty string to prevent behavior like trying to download the current page as an image or creating a link to the current page.\n\nFixes https://github.com/angular/angular.js/issues/2755\n", "A_clean_body": ["thi", "will", "allow", "updat", "valu", "ng", "src", "ng", "srcset", "ng", "href", "back", "empti", "state", "while", "preserv", "intend", "behavior", "not", "set", "attribut", "empti", "string", "prevent", "behavior", "like", "tri", "download", "current", "page", "as", "imag", "or", "creat", "link", "current", "page", "fix", "http", "github", "com", "angular", "angular", "js", "issu", "2755"], "B_body": "Fixed issue 2755:\nhttps://github.com/angular/angular.js/issues/2755\n\nngHref should now allow empty strings, and ngSrc will not accept empty strings as intended: https://github.com/angular/angular.js/commit/b6e4a71166c7f00f4140fd7ea8f0cd81b4487a3f\n", "B_clean_body": ["fix", "issu", "2755", "http", "github", "com", "angular", "angular", "js", "issu", "2755", "nghref", "ng", "href", "now", "allow", "empti", "string", "ngsrc", "ng", "src", "will", "not", "accept", "empti", "string", "as", "intend", "http", "github", "com", "angular", "angular", "js", "commit", "b6e4a71166c7f00f4140fd7ea8f0cd81b4487a3f"], "title_sim": [0.7964597479691917], "body_sim": [0.711064313647978], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.7778088269136301, 0.7745285974878612], "location_sim": [0.6833333333333333, 1.0], "pattern": 1, "time": 0}, {"A_title": "feat(filterFilter): support deeply nested predicate objects", "A_clean_title": ["feat", "filterfilt", "filter", "filter", "support", "deepli", "nest", "predic", "object"], "B_title": "fix (filterFilter): ", "B_clean_title": ["fix", "filterfilt", "filter", "filter"], "A_body": "Due to 339a165, it became impossible to filter nested properties of an object\nusing the filterFilter. A proposed solution to this was to enable the use of\nnested predicate objects. This fix enables the use of these nested predicate\nobjects.\n\nExample:\n\n``` html\n<div ng-repeat=\"it in items | filter:{ address: { country: 'Canuckistan'}}\"></div>\n```\n\nOr\n\n``` js\n$filter('filter')(items, { address: { country: 'Canuckistan' } });\n```\n\nRelated to #6009\n", "A_clean_body": ["due", "339a165", "it", "becam", "imposs", "filter", "nest", "properti", "object", "filterfilt", "filter", "filter", "propos", "solut", "thi", "wa", "enabl", "use", "nest", "predic", "object", "thi", "fix", "enabl", "use", "these", "nest", "predic", "object", "exampl", "html", "div", "ng", "repeat=", "it", "item", "filter", "address", "countri", "'canuckistan", "div", "or", "js", "filter", "'filter", "item", "address", "countri", "'canuckistan", "relat", "6009"], "B_body": "allow both dotted predicate object fields, and nested predicate objects in filters.\n", "B_clean_body": ["allow", "both", "dot", "predic", "object", "field", "nest", "predic", "object", "filter"], "title_sim": [0.1555690206520065], "body_sim": [0.461133041859939], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.2719247367469697, 0.3011525417902559], "location_sim": [0.47560975609756095, 0.5735294117647058], "pattern": 0, "time": 7}, {"A_title": "docs(tutorial): Fixing a typo in step_07.ngdoc", "A_clean_title": ["doc", "tutori", "fix", "typo", "ngdoc", "step", "07"], "B_title": "docs (tutorial/step_07): Correcting a type-o", "B_clean_title": ["doc", "07", "tutori", "step", "correct", "type"], "A_body": "s/rpobbaly/probably/g\n", "A_clean_body": ["rpobbali", "probabl"], "B_body": "Changing the spelling of probably.\n", "B_clean_body": ["chang", "spell", "probabl"], "title_sim": [0.9700769293234177], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 5}, {"A_title": "Fixed step12 correct file reference", "A_clean_title": ["fix", "step12", "correct", "file", "refer"], "B_title": "Changed from phone-list.html to index.html", "B_clean_title": ["chang", "phone", "list", "html", "index", "html"], "A_body": "", "A_clean_body": [], "B_body": "Changed from app/partials/phone-list.html to app/index.html at Animating ngView with CSS Keyframe Animations title.\n", "B_clean_body": ["chang", "app", "partial", "phone", "list", "html", "html", "app", "index", "at", "anim", "ngview", "ng", "view", "css", "keyfram", "anim", "titl"], "title_sim": [-0.00430698586645879], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 2}, {"A_title": "fix(*): deleted unused file", "A_clean_title": ["fix", "delet", "unus", "file"], "B_title": "chore(*): remove accidentally created file", "B_clean_title": ["chore", "remov", "accident", "creat", "file"], "A_body": "", "A_clean_body": [], "B_body": "This removes a file which most likely was added unintentionally.\n", "B_clean_body": ["thi", "remov", "file", "which", "most", "like", "wa", "ad", "unintent"], "title_sim": [0.43781533906247866], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "fix(input): Allow ng-true-value and ng-required on a checkbox", "A_clean_title": ["fix", "input", "allow", "ng", "true", "valu", "ng", "requir", "checkbox"], "B_title": "fix(input): ng-required conflicts with ng-true-value", "B_clean_title": ["fix", "input", "ng", "requir", "conflict", "ng", "true", "valu"], "A_body": "Put the input[checkbox] formatter and parser first in the `$formatters` and `$parsers` queue so they are the first being called when formatting and the last when parsing. This allows the existing logic at `ng-required` (that uses `$isEmpty`) to work on the `ng-true-value` value\n\nCloses #6875\n", "A_clean_body": ["put", "input", "checkbox", "formatt", "parser", "first", "formatt", "parser", "queue", "so", "they", "are", "first", "be", "call", "when", "format", "last", "when", "pars", "thi", "allow", "exist", "logic", "at", "ng", "requir", "that", "use", "isempti", "empti", "work", "ng", "true", "valu", "valu", "close", "6875"], "B_body": "Before this change, overridden \"isEmpty\" method which is called in \"requiredDirective\" would return a wrong result when the parameter is given as \"true\". This change corrects the statement value within method.\n\nCloses #5164\n", "B_clean_body": ["befor", "thi", "chang", "overridden", "isempti", "empti", "method", "which", "call", "requireddirect", "requir", "direct", "would", "return", "wrong", "result", "when", "paramet", "given", "as", "true", "thi", "chang", "correct", "statement", "valu", "within", "method", "close", "5164"], "title_sim": [0.7420354767933149], "body_sim": [0.5311534218165803], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.8819993628529311, 0.8819993628529311], "location_sim": [0.0, 0.0], "pattern": -1, "time": 55}, {"A_title": "Update tutorial docs to use Karma instead of Testacular.", "A_clean_title": ["updat", "tutori", "doc", "use", "karma", "instead", "testacular"], "B_title": "Update index.ngdoc, testacular renamed to karma", "B_clean_title": ["updat", "index", "ngdoc", "testacular", "renam", "karma"], "A_body": "Replaced instances of 'Testacular' with 'Karma' to reflect name change of test runner.\nReplaced instances of 'testacular' with 'karma' to reflect name change of test runner.\n\nReplaced instances of 'http://vojtajina.github.com/testacular' with 'http://karma-runner.github.io/' to reflect dedicated page for Karma Test Runner.\n\nAdded location of config file needed to start the Karma server in step 2. This is still labeled 'testacular.conf.js' and needs file name to be updated in the phone example repo.\n", "A_clean_body": ["replac", "instanc", "'testacular", "'karma", "reflect", "name", "chang", "test", "runner", "replac", "instanc", "'testacular", "'karma", "reflect", "name", "chang", "test", "runner", "replac", "instanc", "'http", "github", "vojtajina", "com", "testacular", "'http", "karma", "runner", "github", "io", "reflect", "dedic", "page", "karma", "test", "runner", "ad", "locat", "config", "file", "need", "start", "karma", "server", "step", "thi", "still", "label", "'testacular", "conf", "js", "need", "file", "name", "updat", "phone", "exampl", "repo"], "B_body": "Testacular is deprecated, just updating the doc here for you all\n", "B_clean_body": ["testacular", "deprec", "just", "updat", "doc", "here", "you", "all"], "title_sim": [0.09562881787167898], "body_sim": [0.13112171005749368], "file_list_sim": 0.1, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.34782608695652173, 1.0], "pattern": 0, "time": 3}, {"A_title": "doc(directives): fix error: controller used instead of directive", "A_clean_title": ["doc", "direct", "fix", "error", "control", "use", "instead", "direct"], "B_title": "Fixed typo: controller -> directive", "B_clean_title": ["fix", "typo", "control", "direct"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.7687576307264028], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 2}, {"A_title": "fix($compile): Major Memory Leak in Directive '&' attribute", "A_clean_title": ["fix", "compil", "major", "memori", "leak", "direct", "attribut"], "B_title": "fix($compile): fix memory leak", "B_clean_title": ["fix", "compil", "fix", "memori", "leak"], "A_body": "Request Type: bug\n\nHow to reproduce: http://plnkr.co/edit/TW2TjC8JkxlDyQRCLcRg\nStart on Home, click link for Leak directive, click link for Home page.\nIn chrome timeline force garbage collection.\nTake heap snapshot. Despite being entirely gone from the page and no external references, directive is not GC'ed and because it contains a reference to it's parent, the parent is not collected either.\n\nComponent(s): $compile\n\nImpact: large\n\nComplexity: small\n\nThis issue is related to: a memory leak\n\n**Detailed Description:**\n\nWhen a directive is written using '&' reverse one way binding there is a major memory leak. \nwhen & attribute removed, leak is gone.\n\n**Other Comments:**\n\nFor functions that have a '&' binding on the scope, change the function\nfrom an inline definition to an external definition so the function\nclosure has no access to the parent scope.\nBackport of fix on 1.3.x\n\nCloses #6794\n", "A_clean_body": ["request", "type", "bug", "how", "reproduc", "http", "plnkr", "co", "edit", "tw2tjc8jkxldyqrclcrg", "tw2tj", "c8jkxl", "dy", "qrc", "lc", "rg", "start", "home", "click", "link", "leak", "direct", "click", "link", "home", "page", "chrome", "timelin", "forc", "garbag", "collect", "take", "heap", "snapshot", "despit", "be", "entir", "gone", "page", "no", "extern", "refer", "direct", "not", "gc'ed", "becaus", "it", "contain", "refer", "it", "'s", "parent", "parent", "not", "collect", "either", "compon", "compil", "impact", "larg", "complex", "small", "thi", "issu", "relat", "memori", "leak", "**detail", "descript", "when", "direct", "written", "revers", "one", "way", "bind", "there", "major", "memori", "leak", "when", "attribut", "remov", "leak", "gone", "**other", "comment", "function", "that", "have", "bind", "scope", "chang", "function", "inlin", "definit", "extern", "definit", "so", "function", "closur", "ha", "no", "access", "parent", "scope", "backport", "fix", "close", "6794"], "B_body": "For functions that have a '&' binding on the scope, change the function from an inline definition to an external definition so the function closure has no access to the parent scope.\n\nCloses #6794\n\nNote: I am not sure this if this is a Chrome GC bug (as the function never uses the parent scope), but for the scenario from the issue, the patch fixes the leak\n", "B_clean_body": ["function", "that", "have", "bind", "scope", "chang", "function", "inlin", "definit", "extern", "definit", "so", "function", "closur", "ha", "no", "access", "parent", "scope", "close", "6794", "note", "am", "not", "sure", "thi", "thi", "chrome", "gc", "bug", "as", "function", "never", "use", "parent", "scope", "but", "scenario", "issu", "patch", "fix", "leak"], "title_sim": [0.7111167190107373], "body_sim": [0.6783495256638731], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.8492369191942158, 0.8492369191942158], "location_sim": [1.0, 1.0], "pattern": 1, "time": 0}, {"A_title": "Update ngIf.js", "A_clean_title": ["updat", "ngif", "js", "ng"], "B_title": "docs(directive): fixed a minor typo", "B_clean_title": ["doc", "direct", "fix", "minor", "typo"], "A_body": "Typo correction for eleent to element\n", "A_clean_body": ["typo", "correct", "eleent", "element"], "B_body": "Fixed a minor typo:\n- eleent => element\n", "B_clean_body": ["fix", "minor", "typo", "eleent", "element"], "title_sim": [0.22548346931548852], "body_sim": [0.6130009034687506], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 6}, {"A_title": "fix($http): continue promise chain with HttpPromise", "A_clean_title": ["fix", "http", "continu", "promis", "chain", "httppromis", "http", "promis"], "B_title": "fix($http): promise chain for helper methods", "B_clean_title": ["fix", "http", "promis", "chain", "helper", "method"], "A_body": "`.success` and `.error` methods will now continue the promise chain.\nReturning a promise in either of these callbacks will be appropriately\nhandled by the chain.\n\nCloses #11972\n", "A_clean_body": ["success", "error", "method", "will", "now", "continu", "promis", "chain", "return", "promis", "either", "these", "callback", "will", "appropri", "handl", "by", "chain", "close", "11972"], "B_body": "can has less promise chain breaking\n\n``` javascript\nangular.module('app', [])\n.factory('Auth', function($http) {\n  return {\n    login: function(data) {\n      return $http.post('/signup', data)\n        .success(function(data) {\n          return data;\n        })\n        .error(function(err) {\n          return $q.reject(err);\n        });\n    } // end login\n  }; // end module\n}) // end factory\n.controller('MainCtrl', function($scope, $state, Auth) {\n\n  $scope.login = function(user) {\n    Auth.login(user).then(function(data) {\n      $state.go('dashboard');\n    })\n    .catch(function(err) {\n      alert(err);\n    });\n  }; // end login\n}); // end ctrl\n```\n\nsince the promise chain is broken when using `Auth.login().then(otherStuff).catch(errorStuff)` you get the result from the http and not the error from `.error`.\n", "B_clean_body": ["ha", "less", "promis", "chain", "break", "javascript", "angular", "modul", "'app", "factori", "'auth", "function", "http", "return", "login", "function", "data", "return", "http", "post", "signup", "data", "success", "function", "data", "return", "data", "error", "function", "err", "return", "reject", "err", "end", "login", "end", "modul", "end", "factori", "control", "'mainctrl", "'main", "ctrl", "function", "scope", "state", "auth", "scope", "login", "function", "user", "auth", "login", "user", "then", "function", "data", "state", "go", "'dashboard", "catch", "function", "err", "alert", "err", "end", "login", "end", "ctrl", "sinc", "promis", "chain", "broken", "when", "auth", "login", "then", "otherstuff", "other", "stuff", "catch", "errorstuff", "error", "stuff", "you", "get", "result", "http", "not", "error", "error"], "title_sim": [0.9315463507415058], "body_sim": [0.35126014712606274], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.10510319248119607, 1.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 99}, {"A_title": "refactor(ngAria): remove unused `$parse` from `ngModel` directive", "A_clean_title": ["refactor", "ngaria", "ng", "aria", "remov", "unus", "pars", "ngmodel", "ng", "model", "direct"], "B_title": "refactor(ngAria): remove usused dependency", "B_clean_title": ["refactor", "ngaria", "ng", "aria", "remov", "usus", "depend"], "A_body": "mentioned in https://github.com/angular/angular.js/commit/d06431e5309bb0125588877451dc79b935808134#commitcomment-15871053\n\ncc @gkalpak \n", "A_clean_body": ["mention", "http", "github", "com", "angular", "angular", "js", "commit", "d06431e5309bb0125588877451dc79b935808134", "commitcom", "15871053", "cc", "gkalpak"], "B_body": "(As mentioned in https://github.com/angular/angular.js/commit/d06431e5309bb0125588877451dc79b935808134#commitcomment-15871053.)\n", "B_clean_body": ["as", "mention", "http", "github", "com", "angular", "angular", "js", "commit", "d06431e5309bb0125588877451dc79b935808134", "commitcom", "15871053"], "title_sim": [0.7415688082488129], "body_sim": [0.9668056260892773], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.25, 1.0], "pattern": 1, "time": 0}, {"A_title": "Fix issue with Jquery for ngMobile", "A_clean_title": ["fix", "issu", "jqueri", "ngmobil", "ng", "mobil"], "B_title": "fix(ngMobile): touch event handling fix for when jQuery is present. ", "B_clean_title": ["fix", "ngmobil", "ng", "mobil", "touch", "event", "handl", "fix", "when", "jqueri", "queri", "present"], "A_body": "Issue:\n\nI found that the ngClick directive does not work with touch events dispatched by JQuery.\nJQuery will wrap touch events, and touches can only be found on originalEvent.\nThe touch event handlers in ngClick directive are not using the originalEvent but event instead,\nso the touches these handlers use, are 'undifined'.\n\nAlso, I found browsers are quite sensitive with touch, when I just tap on my touch screen,\nthe browser will dispatch 'touchstart', 'touchmove', and 'touchend'. Since the touch move handler\nalso reset status, I never get my click handler triggered.\n\nFix:\n\nCheck if event has an originalEvent property, and use it instead if it is found.\nAlso I make touch end handler triggers click handler if the distance between touch start and touch end, \nis within MOVE_TOLERANCE.\n", "A_clean_body": ["issu", "found", "that", "ngclick", "ng", "click", "direct", "not", "work", "touch", "event", "dispatch", "by", "jqueri", "queri", "jqueri", "queri", "will", "wrap", "touch", "event", "touch", "onli", "found", "originalev", "origin", "event", "touch", "event", "handler", "ngclick", "ng", "click", "direct", "are", "not", "originalev", "origin", "event", "but", "event", "instead", "so", "touch", "these", "handler", "use", "are", "'undifin", "also", "found", "browser", "are", "quit", "sensit", "touch", "when", "just", "tap", "my", "touch", "screen", "browser", "will", "dispatch", "'touchstart", "'touchmov", "'touchend", "sinc", "touch", "move", "handler", "also", "reset", "statu", "never", "get", "my", "click", "handler", "trigger", "fix", "check", "event", "ha", "originalev", "origin", "event", "properti", "use", "it", "instead", "it", "found", "also", "make", "touch", "end", "handler", "trigger", "click", "handler", "distanc", "between", "touch", "start", "touch", "end", "within", "move", "toler"], "B_body": "originalEvent was not being handled properly.\n", "B_clean_body": ["originalev", "origin", "event", "wa", "not", "be", "handl", "properli"], "title_sim": [0.7412079748053866], "body_sim": [0.549043986824854], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.083937922695537, 0.2321664333465825], "location_sim": [0.6698113207547169, 1.0], "pattern": 0, "time": 48}, {"A_title": "fix($rootScope, ngRepeat): accomodate objects resulting from Object.create(null)", "A_clean_title": ["fix", "rootscop", "root", "scope", "ngrepeat", "ng", "repeat", "accomod", "object", "result", "object", "creat", "null"], "B_title": "fix(rootScope, ngRepeat): add support for objects created with Object.create(null) for ngRepeat and $watchCollection", "B_clean_title": ["fix", "rootscop", "root", "scope", "ngrepeat", "ng", "repeat", "add", "support", "object", "creat", "object", "creat", "null", "ngrepeat", "ng", "repeat", "watchcollect", "watch", "collect"], "A_body": "Use Object.hasOwnProperty.call when iterating over properties of user-supplied objects.\nAllow for objects not inheriting from Object.prototype.\n", "A_clean_body": ["use", "object", "hasownproperti", "call", "ha", "own", "properti", "when", "iter", "over", "properti", "user", "suppli", "object", "allow", "object", "not", "inherit", "object", "prototyp"], "B_body": "Basically, the hasOwnProperty method was being called from an object gotten from the user. When that object was initially created with Object.create(null), it didn't inherit from Object so it didn't have the hasOwnProperty method throwing an \"undefined is not a function\" error. \n\nThis was fixed by executing hasOwnProperty.call(object, key) instead of object.hasOwnProperty(key)\n", "B_clean_body": ["basic", "hasownproperti", "ha", "own", "properti", "method", "wa", "be", "call", "object", "gotten", "user", "when", "that", "object", "wa", "initi", "creat", "object", "creat", "null", "it", "did", "n't", "inherit", "object", "so", "it", "did", "n't", "have", "hasownproperti", "ha", "own", "properti", "method", "throw", "undefin", "not", "function", "error", "thi", "wa", "fix", "by", "execut", "hasownproperti", "call", "ha", "own", "properti", "object", "key", "instead", "object", "hasownproperti", "ha", "own", "properti", "key"], "title_sim": [0.9116436192887676], "body_sim": [0.7497354172926327], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.15229338506355886, 1.0], "location_sim": [0.3783783783783784, 0.6666666666666666], "pattern": 0, "time": 95}, {"A_title": "fix(copy): preserve property descriptors", "A_clean_title": ["fix", "copi", "preserv", "properti", "descriptor"], "B_title": "Copy prototype bug with enumerable properties", "B_clean_title": ["copi", "prototyp", "bug", "enumer", "properti"], "A_body": "Instead of values being simply copied, this change allows to preserve\ndefinitions of own properties. Thus, enumerable (or not), writable (or\nnot), getter/setter, etc. property definitions are preserved across copies. It\nimproves change from b59b04f9 preserving prototype chain.\n\nAs a side effect, it also includes previously ignored non-enumerable properties\nby using `Object.getOwnPropertyNames` to iterate **every** own properties instead\nof `for ... in ...` + `hasOwnProperty`.\n", "A_clean_body": ["instead", "valu", "be", "simpli", "copi", "thi", "chang", "allow", "preserv", "definit", "own", "properti", "thu", "enumer", "or", "not", "writabl", "or", "not", "getter", "setter", "etc", "properti", "definit", "are", "preserv", "across", "copi", "it", "improv", "chang", "b59b04f9", "preserv", "prototyp", "chain", "as", "side", "effect", "it", "also", "includ", "previous", "ignor", "non", "enumer", "properti", "by", "object", "getownpropertynam", "get", "own", "properti", "name", "iter", "**every**", "own", "properti", "instead", "hasownproperti", "ha", "own", "properti"], "B_body": "Per [this thread](https://github.com/angular/angular.js/commit/b59b04f98a0b59eead53f6a53391ce1bbcbe9b57#commitcomment-6844633)\n\nCreating a placeholder for a possible fix which includes associated tests.\n", "B_clean_body": ["per", "thi", "thread", "http", "github", "com", "angular", "angular", "js", "commit", "b59b04f98a0b59eead53f6a53391ce1bbcbe9b57", "commitcom", "6844633", "creat", "placehold", "possibl", "fix", "which", "includ", "associ", "test"], "title_sim": [0.7823622807945279], "body_sim": [0.1115467878538419], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.3915530927572834, 0.3915530927572834], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Removed second 'the' in frase 'references the the name'", "A_clean_title": ["remov", "second", "'the", "frase", "'refer", "name"], "B_title": "Update step_02.ngdoc", "B_clean_title": ["updat", "ngdoc", "step", "02"], "A_body": "", "A_clean_body": [], "B_body": "A simple typo correction, delete duplicate 'the' word.\n", "B_clean_body": ["simpl", "typo", "correct", "delet", "duplic", "'the", "word"], "title_sim": [-0.009420008508286419], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 3}, {"A_title": "Using wrong ctrl name.", "A_clean_title": ["wrong", "ctrl", "name"], "B_title": "docs($anchorScroll) change example controller name to ScrollCtrl and add...", "B_clean_title": ["doc", "anchorscrol", "anchor", "scroll", "chang", "exampl", "control", "name", "scrollctrl", "scroll", "ctrl", "add"], "A_body": "I changed MainCtrl to ScrollCtrl in the example because MainCtrl is not defined anywhere.\n\nhttp://plnkr.co/edit/9EXs1KtFQnjMh1nb32xW?p=preview\n", "A_clean_body": ["chang", "mainctrl", "main", "ctrl", "scrollctrl", "scroll", "ctrl", "exampl", "becaus", "mainctrl", "main", "ctrl", "not", "defin", "anywher", "http", "plnkr", "co", "edit", "9exs1ktfqnjmh1nb32xw", "9e", "xs1kt", "qnj", "mh1nb32x", "p=preview"], "B_body": "... styling\n\nChanged controller name in example html to ScrollCtrl to match name in example js.\n\nAdd styling to example html so scrollable area is not obtrusive to documentation page design.\n", "B_clean_body": ["style", "chang", "control", "name", "exampl", "html", "scrollctrl", "scroll", "ctrl", "match", "name", "exampl", "js", "add", "style", "exampl", "html", "so", "scrollabl", "area", "not", "obtrus", "document", "page", "design"], "title_sim": [0.4428959679120931], "body_sim": [0.13953209160307], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.56, 0.56], "pattern": 0, "time": 30}, {"A_title": "Ability to configure the encoding/decoding data for $resource", "A_clean_title": ["abil", "configur", "encod", "decod", "data", "resourc"], "B_title": "Extended customizability of $resource", "B_clean_title": ["extend", "customiz", "resourc"], "A_body": "Right now it seems like the $resource module excepts the data from the REST API call to be returned the content of the response however sometimes it might not be formatted that way.  What I have done is instead of getting the data from the responce.data automatically, it is now a configurable function that defaults to the current process.\n\nThere is now a 4th optional parameter for $resource() that is the function used to parse for the data of the response so that if the REST API you are working with has the data formatted slightly (or completely) different than excepted, it is very easy to still use the $resource module.\n\nAn example of a REST API that has a different response the what $resource right now except for be the Jira REST API.\n\nI have already submitted the electronic CLA.\n", "A_clean_body": ["right", "now", "it", "seem", "like", "resourc", "modul", "except", "data", "rest", "api", "call", "return", "content", "respons", "howev", "sometim", "it", "might", "not", "format", "that", "way", "what", "have", "done", "instead", "get", "data", "responc", "data", "automat", "it", "now", "configur", "function", "that", "default", "current", "process", "there", "now", "4th", "option", "paramet", "resourc", "that", "function", "use", "pars", "data", "respons", "so", "that", "rest", "api", "you", "are", "work", "ha", "data", "format", "slightli", "or", "complet", "differ", "than", "except", "it", "veri", "easi", "still", "use", "resourc", "modul", "exampl", "rest", "api", "that", "ha", "differ", "respons", "what", "resourc", "right", "now", "except", "jira", "rest", "api", "have", "alreadi", "submit", "electron", "cla"], "B_body": "Added an option to $resource's `action` parameters.  The user can define a custom httpConfig and a custom parseResponse function.  These allow the user to work with a lot more systems (sending custom headers through action.httpConfig and parsing weird responses with parseResponse).\n\nExample use case.  these additions let me use www.parse.com and $resource together easily.\n\n``` javascript\nvar myHttpConfig = { headers: myHeaders }; //Our pre-defined custom headers to use parse.com\nvar ParseResource = $resource('https://api.parse.com/1/classes/:class/:id', {\n  class: '@class',\n  id: '@id',\n}, {\n  get: { method: 'GET', httpConfig: myHttpConfig },\n  create: { method: 'POST', httpConfig: myHttpConfig },\n  save: { method: 'PUT', httpConfig: myHttpConfig },\n  query: { \n    httpConfig: myHttpConfig,\n    isArray: true,\n    // Parse.com's response from a query is stored in response.data.result,\n    // a parseResponse function allows us to use this\n    parseResponse: function(response) {\n      return response.data.result;\n    }\n  }, \n  remove: { method: 'DELETE', httpConfig: myHttpConfig }\n});\n```\n\nI don't know if action.httpConfig and action.parseResponse are the best names, but I think the idea of adding these two simple things adds a lot more flexibility to $resource.\n", "B_clean_body": ["ad", "option", "resourc", "'s", "action", "paramet", "user", "defin", "custom", "httpconfig", "http", "config", "custom", "parserespons", "pars", "respons", "function", "these", "allow", "user", "work", "lot", "more", "system", "send", "custom", "header", "through", "action", "httpconfig", "http", "config", "pars", "weird", "respons", "parserespons", "pars", "respons", "exampl", "use", "case", "these", "addit", "let", "me", "use", "www", "pars", "com", "resourc", "togeth", "easili", "javascript", "var", "myhttpconfig", "my", "http", "config", "header", "myhead", "my", "header", "our", "pre", "defin", "custom", "header", "use", "pars", "com", "var", "parseresourc", "pars", "resourc", "resourc", "'http", "pars", "api", "com", "class", "class", "id", "class", "class", "id", "id", "get", "method", "'get", "httpconfig", "http", "config", "myhttpconfig", "my", "http", "config", "creat", "method", "'post", "httpconfig", "http", "config", "myhttpconfig", "my", "http", "config", "save", "method", "'put", "httpconfig", "http", "config", "myhttpconfig", "my", "http", "config", "queri", "httpconfig", "http", "config", "myhttpconfig", "my", "http", "config", "isarray", "array", "true", "pars", "com", "'s", "respons", "queri", "store", "respons", "data", "result", "parserespons", "pars", "respons", "function", "allow", "us", "use", "thi", "parserespons", "pars", "respons", "function", "respons", "return", "respons", "data", "result", "remov", "method", "'delet", "httpconfig", "http", "config", "myhttpconfig", "my", "http", "config", "n't", "know", "action", "httpconfig", "http", "config", "action", "parserespons", "pars", "respons", "are", "best", "name", "but", "think", "idea", "ad", "these", "two", "simpl", "thing", "add", "lot", "more", "flexibl", "resourc"], "title_sim": [0.44427842760383274], "body_sim": [0.36620675627775173], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.44929229526691794, 0.44929229526691794], "location_sim": [0.0, 0.0], "pattern": 0, "time": 140}, {"A_title": "chore(sanitize): new implementation of the html sanitized parser", "A_clean_title": ["chore", "sanit", "new", "implement", "html", "sanit", "parser"], "B_title": "fix(ngSanitize): use the smallest match on searching end tags", "B_clean_title": ["fix", "ngsanit", "ng", "sanit", "use", "smallest", "match", "search", "end", "tag"], "A_body": "This implementation is based on inert document\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/angular/angular.js/11790)\n\n<!-- Reviewable:end -->\n", "A_clean_body": ["thi", "implement", "base", "inert", "document", "review", "start", "img", "src=", "http", "png", "review", "button", "io", "review", "height=40", "alt=", "review", "review", "http", "review", "io", "review", "angular", "angular", "js", "11790", "review", "end"], "B_body": "ngSanitize searches the string of the end tag with the longest match.\nSo it removes all of the HTML strings between script elements.\nWe should use the smallest possible match.\n\nCloses #11442\n", "B_clean_body": ["ngsanit", "ng", "sanit", "search", "string", "end", "tag", "longest", "match", "so", "it", "remov", "all", "html", "string", "between", "script", "element", "we", "use", "smallest", "possibl", "match", "close", "11442"], "title_sim": [0.5112763741554912], "body_sim": [0.11320043560324891], "file_list_sim": 0.4, "overlap_files_len": 2, "code_sim": [0.00537247590098015, 0.03961961144695724], "location_sim": [0.0, 0.0], "pattern": 0, "time": 35}, {"A_title": "fix(jqLite): fix event.stopImmediatePropagation() so it works as expected", "A_clean_title": ["fix", "jqlite", "jq", "lite", "fix", "event", "stopimmediatepropag", "stop", "immedi", "propag", "so", "it", "work", "as", "expect"], "B_title": "feat(rootScope): stopImmediatePropagation method", "B_clean_title": ["feat", "rootscop", "root", "scope", "stopimmediatepropag", "stop", "immedi", "propag", "method"], "A_body": "jqLite doesn't override the default implementation of `event.stopImmediatePropagation` and so it doesn't work as expected, i.e, it doesn't prevent the rest of the event handlers from being executed. I've fixed that for events handled with `on` and triggered by `triggerHandler`.\n\nFor the sake of consistency with jQuery, I've also added an `isImmediatePropagationStopped` function to the event object so one can tell whether the immediate propagation was stopped or not.\n\nLastly, this implementation won't immediate stop propagation to event handlers created with `element.addEventListener`. I could have easily solved that by making `stopImmediatePropagation` call its native counterpart, but that would render it incompatible with jQuery's implementation. In order to comply with jQuery, I would have to add an `originalEvent` property to the event object so one could call `originalEvent.stopImmediatePropagation()`, but I've found it hard to correctly implement without making the code overly complex.\n", "A_clean_body": ["jqlite", "jq", "lite", "n't", "overrid", "default", "implement", "event", "stopimmediatepropag", "stop", "immedi", "propag", "so", "it", "n't", "work", "as", "expect", "it", "n't", "prevent", "rest", "event", "handler", "be", "execut", "'ve", "fix", "that", "event", "handl", "trigger", "by", "triggerhandl", "trigger", "handler", "sake", "consist", "jqueri", "queri", "'ve", "also", "ad", "isimmediatepropagationstop", "immedi", "propag", "stop", "function", "event", "object", "so", "one", "tell", "whether", "immedi", "propag", "wa", "stop", "or", "not", "lastli", "thi", "implement", "wo", "n't", "immedi", "stop", "propag", "event", "handler", "creat", "element", "addeventlisten", "add", "event", "listen", "could", "have", "easili", "solv", "that", "by", "make", "stopimmediatepropag", "stop", "immedi", "propag", "call", "it", "nativ", "counterpart", "but", "that", "would", "render", "it", "incompat", "jqueri", "queri", "'s", "implement", "order", "compli", "jqueri", "queri", "would", "have", "add", "originalev", "origin", "event", "properti", "event", "object", "so", "one", "could", "call", "originalev", "stopimmediatepropag", "origin", "event", "stop", "immedi", "propag", "but", "'ve", "found", "it", "hard", "correctli", "implement", "without", "make", "code", "overli", "complex"], "B_body": "Adding stopImmediatePropagation method to allow stopping of all immediate listeners on the scope. This is similar in behavior to jQuery's stopImmediatePropagation. Decision to put it together came out of this thread - https://github.com/angular/angular.js/issues/3564#issuecomment-23607481. Issue #3564\n", "B_clean_body": ["ad", "stopimmediatepropag", "stop", "immedi", "propag", "method", "allow", "stop", "all", "immedi", "listen", "scope", "thi", "similar", "behavior", "jqueri", "queri", "'s", "stopimmediatepropag", "stop", "immedi", "propag", "decis", "put", "it", "togeth", "came", "out", "thi", "thread", "http", "github", "com", "angular", "angular", "js", "issu", "3564", "issuecom", "23607481", "issu", "3564"], "title_sim": [0.4404236779054373], "body_sim": [0.7065289776413419], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.30411671699969645, 7.295622976772986e-05], "location_sim": [0.0, 0.0], "pattern": 0, "time": 30}, {"A_title": "angular.forEach passes object being iterated over as 3rd arg to callback", "A_clean_title": ["angular", "foreach", "each", "pass", "object", "be", "iter", "over", "as", "3rd", "arg", "callback"], "B_title": "fix(forEach): add the array/object as the 3rd param like the native forEach", "B_clean_title": ["fix", "foreach", "each", "add", "array", "object", "as", "3rd", "param", "like", "nativ", "foreach", "each"], "A_body": "This is for consistency with native Array.prototype.forEach() API, and it is also sometimes useful!\n", "A_clean_body": ["thi", "consist", "nativ", "array", "prototyp", "foreach", "each", "api", "it", "also", "sometim", "use"], "B_body": "This makes all the different object types supported by `angular.forEach` more like the native `Array.forEach` by adding the 3rd argument to the callback. Also adding tests to make sure all the different object types invoke the iterator with all 3 arguments and the context.\n", "B_clean_body": ["thi", "make", "all", "differ", "object", "type", "support", "by", "angular", "foreach", "each", "more", "like", "nativ", "array", "foreach", "each", "by", "ad", "3rd", "argument", "callback", "also", "ad", "test", "make", "sure", "all", "differ", "object", "type", "invok", "iter", "all", "argument", "context"], "title_sim": [0.7825213745606016], "body_sim": [0.664645531004314], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.25229348500457077, 0.25229348500457077], "location_sim": [1.0, 1.0], "pattern": 0, "time": 19}, {"A_title": "Update index.ngdoc, testacular renamed to karma", "A_clean_title": ["updat", "index", "ngdoc", "testacular", "renam", "karma"], "B_title": "'Testacular' renamed the project to 'Karma'", "B_clean_title": ["'testacular", "renam", "project", "'karma"], "A_body": "Testacular is deprecated, just updating the doc here for you all\n", "A_clean_body": ["testacular", "deprec", "just", "updat", "doc", "here", "you", "all"], "B_body": "Updated Testacular links to Karma\n", "B_clean_body": ["updat", "testacular", "link", "karma"], "title_sim": [0.01951613491068043], "body_sim": [0.46457088221540377], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 20}, {"A_title": "feat(expressions): allow non-English Unicode letters in identifiers", "A_clean_title": ["feat", "express", "allow", "non", "english", "unicod", "letter", "identifi"], "B_title": "feat($parse): support unicode identifier names", "B_clean_title": ["feat", "pars", "support", "unicod", "identifi", "name"], "A_body": "Allow most of the non-English Unicode letters in identifiers inside AngularJS expressions. Please see #2174 for the discussion.\n\nCloses #2174\n", "A_clean_body": ["allow", "most", "non", "english", "unicod", "letter", "identifi", "insid", "angularj", "angular", "js", "express", "pleas", "see", "2174", "discuss", "close", "2174"], "B_body": "Support unicode identifier names as defined in Section 7.6 Identifier Names\nand Identifiers, ECMAScript Language Specification\n(http://www.ecma-international.org/ecma-262/5.1/#sec-7.6),\nexcept for unicode escape sequences which is hard to implement\nwithout changing too much existing code.\n\nCloses #3847\n", "B_clean_body": ["support", "unicod", "identifi", "name", "as", "defin", "section", "identifi", "name", "identifi", "ecmascript", "ecma", "script", "languag", "specif", "http", "ecma", "intern", "www", "org", "ecma", "262", "sec", "except", "unicod", "escap", "sequenc", "which", "hard", "implement", "without", "chang", "too", "much", "exist", "code", "close", "3847"], "title_sim": [0.3670056105910888], "body_sim": [0.3899018689710463], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.213255559909583, 0.213255559909583], "location_sim": [0.7020408163265306, 0.7020408163265306], "pattern": -1, "time": 34}, {"A_title": "Update example to have proper ctrl", "A_clean_title": ["updat", "exampl", "have", "proper", "ctrl"], "B_title": "docs($anchorScroll) change example controller name to ScrollCtrl and add...", "B_clean_title": ["doc", "anchorscrol", "anchor", "scroll", "chang", "exampl", "control", "name", "scrollctrl", "scroll", "ctrl", "add"], "A_body": "Currently the html includes MainCtrl but the js defines ScrollCtrl. I updated the example so they match.\n", "A_clean_body": ["current", "html", "includ", "mainctrl", "main", "ctrl", "but", "js", "defin", "scrollctrl", "scroll", "ctrl", "updat", "exampl", "so", "they", "match"], "B_body": "... styling\n\nChanged controller name in example html to ScrollCtrl to match name in example js.\n\nAdd styling to example html so scrollable area is not obtrusive to documentation page design.\n", "B_clean_body": ["style", "chang", "control", "name", "exampl", "html", "scrollctrl", "scroll", "ctrl", "match", "name", "exampl", "js", "add", "style", "exampl", "html", "so", "scrollabl", "area", "not", "obtrus", "document", "page", "design"], "title_sim": [0.12384779617619628], "body_sim": [0.3903564975404125], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.56, 0.56], "pattern": 0, "time": 4}, {"A_title": "fix(input): make maxlength and minlength work with non-string values", "A_clean_title": ["fix", "input", "make", "maxlength", "minlength", "work", "non", "string", "valu"], "B_title": "fix(input): validate minlength/maxlength for non-string values", "B_clean_title": ["fix", "input", "valid", "minlength", "maxlength", "non", "string", "valu"], "A_body": "Request Type: bug\n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n**Other Comments:**\n\nValidity for inputs with maxlength attribute and an underlying non-string model value is always false: e.g. the length property for a numeric data type returns undefined\n", "A_clean_body": ["request", "type", "bug", "how", "reproduc", "compon", "misc", "core", "impact", "small", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "**other", "comment", "valid", "input", "maxlength", "attribut", "underli", "non", "string", "model", "valu", "alway", "fals", "length", "properti", "numer", "data", "type", "return", "undefin"], "B_body": "Use viewValue for minlength/maxlength validation if model value is not a\nstring. This allows ngMinlength and ngMaxlength to be used for number inputs.\n\nCloses #7967\n", "B_clean_body": ["use", "viewvalu", "view", "valu", "minlength", "maxlength", "valid", "model", "valu", "not", "string", "thi", "allow", "ngminlength", "ng", "minlength", "ngmaxlength", "ng", "maxlength", "use", "number", "input", "close", "7967"], "title_sim": [0.801783019612894], "body_sim": [0.34311904951183825], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.20328758165298177, 0.4373867364455235], "location_sim": [0.0, 0.0], "pattern": 0, "time": 21}, {"A_title": "docs(guide/directive): fix a typo", "A_clean_title": ["doc", "guid", "direct", "fix", "typo"], "B_title": "Fixed typo: controller -> directive", "B_clean_title": ["fix", "typo", "control", "direct"], "A_body": "use module.directive to register a directive (instead of controller).\n", "A_clean_body": ["use", "modul", "direct", "regist", "direct", "instead", "control"], "B_body": "", "B_clean_body": [], "title_sim": [0.6741019645145093], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 1}, {"A_title": "Remove some content about IE8 and earlier in IE guide doc", "A_clean_title": ["remov", "some", "content", "about", "ie8", "earlier", "ie", "guid", "doc"], "B_title": "docs(ie): no fixes needed for IE9, but still relevant", "B_clean_title": ["doc", "ie", "no", "fix", "need", "ie9", "but", "still", "relev"], "A_body": "Remove some content about IE8 and earlier in IE guide doc\n", "A_clean_body": ["remov", "some", "content", "about", "ie8", "earlier", "ie", "guid", "doc"], "B_body": "Closes #10316\n\nNone of the mentioned fixes are needed anymore, but information on where Angular stands, regarding IE, is still relevant.\n", "B_clean_body": ["close", "10316", "none", "mention", "fix", "are", "need", "anymor", "but", "inform", "where", "angular", "stand", "regard", "ie", "still", "relev"], "title_sim": [0.42494729172972706], "body_sim": [0.37413617254125653], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.4423076923076923, 0.4423076923076923], "pattern": 0, "time": 0}, {"A_title": "doc(directive): Directive instead of controller", "A_clean_title": ["doc", "direct", "direct", "instead", "control"], "B_title": "Fixed typo: controller -> directive", "B_clean_title": ["fix", "typo", "control", "direct"], "A_body": "Fix mistakenly referenced controller in the sentence\n", "A_clean_body": ["fix", "mistakenli", "referenc", "control", "sentenc"], "B_body": "", "B_clean_body": [], "title_sim": [0.8207428913258622], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 2}, {"A_title": "fix(angular.encodeUriSegment): do not encode semi-colon", "A_clean_title": ["fix", "angular", "encodeuriseg", "encod", "uri", "segment", "not", "encod", "semi", "colon"], "B_title": "encode uri: Matrix urls, semicolons fix 4065", "B_clean_title": ["encod", "uri", "matrix", "url", "semicolon", "fix", "4065"], "A_body": "RFC 3986 indicates that ; is not encoded as part of the URI, as is the case\nwith other members of sub-delim. Changed encodeUriSegment to match that\nbehaviour, along with the corresponding spec.\n\nThis was causing a practical issue with Java servers that append `;jsessionid=...` to the path. The `;` was encoded, leading to the following error in PhantomJS as it continually saw the current URL as different to the `$location.absUrl()` which had been encoded:\n\n```\nError: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: [[\"fn: $locationWatch; newVal: 7; oldVal: 6\"],[\"fn: $locationWatch; newVal: 8; oldVal: 7\"],[\"fn: $locationWatch; newVal: 9; oldVal: 8\"],[\"fn: $locationWatch; newVal: 10; oldVal: 9\"],[\"fn: $locationWatch; newVal: 11; oldVal: 10\"]]\n```\n\nI note that the specs previously called out `;` specifically for being encoded, which was introduced in 9e30baad3feafc82fb2f2011fd3f21909f4ba29e, and that it has been in place for some time. Is there a reason this might have been needed that I've missed?\n\nI also note that the same code is in `ngResource`, but I'm unfamiliar with the codebase and what impact it would have to change that as well. Should the code in there be updated as well?\n", "A_clean_body": ["rfc", "3986", "indic", "that", "not", "encod", "as", "part", "uri", "as", "case", "other", "member", "sub", "delim", "chang", "encodeuriseg", "encod", "uri", "segment", "match", "that", "behaviour", "along", "correspond", "spec", "thi", "wa", "caus", "practic", "issu", "java", "server", "that", "append", "jsessionid=", "path", "wa", "encod", "lead", "follow", "error", "phantomj", "phantom", "js", "as", "it", "continu", "saw", "current", "url", "as", "differ", "locat", "absurl", "ab", "url", "which", "had", "been", "encod", "error", "rootscop", "root", "scope", "infdig", "10", "digest", "iter", "reach", "abort", "watcher", "fire", "last", "iter", "fn", "locationwatch", "locat", "watch", "newval", "new", "val", "oldval", "old", "val", "fn", "locationwatch", "locat", "watch", "newval", "new", "val", "oldval", "old", "val", "fn", "locationwatch", "locat", "watch", "newval", "new", "val", "oldval", "old", "val", "fn", "locationwatch", "locat", "watch", "newval", "new", "val", "10", "oldval", "old", "val", "fn", "locationwatch", "locat", "watch", "newval", "new", "val", "11", "oldval", "old", "val", "10", "note", "that", "spec", "previous", "call", "out", "specif", "be", "encod", "which", "wa", "introduc", "9e30baad3feafc82fb2f2011fd3f21909f4ba29", "that", "it", "ha", "been", "place", "some", "time", "there", "reason", "thi", "might", "have", "been", "need", "that", "'ve", "miss", "also", "note", "that", "same", "code", "ngresourc", "ng", "resourc", "but", "'m", "unfamiliar", "codebas", "what", "impact", "it", "would", "have", "chang", "that", "as", "well", "code", "there", "updat", "as", "well"], "B_body": "Solved issue 4065, Support for Matrix URIs\nhttps://github.com/angular/angular.js/issues/4065\n- added ; to the list of replacements\n- added a unit test\n", "B_clean_body": ["solv", "issu", "4065", "support", "matrix", "uri", "ur", "http", "github", "com", "angular", "angular", "js", "issu", "4065", "ad", "list", "replac", "ad", "unit", "test"], "title_sim": [0.7348155420589949], "body_sim": [0.13771424824875877], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.4581141218423496, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 59}, {"A_title": "Fixed broken anchorScroll documentation demo", "A_clean_title": ["fix", "broken", "anchorscrol", "anchor", "scroll", "document", "demo"], "B_title": "docs($anchorScroll) change example controller name to ScrollCtrl and add...", "B_clean_title": ["doc", "anchorscrol", "anchor", "scroll", "chang", "exampl", "control", "name", "scrollctrl", "scroll", "ctrl", "add"], "A_body": "", "A_clean_body": [], "B_body": "... styling\n\nChanged controller name in example html to ScrollCtrl to match name in example js.\n\nAdd styling to example html so scrollable area is not obtrusive to documentation page design.\n", "B_clean_body": ["style", "chang", "control", "name", "exampl", "html", "scrollctrl", "scroll", "ctrl", "match", "name", "exampl", "js", "add", "style", "exampl", "html", "so", "scrollabl", "area", "not", "obtrus", "document", "page", "design"], "title_sim": [0.39357387450458], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.56, 0.56], "pattern": 0, "time": 29}, {"A_title": "Use source object prototype in object copy", "A_clean_title": ["use", "sourc", "object", "prototyp", "object", "copi"], "B_title": "fix(copy): preserve prototype chain when copying object", "B_clean_title": ["fix", "copi", "preserv", "prototyp", "chain", "when", "copi", "object"], "A_body": "Whilst not strictly necessary for the likes of `$watch` to behave as expected, given that `angular.copy` is exposed it should honour the prototype of the source object such that, as the test ensures:\n\n``` javascript\nfunction A() {}\nvar a = new A();\nvar a_copy = angular.copy(a);\nexpect(a_copy instanceof A).toBe(true);\n```\n\nOtherwise users of `angular.copy` (read: at least me) end up having to create their own version of `angular.copy` to make this one change.\n", "A_clean_body": ["whilst", "not", "strictli", "necessari", "like", "watch", "behav", "as", "expect", "given", "that", "angular", "copi", "expos", "it", "honour", "prototyp", "sourc", "object", "such", "that", "as", "test", "ensur", "javascript", "function", "var", "new", "var", "copi", "angular", "copi", "expect", "copi", "instanceof", "tobe", "true", "otherwis", "user", "angular", "copi", "read", "at", "least", "me", "end", "up", "have", "creat", "their", "own", "version", "angular", "copi", "make", "thi", "one", "chang"], "B_body": "So far, angular.copy was copying all properties including those from\nprototype chain and was losing the whole prototype chain (except for Date,\nRegexp, and Array).\n\nDeep copy should exclude properties from the prototype chain because it\nis useless to do so. When modified, properties from prototype chain are\noverwritten on the object itself and will be deeply copied then.\n\nMoreover, preserving prototype chain allows instanceof operator to be\nconsistent between the source object and the copy.\nBefore this change,\n\n```\nvar Foo = function() {};\nvar foo = new Foo();\nvar fooCopy = angular.copy(foo);\nfoo instanceof Foo; // => true\nfooCopy instanceof Foo; // => false\n```\n\nNow,\n\n```\nfoo instanceof Foo; // => true\nfooCopy instanceof Foo; // => true\n```\n\nThe new behaviour is useful when using $http transformResponse. When\nreceiving JSON data, we could transform it and instantiate real object\n\"types\" from it. The transformed response is always copied by Angular.\nThe old behaviour was losing the whole prototype chain and broke all\n\"types\" from third-party libraries depending on instanceof.\n\nThis PR is somewhat related to issues #4996, #3767 and #1427.\n", "B_clean_body": ["so", "far", "angular", "copi", "wa", "copi", "all", "properti", "includ", "those", "prototyp", "chain", "wa", "lose", "whole", "prototyp", "chain", "except", "date", "regexp", "array", "deep", "copi", "exclud", "properti", "prototyp", "chain", "becaus", "it", "useless", "so", "when", "modifi", "properti", "prototyp", "chain", "are", "overwritten", "object", "itself", "will", "deepli", "copi", "then", "moreov", "preserv", "prototyp", "chain", "allow", "instanceof", "oper", "consist", "between", "sourc", "object", "copi", "befor", "thi", "chang", "var", "foo", "function", "var", "foo", "new", "foo", "var", "foocopi", "foo", "copi", "angular", "copi", "foo", "foo", "instanceof", "foo", "true", "foocopi", "foo", "copi", "instanceof", "foo", "fals", "now", "foo", "instanceof", "foo", "true", "foocopi", "foo", "copi", "instanceof", "foo", "true", "new", "behaviour", "use", "when", "http", "transformrespons", "transform", "respons", "when", "receiv", "json", "data", "we", "could", "transform", "it", "instanti", "real", "object", "type", "it", "transform", "respons", "alway", "copi", "by", "angular", "old", "behaviour", "wa", "lose", "whole", "prototyp", "chain", "broke", "all", "type", "third", "parti", "librari", "depend", "instanceof", "thi", "pr", "somewhat", "relat", "issu", "4996", "3767", "1427"], "title_sim": [0.5801267773012864], "body_sim": [0.5407888296753491], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.46755818956158474, 0.46755818956158474], "location_sim": [0.25, 0.25], "pattern": 0, "time": 207}, {"A_title": "fix(input:number): min/max not work when binded variable initial as false value", "A_clean_title": ["fix", "input", "number", "min", "max", "not", "work", "when", "bind", "variabl", "initi", "as", "fals", "valu"], "B_title": "fix(input): create max and/or min validation whatever the initial value is", "B_clean_title": ["fix", "input", "creat", "max", "or", "min", "valid", "whatev", "initi", "valu"], "A_body": "fix(input:number): min/max not work when binded variable initial as false value\n", "A_clean_body": ["fix", "input", "number", "min", "max", "not", "work", "when", "bind", "variabl", "initi", "as", "fals", "valu"], "B_body": "- fix issue #10307\n- change tests to corresponding changes\n- also change tests for ngmax and ngmin (though they have no some issue)\n\nCloses #10307\n", "B_clean_body": ["fix", "issu", "10307", "chang", "test", "correspond", "chang", "also", "chang", "test", "ngmax", "ngmin", "though", "they", "have", "no", "some", "issu", "close", "10307"], "title_sim": [0.5354373867444566], "body_sim": [0.00802015564978377], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0968453470022256, 1.0], "location_sim": [0.2916666666666667, 1.0], "pattern": 0, "time": 37}, {"A_title": "um, it is suppose to have that user in the callback right?", "A_clean_title": ["um", "it", "suppos", "have", "that", "user", "callback", "right"], "B_title": "Fiddle with $resource documentation examples", "B_clean_title": ["fiddl", "resourc", "document", "exampl"], "A_body": "", "A_clean_body": [], "B_body": "They were assuming...wrong things.\n", "B_clean_body": ["they", "were", "assum", "wrong", "thing"], "title_sim": [-0.020726953957257318], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.42424242424242425, 0.42424242424242425], "pattern": 0, "time": 232}, {"A_title": "Update directive.ngdoc", "A_clean_title": ["updat", "direct", "ngdoc"], "B_title": "Removed duplicated `require` section in directives guide", "B_clean_title": ["remov", "duplic", "requir", "section", "direct", "guid"], "A_body": "removed redundant (and truncated) 'require' attribute description.\n", "A_clean_body": ["remov", "redund", "truncat", "'requir", "attribut", "descript"], "B_body": "", "B_clean_body": [], "title_sim": [0.4766329649064753], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 1}, {"A_title": "fix($location): search should expand array values properly", "A_clean_title": ["fix", "locat", "search", "expand", "array", "valu", "properli"], "B_title": "feature(urlKeyValue): not rewriting duplicate params in url", "B_clean_title": ["featur", "urlkeyvalu", "url", "key", "valu", "not", "rewrit", "duplic", "param", "url"], "A_body": "Calling kind of $location.search('foo', [1,2]) results in a query like \"/path/d/#/?foo=1,2\"\nwhich is undesirable. This commit enhance $location to build url like \"/path/d/#/?foo=1&foo=2\".\nAt the same time calling $location.search() will give {foo: [1,2]}.\n", "A_clean_body": ["call", "kind", "locat", "search", "'foo", "1,2", "result", "queri", "like", "path", "foo=1,2", "which", "undesir", "thi", "commit", "enhanc", "locat", "build", "url", "like", "path", "foo=1", "foo=2", "at", "same", "time", "call", "locat", "search", "will", "give", "foo", "1,2"], "B_body": "parseKeyValue and toKeyValue can work with duplicates:\n    1) parseKeyValue looks for presence of obj[key]\n    2) detects and replaces obj[key] with [obj[key],val]\n    3) then pushes more duplicates if neccessary\n    4) toKeyValue decodes array correctly\n    5)(not changed) $location.search({param: 'key'}) still replaces if neccessary\n    6)(not changed) $location.search({param: ['key','key2']}) sets the url with duplicates\n\n**BREAKING CHANGE**: the url parameter duplicates are not rewritten anymore.\n    This will only effect deeplinks. Deeplinks in current apps that depend on\n    rewriting the duplicates will break. The deeplinks should\n    be changes to appear how they should look after angular strips the duplicates.\n", "B_clean_body": ["parsekeyvalu", "pars", "key", "valu", "tokeyvalu", "key", "valu", "work", "duplic", "parsekeyvalu", "pars", "key", "valu", "look", "presenc", "obj", "key", "detect", "replac", "obj", "key", "obj", "key", "val", "then", "push", "more", "duplic", "neccessari", "tokeyvalu", "key", "valu", "decod", "array", "correctli", "not", "chang", "locat", "search", "param", "'key", "still", "replac", "neccessari", "not", "chang", "locat", "search", "param", "'key", "'key2", "set", "url", "duplic", "**break", "change**", "url", "paramet", "duplic", "are", "not", "rewritten", "anymor", "thi", "will", "onli", "effect", "deeplink", "deeplink", "current", "app", "that", "depend", "rewrit", "duplic", "will", "break", "deeplink", "chang", "appear", "how", "they", "look", "after", "angular", "strip", "duplic"], "title_sim": [0.09387011644363165], "body_sim": [0.1873415722025883], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.4649881319987865, 0.42019227646939944], "location_sim": [0.38461538461538464, 0.5241935483870968], "pattern": 0, "time": 53}, {"A_title": "Documentation: Add missing argument to npm install", "A_clean_title": ["document", "add", "miss", "argument", "npm", "instal"], "B_title": "`npm install` to `npm install karma`", "B_clean_title": ["npm", "instal", "npm", "instal", "karma"], "A_body": "Request Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nThe argument `karma` was missing in the command `npm install` given for the installation of [Karma](http://karma-runner.github.io/0.12/index.html).\n\n**Other Comments:**\n", "A_clean_body": ["request", "type", "doc", "how", "reproduc", "compon", "impact", "small", "complex", "small", "thi", "issu", "relat", "**detail", "descript", "argument", "karma", "wa", "miss", "command", "npm", "instal", "given", "instal", "karma", "http", "karma", "runner", "github", "html", "io", "12", "index", "**other", "comment"], "B_body": "", "B_clean_body": [], "title_sim": [0.0], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 57}, {"A_title": "feat($logProvider): add additional control over what gets logged", "A_clean_title": ["feat", "logprovid", "log", "provid", "add", "addit", "control", "over", "what", "get", "log"], "B_title": "feat($LogProvider): flag to allow hide/show of $log.info()/$log.log()", "B_clean_title": ["feat", "logprovid", "log", "provid", "flag", "allow", "hide", "show", "log", "info", "log", "log"], "A_body": "A simple addition that lets developers have greater control over what does and doesn't get logged. With this change you can disable log, info, warn and error messages, similar to how debug logs could be disable with $logProvider.debugEnabled in the past.\n\nCloses #10560\n", "A_clean_body": ["simpl", "addit", "that", "let", "develop", "have", "greater", "control", "over", "what", "n't", "get", "log", "thi", "chang", "you", "disabl", "log", "info", "warn", "error", "messag", "similar", "how", "debug", "log", "could", "disabl", "logprovid", "debugen", "log", "provid", "debug", "enabl", "past", "close", "10560"], "B_body": "Add method to set a flag to enable/disable $log.info() and $log.log() messages.\n**$logProvider.enableMessages(false|true)**\nThis is similar to how $logProvider.debugEnabled() works.\n- I haven\u2019t gotten the tests to pass yet, there\u2019s an error in the logSpec saying $LogProvider undefined.  \n", "B_clean_body": ["add", "method", "set", "flag", "enabl", "disabl", "log", "info", "log", "log", "messag", "logprovid", "enablemessag", "log", "provid", "enabl", "messag", "false|tru", "thi", "similar", "how", "logprovid", "debugen", "log", "provid", "debug", "enabl", "work", "haven", "gotten", "test", "pass", "yet", "there", "error", "logspec", "log", "spec", "say", "logprovid", "log", "provid", "undefin"], "title_sim": [0.9044553282132527], "body_sim": [0.9102439644062692], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.8296125811258267, 0.8296125811258267], "location_sim": [0.7652173913043478, 0.7652173913043478], "pattern": 0, "time": 400}, {"A_title": "docs(CHANGELOG): missing version number added", "A_clean_title": ["doc", "changelog", "miss", "version", "number", "ad"], "B_title": "fix(CHANGELOG): missing version number for 1.2.28", "B_clean_title": ["fix", "changelog", "miss", "version", "number", "28"], "A_body": "", "A_clean_body": [], "B_body": "Well, the version number was missing there.\n", "B_clean_body": ["well", "version", "number", "wa", "miss", "there"], "title_sim": [0.8417876753384478], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "docs($http): patch method is not exists", "A_clean_title": ["doc", "http", "patch", "method", "not", "exist"], "B_title": "fix($http): add missing shortcut methods and missing docs", "B_clean_title": ["fix", "http", "add", "miss", "shortcut", "method", "miss", "doc"], "A_body": "The link here brings nowhere.\nOn the 1.2.6 the patch method seems not exists / not working.\n\nYou can observe the error here:\nhttp://plnkr.co/edit/cwJ1pgoqbBUzjSoApg5S\n`TypeError: undefined is not a function`\n\nIf you just change the version of angular with 1.3.0 the request will work.\n", "A_clean_body": ["link", "here", "bring", "nowher", "patch", "method", "seem", "not", "exist", "not", "work", "you", "observ", "error", "here", "http", "plnkr", "co", "edit", "cwj1pgoqbbuzjsoapg5", "cw", "j1pgoqb", "uzj", "so", "apg5", "typeerror", "type", "error", "undefin", "not", "function", "you", "just", "chang", "version", "angular", "request", "will", "work"], "B_body": "There was some inconsistency in version 1.2.25 regarding the definition and documentation of shortcut methods in `ng.$http` and `ngMock[E2E].$httpBackend`. Some methods didn't exist (although documented as existing), whereas some methods did exist, but wheren't documented.\nThis commit fixes the above errors and adds tests to verify the existence of all shortcut methods.\n\nMore specificcally, the following issues were addressed:\n- `ng.$http`: Add the missing `patch()` shortcut method and related docs.\n- `ng.$http` spec: Add test to verify the existence and functionality of the `patch()` shortcut method.\n- `ngMock[E2E].$httpBackend`: Add docs for the (existing) `whenPATCH()` shortcut method, add the missing `expectHEAD()`/`whenHEAD()` shortcut methods, fix grammatical errors.\n- `ngMock[E2E].$httpBackend` spec: Add test to verify the existence of shortcut methods for all HTTP verbs.\n\nCloses #9180\n", "B_clean_body": ["there", "wa", "some", "inconsist", "version", "25", "regard", "definit", "document", "shortcut", "method", "ng", "http", "ngmock", "ng", "mock", "e2e", "httpbackend", "http", "backend", "some", "method", "did", "n't", "exist", "although", "document", "as", "exist", "wherea", "some", "method", "did", "exist", "but", "where", "n't", "document", "thi", "commit", "fix", "abov", "error", "add", "test", "verifi", "exist", "all", "shortcut", "method", "more", "specificc", "follow", "issu", "were", "address", "ng", "http", "add", "miss", "patch", "shortcut", "method", "relat", "doc", "ng", "http", "spec", "add", "test", "verifi", "exist", "function", "patch", "shortcut", "method", "ngmock", "ng", "mock", "e2e", "httpbackend", "http", "backend", "add", "doc", "exist", "whenpatch", "when", "patch", "shortcut", "method", "add", "miss", "expecthead", "expect", "head", "whenhead", "when", "head", "shortcut", "method", "fix", "grammat", "error", "ngmock", "ng", "mock", "e2e", "httpbackend", "http", "backend", "spec", "add", "test", "verifi", "exist", "shortcut", "method", "all", "http", "verb", "close", "9180"], "title_sim": [0.6214888244922586], "body_sim": [0.3526297904416976], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 24}, {"A_title": "Correcting a spelling mistake in step 7 of the tutorial.", "A_clean_title": ["correct", "spell", "mistak", "step", "tutori"], "B_title": "docs (tutorial/step_07): Correcting a type-o", "B_clean_title": ["doc", "07", "tutori", "step", "correct", "type"], "A_body": "", "A_clean_body": [], "B_body": "Changing the spelling of probably.\n", "B_clean_body": ["chang", "spell", "probabl"], "title_sim": [0.9628426032903723], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 5}, {"A_title": "chore(docs): fix gen-docs.js deprecation warning", "A_clean_title": ["chore", "doc", "fix", "gen", "doc", "js", "deprec", "warn"], "B_title": "feat(Grunt) Switch from Rake to Grunt", "B_clean_title": ["feat", "grunt", "switch", "rake", "grunt"], "A_body": "", "A_clean_body": [], "B_body": "Migrates the Angular project from Rake to Grunt.\n### Benefits:\n- Drops Ruby dependency\n- Lowers barrier to entry for contributions from JavaScript ninjas\n- Simplifies the Angular project setup and build process\n- Adopts industry-standard tools specific to JavaScript projects\n- Windows support for the build and end-to-end tests\n### BREAKING CHANGE:\n\n Rake is completely replaced by Grunt. Below are the deprecated Rake tasks and their Grunt equivalents:\n- rake --> grunt\n- rake package --> grunt package\n- rake init --> N/A\n- rake clean --> grunt clean\n- rake concat_scenario --> grunt build:scenario\n- rake concat --> grunt build\n- rake concat_scenario --> grunt build:scenario\n- rake minify --> grunt minify\n- rake version --> grunt write:version\n- rake docs --> grunt docs\n- rake webserver --> grunt webserver\n- rake test --> grunt test\n- rake test:unit --> grunt test:unit\n- rake test:<jqlite|jquery|modules|e2e> --> grunt test:<jqlite|jquery|modules|end2end|e2e>\n- rake test[Firefox+Safari] --> grunt test --in=[Firefox,Safari]\n- rake test[Safari] --> grunt test --in=[Safari]\n- rake autotest --> grunt autotest\n### NOTES:\n- For convenience grunt test:e2e starts a webserver for you, while grunt test:end2end doesn't.\n  Use grunt test:end2end if you already have the webserver running.\n- Removes duplicate entry for Describe.js in the angularScenario section of angularFiles.js\n- Updates docs/src/gen-docs.js to use #done intead of the deprecated #end\n- Uses grunt-contrib-connect instead of lib/nodeserver (removed)\n- Removes nodeserver.sh, travis now uses grunt webserver\n- Built and minified files are identical to Rake's output, with the exception of one less\n  character for git revisions (using --short) and a couple minor whitespace differences\n\nCloses #199\n", "B_clean_body": ["migrat", "angular", "project", "rake", "grunt", "benefit", "drop", "rubi", "depend", "lower", "barrier", "entri", "contribut", "javascript", "java", "script", "ninja", "simplifi", "angular", "project", "setup", "build", "process", "adopt", "industri", "standard", "tool", "specif", "javascript", "java", "script", "project", "window", "support", "build", "end", "end", "test", "break", "chang", "rake", "complet", "replac", "by", "grunt", "below", "are", "deprec", "rake", "task", "their", "grunt", "equival", "rake", "grunt", "rake", "packag", "grunt", "packag", "rake", "init", "rake", "clean", "grunt", "clean", "rake", "concat", "scenario", "grunt", "build", "scenario", "rake", "concat", "grunt", "build", "rake", "concat", "scenario", "grunt", "build", "scenario", "rake", "minifi", "grunt", "minifi", "rake", "version", "grunt", "write", "version", "rake", "doc", "grunt", "doc", "rake", "webserv", "grunt", "webserv", "rake", "test", "grunt", "test", "rake", "test", "unit", "grunt", "test", "unit", "rake", "test", "jqlite|jquery|modules|e2", "grunt", "test", "jqlite|jquery|modules|end2end|e2", "rake", "test", "firefox+safari", "grunt", "test", "in=", "firefox", "safari", "rake", "test", "safari", "grunt", "test", "in=", "safari", "rake", "autotest", "grunt", "autotest", "note", "conveni", "grunt", "test", "e2e", "start", "webserv", "you", "while", "grunt", "test", "end2end", "n't", "use", "grunt", "test", "end2end", "you", "alreadi", "have", "webserv", "run", "remov", "duplic", "entri", "describ", "js", "angularscenario", "angular", "scenario", "section", "angularfil", "js", "angular", "file", "updat", "doc", "src", "gen", "doc", "js", "use", "done", "intead", "deprec", "end", "use", "grunt", "contrib", "connect", "instead", "lib", "nodeserv", "remov", "remov", "nodeserv", "sh", "travi", "now", "use", "grunt", "webserv", "built", "minifi", "file", "are", "ident", "rake", "'s", "output", "except", "one", "less", "charact", "git", "revis", "short", "coupl", "minor", "whitespac", "differ", "close", "199"], "title_sim": [0.2743315532688267], "body_sim": [0.0], "file_list_sim": 0.05555555555555555, "overlap_files_len": 1, "code_sim": [0.056881831938972546, 1.0], "location_sim": [0.03951890034364261, 0.7931034482758621], "pattern": 0, "time": 18}, {"A_title": "feat(ngMock): allow the use of a predicate to match data", "A_clean_title": ["feat", "ngmock", "ng", "mock", "allow", "use", "predic", "match", "data"], "B_title": "feat(MockHttpExpectation): matchData supports function as data", "B_clean_title": ["feat", "mockhttpexpect", "mock", "http", "expect", "matchdata", "match", "data", "support", "function", "as", "data"], "A_body": "When using $httpBackend, the data in definitions and expectations can only\nbe defined as a string (which must be matched exactly) or as a regexp.\nBoth are not very practical when it comes to matching JSON objects. This\ncommits adds the possibility to pass a predicate function, which should\nreturn a truthy value if the data matches with the expectation and a falsy\nvalue if it doesn't.\n", "A_clean_body": ["when", "httpbackend", "http", "backend", "data", "definit", "expect", "onli", "defin", "as", "string", "which", "must", "match", "exactli", "or", "as", "regexp", "both", "are", "not", "veri", "practic", "when", "it", "come", "match", "json", "object", "thi", "commit", "add", "possibl", "pass", "predic", "function", "which", "return", "truthi", "valu", "data", "match", "expect", "falsi", "valu", "it", "n't"], "B_body": "Add support for passing function as validating data:\n- To avoid hacking test method of RegExp\n- Optionally overwrite toString method of fn to show validation tips\n", "B_clean_body": ["add", "support", "pass", "function", "as", "valid", "data", "avoid", "hack", "test", "method", "regexp", "reg", "exp", "option", "overwrit", "tostr", "string", "method", "fn", "show", "valid", "tip"], "title_sim": [0.5559059983727347], "body_sim": [0.2826362366196294], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.5057601238297444, 0.5057601238297444], "location_sim": [0.08620689655172414, 0.08620689655172414], "pattern": 0, "time": 47}, {"A_title": "fix($anchorScroll): fix broken example code with correct controller name", "A_clean_title": ["fix", "anchorscrol", "anchor", "scroll", "fix", "broken", "exampl", "code", "correct", "control", "name"], "B_title": "docs($anchorScroll) change example controller name to ScrollCtrl and add...", "B_clean_title": ["doc", "anchorscrol", "anchor", "scroll", "chang", "exampl", "control", "name", "scrollctrl", "scroll", "ctrl", "add"], "A_body": "The demo does not work\nhttp://docs.angularjs.org/api/ng.$anchorScroll\n![screenshot 2013-10-09 13 03 40](https://f.cloud.github.com/assets/1016365/1301180/e97f04dc-311d-11e3-9114-bb2d13a4892c.png)\n\nRename \"MainCtrl\" ng-controller to correct controller name \"ScrollCtrl\"\n", "A_clean_body": ["demo", "not", "work", "http", "angularj", "doc", "org", "api", "ng", "anchorscrol", "anchor", "scroll", "screenshot", "2013", "10", "09", "13", "03", "40", "http", "311d", "11e3", "9114", "cloud", "github", "bb2d13a4892c", "png", "com", "asset", "1016365", "1301180", "e97f04dc", "renam", "mainctrl", "main", "ctrl", "ng", "control", "correct", "control", "name", "scrollctrl", "scroll", "ctrl"], "B_body": "... styling\n\nChanged controller name in example html to ScrollCtrl to match name in example js.\n\nAdd styling to example html so scrollable area is not obtrusive to documentation page design.\n", "B_clean_body": ["style", "chang", "control", "name", "exampl", "html", "scrollctrl", "scroll", "ctrl", "match", "name", "exampl", "js", "add", "style", "exampl", "html", "so", "scrollabl", "area", "not", "obtrus", "document", "page", "design"], "title_sim": [0.7017531657104714], "body_sim": [0.3351562376478953], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 33}, {"A_title": "stop coercing falsy values to null before xhr.send()", "A_clean_title": ["stop", "coerc", "falsi", "valu", "null", "befor", "xhr", "send"], "B_title": "fix($http): stop $httpBackend coersion of falsy values to null before xh...", "B_clean_title": ["fix", "http", "stop", "httpbackend", "http", "backend", "coersion", "falsi", "valu", "null", "befor", "xh"], "A_body": "This is intended to resolve https://github.com/angular/angular.js/issues/11552.\n", "A_clean_body": ["thi", "intend", "resolv", "http", "github", "com", "angular", "angular", "js", "issu", "11552"], "B_body": "...r.send()\n\nstop $httpBackend from potentially overriding false values to null when sending a falsy value to a web service via POST or PUT et al\n", "B_clean_body": ["send", "stop", "httpbackend", "http", "backend", "potenti", "overrid", "fals", "valu", "null", "when", "send", "falsi", "valu", "web", "servic", "via", "post", "or", "put", "et", "al"], "title_sim": [0.732591077328311], "body_sim": [0.0710981544625278], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.9368890834721048, 0.9368890834721048], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "docs(ngResource): fix error in example", "A_clean_title": ["doc", "ngresourc", "ng", "resourc", "fix", "error", "exampl"], "B_title": "Fiddle with $resource documentation examples", "B_clean_title": ["fiddl", "resourc", "document", "exampl"], "A_body": "user must be a parameter of callback function\ncurrently it is not defined\n", "A_clean_body": ["user", "must", "paramet", "callback", "function", "current", "it", "not", "defin"], "B_body": "They were assuming...wrong things.\n", "B_clean_body": ["they", "were", "assum", "wrong", "thing"], "title_sim": [0.7772765417952543], "body_sim": [0.04775059051237279], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.42424242424242425, 0.42424242424242425], "pattern": 0, "time": 344}, {"A_title": "fix($aria): pass $event in locals for ngClick", "A_clean_title": ["fix", "aria", "pass", "event", "local", "ngclick", "ng", "click"], "B_title": "fix(ngAria): trigger digest on ng-click via keypress, pass $event to expression", "B_clean_title": ["fix", "ngaria", "ng", "aria", "trigger", "digest", "ng", "click", "via", "keypress", "pass", "event", "express"], "A_body": "pass <code>event</code> in <code>locals</code> for <code>$eval</code>\nThis happens in <code>angular-bootstrap</code>'s repo for modals\n\n``` javascript\nng-click=\"close($event)\"\n```\n\n``` javascript\nangular.module(\"template/modal/window.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/modal/window.html\",\n    \"<div tabindex=\\\"-1\\\" role=\\\"dialog\\\" class=\\\"modal fade\\\" ng-class=\\\"{in: animate}\\\" ng-style=\\\"{'z-index': 1050 + index*10, display: 'block'}\\\" ng-click=\\\"close($event)\\\">\\n\" +\n    \"    <div class=\\\"modal-dialog\\\" ng-class=\\\"{'modal-sm': size == 'sm', 'modal-lg': size == 'lg'}\\\"><div class=\\\"modal-content\\\" modal-transclude></div></div>\\n\" +\n    \"</div>\");\n}]);\n```\n", "A_clean_body": ["pass", "code", "event", "code", "code", "local", "code", "code", "eval", "code", "thi", "happen", "code", "angular", "bootstrap", "code", "'s", "repo", "modal", "javascript", "ng", "click=", "close", "event", "javascript", "angular", "modul", "html", "templat", "modal", "window", "run", "templatecach", "templat", "cach", "function", "templatecach", "templat", "cach", "templatecach", "put", "templat", "cach", "html", "templat", "modal", "window", "div", "tabindex=", "role=", "dialog", "class=", "modal", "fade", "ng", "class=", "anim", "ng", "style=", "index", "1050", "index*10", "display", "'block", "ng", "click=", "close", "event", "div", "class=", "modal", "dialog", "ng", "class=", "'modal", "sm", "size", "'sm", "'modal", "lg", "size", "'lg", "div", "class=", "modal", "content", "modal", "transclud", "div", "div", "div"], "B_body": "Minor improvement to ng-click directive from ngAria. Now, if bindings are updated\nduring the click handler, the DOM will be updated as well. Additionally, the $event\nobject is passed in to the expression via locals, as is done for core event directives.\n\nCloses #10442\n", "B_clean_body": ["minor", "improv", "ng", "click", "direct", "ngaria", "ng", "aria", "now", "bind", "are", "updat", "dure", "click", "handler", "dom", "will", "updat", "as", "well", "addit", "event", "object", "pass", "express", "via", "local", "as", "done", "core", "event", "direct", "close", "10442"], "title_sim": [0.8769704127266673], "body_sim": [0.22469681133846078], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.2982533354588246, 0.28370828478406696], "location_sim": [0.603448275862069, 1.0], "pattern": 0, "time": 3}, {"A_title": "fix($location) : initialize locationPrototype.$$absUrl to empty string", "A_clean_title": ["fix", "locat", "initi", "locationprototyp", "locat", "prototyp", "absurl", "ab", "url", "empti", "string"], "B_title": "fix($location): absUrl() does not return undefined for base href and \u2026", "B_clean_title": ["fix", "locat", "absurl", "ab", "url", "not", "return", "undefin", "base", "href"], "A_body": "**What kind of change does this PR introduce? (Bug fix, feature, docs update, ...)**\nInitialize locationPrototype.$$absUrl to avoid a crash when base href and current location have different domains.\n\n**What is the current behavior? (You can also link to an open issue here)**\n#11091\n\n**What is the new behavior (if this is a feature change)?**\nDoes not crash anymore.\n\n**Does this PR introduce a breaking change?**\nI don't think so...\n\n**Please check if the PR fulfills these requirements**\n- [x] The commit message follows our guidelines: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format\n- [x] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n**Other information**:\n\nCloses #11091\n", "A_clean_body": ["**what", "kind", "chang", "thi", "pr", "introduc", "bug", "fix", "featur", "doc", "updat", "initi", "locationprototyp", "locat", "prototyp", "absurl", "ab", "url", "avoid", "crash", "when", "base", "href", "current", "locat", "have", "differ", "domain", "**what", "current", "behavior", "you", "also", "link", "open", "issu", "here", "11091", "**what", "new", "behavior", "thi", "featur", "chang", "not", "crash", "anymor", "**doe", "thi", "pr", "introduc", "break", "chang", "n't", "think", "so", "**pleas", "check", "pr", "fulfil", "these", "requirements**", "commit", "messag", "follow", "our", "guidelin", "http", "md", "github", "com", "angular", "angular", "js", "blob", "master", "contribut", "commit", "messag", "format", "test", "chang", "have", "been", "ad", "bug", "fix", "featur", "doc", "have", "been", "ad", "updat", "bug", "fix", "featur", "**other", "information**", "close", "11091"], "B_body": "\u2026html5Mode\n\n$location's absUrl incorrectly returned undefined when using base href and html5Mode. Initializaing it to fix this issue.\n\nCloses #11091\n", "B_clean_body": ["\u2026html5mode", "locat", "'s", "absurl", "ab", "url", "incorrectli", "return", "undefin", "when", "base", "href", "html5mode", "initializa", "it", "fix", "thi", "issu", "close", "11091"], "title_sim": [0.5163012847507434], "body_sim": [0.255473407399446], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.5466781505991437, 1.0000000000000002], "location_sim": [0.5609756097560976, 1.0], "pattern": 1, "time": 62}, {"A_title": "Add type=\"url\" and type=\"email\" into the validators pipeline", "A_clean_title": ["add", "type=", "url", "type=", "email", "into", "valid", "pipelin"], "B_title": "fix(form input): input[\"email\"] and ngRequired not working together", "B_clean_title": ["fix", "form", "input", "input", "email", "ngrequir", "ng", "requir", "not", "work", "togeth"], "A_body": "", "A_clean_body": [], "B_body": "ngRequired added to an email field wasn't working properly. ng-invalid-required\nstayed true unless a valid email was entered.\n\ncorrect behaviour is that it turns to ng-valid-required at first entered key.\n\ncloses: #7849\n", "B_clean_body": ["ngrequir", "ng", "requir", "ad", "email", "field", "wa", "n't", "work", "properli", "ng", "invalid", "requir", "stay", "true", "unless", "valid", "email", "wa", "enter", "correct", "behaviour", "that", "it", "turn", "ng", "valid", "requir", "at", "first", "enter", "key", "close", "7849"], "title_sim": [0.6619560639378134], "body_sim": [0.0], "file_list_sim": 0.07142857142857142, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.18932038834951456, 1.0], "pattern": 0, "time": 5}, {"A_title": "Isolated scope properties are not available in 'pre' link function when using 'templateUrl'", "A_clean_title": ["isol", "scope", "properti", "are", "not", "avail", "'pre", "link", "function", "when", "'templateurl", "'templat", "url"], "B_title": "Fix $compile (remove templateUrl directive splitting)", "B_clean_title": ["fix", "compil", "remov", "templateurl", "templat", "url", "direct", "split"], "A_body": "Fix for #2064.\n", "A_clean_body": ["fix", "2064"], "B_body": "How did compiling a templateUrl (async) directive with `replace:true` work before this commit?\n1. apply all directives with higher priority than the templateUrl directive\n2. partially apply the templateUrl directive (create `beforeTemplateNodeLinkFn`)\n3. fetch the template\n4. apply second part of the templateUrl directive on the fetched template\n   (`afterTemplateNodeLinkFn`)\n\nThat is, the templateUrl directive is basically split into two parts (two `nodeLinkFn` functions),\nwhich has to be both applied.\n\nNormally we compose linking functions (`nodeLinkFn`) using continuation - calling the linking\nfunction of a parent element, passing the linking function of the child elements as an argument. The\nparent linking function then does:\n1. execute its pre-link functions\n2. call the child elements linking function (traverse)\n3. execute its post-link functions\n\nNow, we have two linking functions for the same DOM element level (because the templateUrl directive\nhas been split).\n\nThere has been multiple issues because of the order of these two linking functions (creating\ncontroller before setting up scope locals, running linking functions before instantiating\ncontroller, etc.). It is easy to fix one use case, but it breaks some other use case. It is hard to\ndecide what is the \"correct\" order of these two linking functions as they are essentially on the\nsame level.\n\nRunning them side-by-side screws up pre/post linking functions for the high priority directives\n(those executed before the templateUrl directive). It runs post-linking functions before traversing:\n\n``` js\nbeforeTemplateNodeLinkFn(null); // do not travers\nafterTemplateNodeLinkFn(afterTemplateChildLinkFn);\n```\n\nComposing them (in any order) screws up the order of post-linking functions. We could fix this by\nhaving post-linking functions to execute in reverse order (from the lowest priority to the highest)\nwhich might actually make a sense.\n\n**My solution is to remove this splitting.** This commit removes the `beforeTemplateNodeLinkFn`. The\nfirst run (before we have the template) only schedules fetching the template. The rest (creating\nscope locals, instantiating a controller, linking functions, etc) is done when processing the\ndirective again (in the context of the already fetched template; this is the cloned\n`derivedSyncDirective`).\n\nWe still need to pass-through the linking functions of the higher priority directives (those\nexecuted before the templateUrl directive), that's why I added `preLinkFns` and `postLinkFns`\narguments to `applyDirectivesToNode`.\n\nThis also changes the \"$compile transclude should make the result of a transclusion available to the\nparent directive in post- linking phase (templateUrl)\" unit test. It was testing that a parent\ndirective can see the content of transclusion in its pre-link function. That is IMHO wrong (as the\n`ngTransclude` directive inserts the translusion in its linking function). This test was only passing because of\nc173ca412878d537b18df01f39e400ea48a4b398, which changed the behavior of the compiler to traverse\nbefore executing the parent linking function. That was wrong and also caused the #3792 issue, which\nthis change fixes.\n\nCloses #3792\n", "B_clean_body": ["how", "did", "compil", "templateurl", "templat", "url", "async", "direct", "replac", "true", "work", "befor", "thi", "commit", "appli", "all", "direct", "higher", "prioriti", "than", "templateurl", "templat", "url", "direct", "partial", "appli", "templateurl", "templat", "url", "direct", "creat", "beforetemplatenodelinkfn", "befor", "templat", "node", "link", "fn", "fetch", "templat", "appli", "second", "part", "templateurl", "templat", "url", "direct", "fetch", "templat", "aftertemplatenodelinkfn", "after", "templat", "node", "link", "fn", "that", "templateurl", "templat", "url", "direct", "basic", "split", "into", "two", "part", "two", "nodelinkfn", "node", "link", "fn", "function", "which", "ha", "both", "appli", "normal", "we", "compos", "link", "function", "nodelinkfn", "node", "link", "fn", "continu", "call", "link", "function", "parent", "element", "pass", "link", "function", "child", "element", "as", "argument", "parent", "link", "function", "then", "execut", "it", "pre", "link", "function", "call", "child", "element", "link", "function", "travers", "execut", "it", "post", "link", "function", "now", "we", "have", "two", "link", "function", "same", "dom", "element", "level", "becaus", "templateurl", "templat", "url", "direct", "ha", "been", "split", "there", "ha", "been", "multipl", "issu", "becaus", "order", "these", "two", "link", "function", "creat", "control", "befor", "set", "up", "scope", "local", "run", "link", "function", "befor", "instanti", "control", "etc", "it", "easi", "fix", "one", "use", "case", "but", "it", "break", "some", "other", "use", "case", "it", "hard", "decid", "what", "correct", "order", "these", "two", "link", "function", "as", "they", "are", "essenti", "same", "level", "run", "them", "side", "by", "side", "screw", "up", "pre", "post", "link", "function", "high", "prioriti", "direct", "those", "execut", "befor", "templateurl", "templat", "url", "direct", "it", "run", "post", "link", "function", "befor", "travers", "js", "beforetemplatenodelinkfn", "befor", "templat", "node", "link", "fn", "null", "not", "traver", "aftertemplatenodelinkfn", "after", "templat", "node", "link", "fn", "aftertemplatechildlinkfn", "after", "templat", "child", "link", "fn", "compos", "them", "ani", "order", "screw", "up", "order", "post", "link", "function", "we", "could", "fix", "thi", "by", "have", "post", "link", "function", "execut", "revers", "order", "lowest", "prioriti", "highest", "which", "might", "actual", "make", "sens", "**mi", "solut", "remov", "thi", "split", "thi", "commit", "remov", "beforetemplatenodelinkfn", "befor", "templat", "node", "link", "fn", "first", "run", "befor", "we", "have", "templat", "onli", "schedul", "fetch", "templat", "rest", "creat", "scope", "local", "instanti", "control", "link", "function", "etc", "done", "when", "process", "direct", "again", "context", "alreadi", "fetch", "templat", "thi", "clone", "derivedsyncdirect", "deriv", "sync", "direct", "we", "still", "need", "pass", "through", "link", "function", "higher", "prioriti", "direct", "those", "execut", "befor", "templateurl", "templat", "url", "direct", "that", "'s", "whi", "ad", "prelinkfn", "pre", "link", "fn", "postlinkfn", "post", "link", "fn", "argument", "applydirectivestonod", "appli", "direct", "node", "thi", "also", "chang", "compil", "transclud", "make", "result", "transclus", "avail", "parent", "direct", "post", "link", "phase", "templateurl", "templat", "url", "unit", "test", "it", "wa", "test", "that", "parent", "direct", "see", "content", "transclus", "it", "pre", "link", "function", "that", "imho", "wrong", "as", "ngtransclud", "ng", "transclud", "direct", "insert", "translus", "it", "link", "function", "thi", "test", "wa", "onli", "pass", "becaus", "c173ca412878d537b18df01f39e400ea48a4b398", "which", "chang", "behavior", "compil", "travers", "befor", "execut", "parent", "link", "function", "that", "wa", "wrong", "also", "caus", "3792", "issu", "which", "thi", "chang", "fix", "close", "3792"], "title_sim": [0.290103073775864], "body_sim": [0.06410673662828774], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.11104845377778923, 0.11104845377778923], "location_sim": [0.0438871473354232, 0.0438871473354232], "pattern": -1, "time": 20}, {"A_title": "Add Chinese version README.---Closed this PR, thank you.", "A_clean_title": ["add", "chines", "version", "readm", "close", "thi", "pr", "thank", "you"], "B_title": "Add chinese readme.md", "B_clean_title": ["add", "chines", "readm", "md"], "A_body": "**What kind of change does this PR introduce? (Bug fix, feature, docs update, ...)**\r\n\r\nAdded Chinese version README.\r\n\r\n\r\n**What is the current behavior? (You can also link to an open issue here)**\r\n\r\n\r\n\r\n**What is the new behavior (if this is a feature change)?**\r\n\r\n\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo, just README.\r\n\r\n**Please check if the PR fulfills these requirements**\r\n- [x] The commit message follows our guidelines: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n**Other information**:\r\n\r\nI'am xiaofeiz@google.com, and I have signed CLA.\r\n", "A_clean_body": ["**what", "kind", "chang", "thi", "pr", "introduc", "bug", "fix", "featur", "doc", "updat", "ad", "chines", "version", "readm", "**what", "current", "behavior", "you", "also", "link", "open", "issu", "here", "**what", "new", "behavior", "thi", "featur", "chang", "**doe", "thi", "pr", "introduc", "break", "chang", "no", "just", "readm", "**pleas", "check", "pr", "fulfil", "these", "requirements**", "commit", "messag", "follow", "our", "guidelin", "http", "md", "github", "com", "angular", "angular", "js", "blob", "master", "contribut", "commit", "messag", "format", "test", "chang", "have", "been", "ad", "bug", "fix", "featur", "doc", "have", "been", "ad", "updat", "bug", "fix", "featur", "**other", "information**", "i'am", "xiaofeiz", "googl", "com", "have", "sign", "cla"], "B_body": "** docs update**\r\n\r\n\r\n", "B_clean_body": ["doc", "update**"], "title_sim": [0.4010338776482392], "body_sim": [0.3806522992965981], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 1}, {"A_title": "fix($compile): `bindToController` should work without `controllerAs`", "A_clean_title": ["fix", "compil", "bindtocontrol", "bind", "control", "work", "without", "controllera", "control", "as"], "B_title": "fix($compile):remove controllerAs requirement", "B_clean_title": ["fix", "compil", "remov", "controllera", "control", "as", "requir"], "A_body": "**What kind of change does this PR introduce? (Bug fix, feature, docs update, ...)**\n\nfix \n\n**What is the current behavior? (You can also link to an open issue here)**\n\nsee #15088\n\n**Does this PR introduce a breaking change?**\n\nno\n\n**Please check if the PR fulfills these requirements**\n- [x] The commit message follows our guidelines: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format\n- [x] Tests for the changes have been added (for bug fixes / features)\n- [x] Docs have been added / updated (for bug fixes / features)\n", "A_clean_body": ["**what", "kind", "chang", "thi", "pr", "introduc", "bug", "fix", "featur", "doc", "updat", "fix", "**what", "current", "behavior", "you", "also", "link", "open", "issu", "here", "see", "15088", "**doe", "thi", "pr", "introduc", "break", "chang", "no", "**pleas", "check", "pr", "fulfil", "these", "requirements**", "commit", "messag", "follow", "our", "guidelin", "http", "md", "github", "com", "angular", "angular", "js", "blob", "master", "contribut", "commit", "messag", "format", "test", "chang", "have", "been", "ad", "bug", "fix", "featur", "doc", "have", "been", "ad", "updat", "bug", "fix", "featur"], "B_body": "**What kind of change does this PR introduce? (Bug fix, feature, docs update, ...)**\n\nBug fix\n\n**What is the current behavior? (You can also link to an open issue here)**\n\nBinding a directive to a controller without a `controllerAs` property throws an error unnecessarily.\n\n**What is the new behavior (if this is a feature change)?**\n\nBinding a directive to a controller without a `controllerAs` property does not throw an error.\n\n**Does this PR introduce a breaking change?**\n\nno\n\n**Please check if the PR fulfills these requirements**\n- [x] The commit message follows our guidelines: https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format\n- [x] Tests for the changes have been added (for bug fixes / features)\n- [x] Docs have been added / updated (for bug fixes / features)\n\n**Other information**:\n\nRemove the controllerAs requirement when binding a directive to a\ncontroller\n", "B_clean_body": ["**what", "kind", "chang", "thi", "pr", "introduc", "bug", "fix", "featur", "doc", "updat", "bug", "fix", "**what", "current", "behavior", "you", "also", "link", "open", "issu", "here", "bind", "direct", "control", "without", "controllera", "control", "as", "properti", "throw", "error", "unnecessarili", "**what", "new", "behavior", "thi", "featur", "chang", "bind", "direct", "control", "without", "controllera", "control", "as", "properti", "not", "throw", "error", "**doe", "thi", "pr", "introduc", "break", "chang", "no", "**pleas", "check", "pr", "fulfil", "these", "requirements**", "commit", "messag", "follow", "our", "guidelin", "http", "md", "github", "com", "angular", "angular", "js", "blob", "master", "contribut", "commit", "messag", "format", "test", "chang", "have", "been", "ad", "bug", "fix", "featur", "doc", "have", "been", "ad", "updat", "bug", "fix", "featur", "**other", "information**", "remov", "controllera", "control", "as", "requir", "when", "bind", "direct", "control"], "title_sim": [0.6308583230959787], "body_sim": [0.9033571773882321], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.019209662848895224, 0.019209662848895224], "location_sim": [0.9620253164556962, 0.9620253164556962], "pattern": 0, "time": 0}, {"A_title": "docs(ngDisabled): correct directive.", "A_clean_title": ["doc", "ngdisabl", "ng", "disabl", "correct", "direct"], "B_title": "docs(ngDisabled): describe your change...", "B_clean_title": ["doc", "ngdisabl", "ng", "disabl", "describ", "your", "chang"], "A_body": "In example of \"ng-disabled\" previously disabled was used in place of \"ng-disabled\" directive.\n![untitled](https://cloud.githubusercontent.com/assets/11410696/7789256/07a82b14-0278-11e5-8ded-317ee4ba7b82.png)\n", "A_clean_body": ["exampl", "ng", "disabl", "previous", "disabl", "wa", "use", "place", "ng", "disabl", "direct", "untitl", "http", "0278", "11e5", "8ded", "githubusercont", "317ee4ba7b82", "png", "cloud", "com", "asset", "11410696", "7789256", "07a82b14"], "B_body": "\"disabled\" should be written as \"ng-disabled\".\n", "B_clean_body": ["disabl", "written", "as", "ng", "disabl"], "title_sim": [0.7979668645395911], "body_sim": [0.8732237534883465], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "fix($timeout/$interval): if invokeApply is false, do not use evalAsync", "A_clean_title": ["fix", "timeout", "interv", "invokeappli", "invok", "appli", "fals", "not", "use", "evalasync", "eval", "async"], "B_title": "fix($interval): call fn even if invokeApply is false", "B_clean_title": ["fix", "interv", "call", "fn", "even", "invokeappli", "invok", "appli", "fals"], "A_body": "$evalAsync triggers a digest, and is unsuitable when it is expected that a\ndigest should not occur.\n\nBREAKING CHANGE\n\nPreviously, even if `invokeApply` was set to false, a $rootScope digest would occur during promise resolution. Workarounds include manually triggering `$scope.$apply()`, or returning `$q.defer().promise` from a promise callback, and resolving or rejecting it when appropriate.\n\n``` js\nvar interval = $interval(function() {\n  if (someRequirementFulfilled) {\n    $interval.cancel(interval);\n    $scope.$apply();\n  }\n}, 100, 0, false);\n```\n\nor:\n\n``` js\nvar interval = $interval(function (idx) {\n  // make the magic happen\n}, 1000, 10, false);\ninterval.then(function(idx) {\n  var deferred = $q.defer();\n  // do the asynchronous magic --- $evalAsync will cause a digest and cause\n  // bindings to update.\n  return deferred.promise;\n});\n```\n", "A_clean_body": ["evalasync", "eval", "async", "trigger", "digest", "unsuit", "when", "it", "expect", "that", "digest", "not", "occur", "break", "chang", "previous", "even", "invokeappli", "invok", "appli", "wa", "set", "fals", "rootscop", "root", "scope", "digest", "would", "occur", "dure", "promis", "resolut", "workaround", "includ", "manual", "trigger", "scope", "appli", "or", "return", "defer", "promis", "promis", "callback", "resolv", "or", "reject", "it", "when", "appropri", "js", "var", "interv", "interv", "function", "somerequirementfulfil", "some", "requir", "fulfil", "interv", "cancel", "interv", "scope", "appli", "100", "fals", "or", "js", "var", "interv", "interv", "function", "idx", "make", "magic", "happen", "1000", "10", "fals", "interv", "then", "function", "idx", "var", "defer", "defer", "asynchron", "magic", "evalasync", "eval", "async", "will", "caus", "digest", "caus", "bind", "updat", "return", "defer", "promis"], "B_body": "Becasue calling the interval function relies on a promise notify\nhandler, the interval function would not get called without \ninvokeApply being true. With this update, if invokeApply is false, the\nfunction is called normally.\n\nCloses #5902\n", "B_clean_body": ["becasu", "call", "interv", "function", "reli", "promis", "notifi", "handler", "interv", "function", "would", "not", "get", "call", "without", "invokeappli", "invok", "appli", "be", "true", "thi", "updat", "invokeappli", "invok", "appli", "fals", "function", "call", "normal", "close", "5902"], "title_sim": [0.9092138217202511], "body_sim": [0.5793602584589433], "file_list_sim": 0.25, "overlap_files_len": 2, "code_sim": [0.503624878972355, 0.6992265485217921], "location_sim": [0.3930635838150289, 0.8947368421052632], "pattern": 0, "time": 156}, {"A_title": "Add fraction size parameter to currencyFilter", "A_clean_title": ["add", "fraction", "size", "paramet", "currencyfilt", "currenc", "filter"], "B_title": "Add precision for currency filter", "B_clean_title": ["add", "precis", "currenc", "filter"], "A_body": "feat(filter): currencyFilter and numberFilter should have same fraction behavior\n\ncurrencyFilter now accepts fractionSize so it behaves \"similar\" to a numberFilter, it even uses locale patterns by default.\n", "A_clean_body": ["feat", "filter", "currencyfilt", "currenc", "filter", "numberfilt", "number", "filter", "have", "same", "fraction", "behavior", "currencyfilt", "currenc", "filter", "now", "accept", "fractions", "fraction", "size", "so", "it", "behav", "similar", "numberfilt", "number", "filter", "it", "even", "use", "local", "pattern", "by", "default"], "B_body": "Depends on #5672. \n\nThis adds the fractionSize parameter to the currency filter. \n\nFor some, the common fractionSize of 2 needs to be overridden in certain scenarios.  \n\nExample: gas pricing in the US where the price is actually accurate to 3 decimal places.\n", "B_clean_body": ["depend", "5672", "thi", "add", "fractions", "fraction", "size", "paramet", "currenc", "filter", "some", "common", "fractions", "fraction", "size", "need", "overridden", "certain", "scenario", "exampl", "ga", "price", "us", "where", "price", "actual", "accur", "decim", "place"], "title_sim": [0.3125022169714596], "body_sim": [0.18857762718979973], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.5597585721651026, 0.8135516977198597], "location_sim": [0.20100502512562815, 0.6451612903225806], "pattern": 0, "time": 136}, {"A_title": "docs(ngif): fixes minor typo", "A_clean_title": ["doc", "ngif", "fix", "minor", "typo"], "B_title": "docs(directive): fixed a minor typo", "B_clean_title": ["doc", "direct", "fix", "minor", "typo"], "A_body": "Fixes minor misspelling in the Parameters detail section\n", "A_clean_body": ["fix", "minor", "misspel", "paramet", "detail", "section"], "B_body": "Fixed a minor typo:\n- eleent => element\n", "B_clean_body": ["fix", "minor", "typo", "eleent", "element"], "title_sim": [0.8111544800117396], "body_sim": [0.5059224526845134], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 7}, {"A_title": "feat(ngOptions): add support for disabling an option", "A_clean_title": ["feat", "ngoption", "ng", "option", "add", "support", "disabl", "option"], "B_title": "feat(select): ngOptions support disabling options", "B_clean_title": ["feat", "select", "ngoption", "ng", "option", "support", "disabl", "option"], "A_body": "This patch adds support for disabling options based on model values. The\n\"disable when\" syntax allows for listening to changes on those model values,\nin order to dynamically enable and disable the options.\n\nThe changes prevent disabled options from being written to the selectCtrl\nfrom the model. If a disabled selection is present on the model, normal\nunknown or empty functionality kicks in.\n\ncloses #638\n", "A_clean_body": ["thi", "patch", "add", "support", "disabl", "option", "base", "model", "valu", "disabl", "when", "syntax", "allow", "listen", "chang", "those", "model", "valu", "order", "dynam", "enabl", "disabl", "option", "chang", "prevent", "disabl", "option", "be", "written", "selectctrl", "select", "ctrl", "model", "disabl", "select", "present", "model", "normal", "unknown", "or", "empti", "function", "kick", "close", "638"], "B_body": "Extend the ngOptions DSL to support disabling options. Since <option>\nelements are generated by ngOptions, we cannot use ngDisabled in this\nscenario. Via extend the DSL, user have control over if a option\nis diabled on arbitrary condition.\n\nThis commit insert a `disable if cond` match syntax into\nNG_OPTIONS_REGEXP, change other match index accordingly, add disabled\nattribute to null option element and newly cloned option elements,\nadd 2 new unit tests, and change docs as well.\n\nCloses #638\n", "B_clean_body": ["extend", "ngoption", "ng", "option", "dsl", "support", "disabl", "option", "sinc", "option", "element", "are", "gener", "by", "ngoption", "ng", "option", "we", "not", "use", "ngdisabl", "ng", "disabl", "thi", "scenario", "via", "extend", "dsl", "user", "have", "control", "over", "option", "diabl", "arbitrari", "condit", "thi", "commit", "insert", "disabl", "cond", "match", "syntax", "into", "ng", "option", "regexp", "chang", "other", "match", "index", "accordingli", "add", "disabl", "attribut", "null", "option", "element", "newli", "clone", "option", "element", "add", "new", "unit", "test", "chang", "doc", "as", "well", "close", "638"], "title_sim": [0.9457708550707372], "body_sim": [0.6629828741588378], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.7212345239388879, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 101}, {"A_title": "fix($parse): ternary and assignment operator precedence", "A_clean_title": ["fix", "pars", "ternari", "assign", "oper", "preced"], "B_title": "fix($parse): ternary should give assignment precedence in middle and right expressions", "B_clean_title": ["fix", "pars", "ternari", "give", "assign", "preced", "middl", "right", "express"], "A_body": "Properly handle assignemnts inside ternary operators\n\nCloses #8484\n", "A_clean_body": ["properli", "handl", "assignemnt", "insid", "ternari", "oper", "close", "8484"], "B_body": "Closes #8484\n", "B_clean_body": ["close", "8484"], "title_sim": [0.6065528187302847], "body_sim": [0.7113296583835791], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.17394265488975486, 0.17394265488975486], "location_sim": [0.8409090909090909, 0.8409090909090909], "pattern": 1, "time": 0}, {"A_title": "fix(ngTouch): prevent touchmove from canceling a click", "A_clean_title": ["fix", "ngtouch", "ng", "touch", "prevent", "touchmov", "cancel", "click"], "B_title": "fix(ngTouch): don't prevent the click event after a touchmove", "B_clean_title": ["fix", "ngtouch", "ng", "touch", "n't", "prevent", "click", "event", "after", "touchmov"], "A_body": "Usually browsers fire touchstart and touchend, and ng-click works.\nBut some browsers (I only experienced it on iOS) fire touchmove\nbetween touchstart and touchend, and so before this fix ng-click\nwould not work in this case.\nAlso, the test for touchmove was incorrect: it did not test\nthe touchmove event itself, but rather the coordinates change,\nwhich is handled elsewhere. If the coordinates are the same and\nthe interval is not too long, ng-click should fire, no matter if\nthere was a touchmove or not.\n", "A_clean_body": ["usual", "browser", "fire", "touchstart", "touchend", "ng", "click", "work", "but", "some", "browser", "onli", "experienc", "it", "io", "os", "fire", "touchmov", "between", "touchstart", "touchend", "so", "befor", "thi", "fix", "ng", "click", "would", "not", "work", "thi", "case", "also", "test", "touchmov", "wa", "incorrect", "it", "did", "not", "test", "touchmov", "event", "itself", "but", "rather", "coordin", "chang", "which", "handl", "elsewher", "coordin", "are", "same", "interv", "not", "too", "long", "ng", "click", "fire", "no", "matter", "there", "wa", "touchmov", "or", "not"], "B_body": "Remove the touchmove handler so that resetState is not called on touchmove. The touchend event handler already prevents the click from being triggered if the distance moved exceeds the MOVE_TOLERANCE, so detection of touchmove is not needed. Previously, because of resetState on touchmove, the click would not be triggered even if the event coordinates changed by only 1px or 2px, which seems to be very common for taps on mobile browsers.\n", "B_clean_body": ["remov", "touchmov", "handler", "so", "that", "resetst", "reset", "state", "not", "call", "touchmov", "touchend", "event", "handler", "alreadi", "prevent", "click", "be", "trigger", "distanc", "move", "exce", "move", "toler", "so", "detect", "touchmov", "not", "need", "previous", "becaus", "resetst", "reset", "state", "touchmov", "click", "would", "not", "trigger", "even", "event", "coordin", "chang", "by", "onli", "1px", "or", "2px", "which", "seem", "veri", "common", "tap", "mobil", "browser"], "title_sim": [0.7178752200062409], "body_sim": [0.47415589947745296], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.011639890667634578, 0.011639890667634578], "location_sim": [0.7741935483870968, 0.7741935483870968], "pattern": 0, "time": 40}, {"A_title": "feat(controller): support as instance syntax", "A_clean_title": ["feat", "control", "support", "as", "instanc", "syntax"], "B_title": "feat(ng-controller): support as instance syntax", "B_clean_title": ["feat", "ng", "control", "support", "as", "instanc", "syntax"], "A_body": "Support `ng-controller=\"MyController as my\"` syntax\nwhich publishes the controller instance to the\ncurrent scope.\n\nAlso supports exporting a controller defined with route:\n\n``` javascript\nangular.module('routes', [], function($routeProvider) {\n  $routeProvider.when('/home', {controller: 'Ctrl as home', templateUrl: '...'});\n});\n```\n## I think we should change the docs to recommend only single way of doing this.\n", "A_clean_body": ["support", "ng", "controller=", "mycontrol", "my", "control", "as", "my", "syntax", "which", "publish", "control", "instanc", "current", "scope", "also", "support", "export", "control", "defin", "rout", "javascript", "angular", "modul", "'rout", "function", "routeprovid", "rout", "provid", "routeprovid", "when", "rout", "provid", "home", "control", "'ctrl", "as", "home", "templateurl", "templat", "url", "think", "we", "chang", "doc", "recommend", "onli", "singl", "way", "do", "thi"], "B_body": "Support ng-controller=\"MyController as my\" syntax\nwhich publishes the controller instance to the \ncurrent scope.\n", "B_clean_body": ["support", "ng", "controller=", "mycontrol", "my", "control", "as", "my", "syntax", "which", "publish", "control", "instanc", "current", "scope"], "title_sim": [0.9709396675205209], "body_sim": [0.6184273446655035], "file_list_sim": 1.0, "overlap_files_len": 4, "code_sim": [0.9706903226433045, 0.9706903226433045], "location_sim": [1.0, 1.0], "pattern": 0, "time": 284}]