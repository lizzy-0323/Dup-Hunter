[{"A_title": "Reduce `serialize` in `changed_in_place?`", "A_clean_title": ["reduc", "serial", "chang", "place"], "B_title": "PostgreSQL JSONB columns do not preserve the key order of hashes", "B_clean_title": ["postgresql", "postgr", "sql", "jsonb", "column", "not", "preserv", "key", "order", "hash"], "A_body": "If `raw_old_value` is needed `deserialize` to normalization, unneeded\r\n`serialize` again because `new_value` is deserialized value.", "A_clean_body": ["raw", "old", "valu", "need", "deseri", "normal", "unneed", "serial", "again", "becaus", "new", "valu", "deseri", "valu"], "B_body": "### Summary\r\n\r\nPostgreSQL JSONB columns do not preserve the key order of hashes\r\n\r\nhttps://www.postgresql.org/docs/9.6/static/datatype-json.html\r\n\r\nDue to this setting a JSONB column to the same hash twice can cause `model.changed?` to return false positives\r\n", "B_clean_body": ["summari", "postgresql", "postgr", "sql", "jsonb", "column", "not", "preserv", "key", "order", "hash", "http", "postgresql", "json", "html", "www", "org", "doc", "static", "datatyp", "due", "thi", "set", "jsonb", "column", "same", "hash", "twice", "caus", "model", "chang", "return", "fals", "posit"], "title_sim": [0.011939243182696775], "body_sim": [0.03001488885032949], "file_list_sim": 0.2857142857142857, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "Properly support reloading for Action Cable channels", "A_clean_title": ["properli", "support", "reload", "action", "cabl", "channel"], "B_title": "`channel_class_names` ignores channel namespaces", "B_clean_title": ["channel", "class", "name", "ignor", "channel", "namespac"], "A_body": "Basically: eliminate places that ActionCable was holding long-term references to channel classes (and ApplicationCable::Connection).\n", "A_clean_body": ["basic", "elimin", "place", "that", "actionc", "action", "cabl", "wa", "hold", "long", "term", "refer", "channel", "class", "applicationc", "applic", "cabl", ":connect"], "B_body": "Fixes #25224.\n\nSay you have `app/channels/test/room_channel.rb` and\n`app/channels/room_channel.rb` defined.\n\nBefore:\n\n``` ruby\nirb(main):001:0> ActionCable.server.config.channel_class_names\n=> [\"RoomChannel\", \"RoomChannel\"]\n```\n\nAfter:\n\n``` ruby\nirb(main):001:0> ActionCable.server.config.channel_class_names\n=> [\"RoomChannel\", \"Test::RoomChannel\"]\n```\n", "B_clean_body": ["fix", "25224", "say", "you", "have", "rb", "channel", "app", "channel", "test", "room", "rb", "channel", "app", "channel", "room", "defin", "befor", "rubi", "irb", "main", ":001:0", "actionc", "server", "config", "action", "cabl", "channel", "class", "name", "roomchannel", "room", "channel", "roomchannel", "room", "channel", "after", "rubi", "irb", "main", ":001:0", "actionc", "server", "config", "action", "cabl", "channel", "class", "name", "roomchannel", "room", "channel", "test", ":roomchannel", ":room", "channel"], "title_sim": [0.014907304560083292], "body_sim": [0.5913232285082691], "file_list_sim": 0.2727272727272727, "overlap_files_len": 3, "code_sim": [0.01254669881059017, 0.018618271333865365], "location_sim": [0.36666666666666664, 0.5365853658536586], "pattern": 0, "time": 1}, {"A_title": "Detect in-place changes on mutable AR attributes", "A_clean_title": ["detect", "place", "chang", "mutabl", "ar", "attribut"], "B_title": "Serialized comparing", "B_clean_title": ["serial", "compar"], "A_body": "We have several mutable types on Active Record now. (Serialized, JSON,\nHStore). We need to be able to detect if these have been modified in\nplace.\n\nSerialized attributes now \"just work\" and no longer need to be saved 100% of the time.\n\nFixes #8328\n", "A_clean_body": ["we", "have", "sever", "mutabl", "type", "activ", "record", "now", "serial", "json", "hstore", "store", "we", "need", "abl", "detect", "these", "have", "been", "modifi", "place", "serial", "attribut", "now", "just", "work", "no", "longer", "need", "save", "100", "time", "fix", "8328"], "B_body": "For models with serialized attributes, use the hash code to determine if a column has changed.\n\nOnly save changed columns to database.\n\nThis is in response to rails#8328\n\n---\n\nI found working with `ActiveRecord` and the `Dirty` concept a little tricky because `Core` is so high in the ancestors chain. Since `Core` comes before `Dirty` or `Serialized`, the only extension point is to modify `Core` or the `Behavior` injected by the `serialize :attribute` call. This PR is the latter.\n\nThanks again to @rafaelfranca for your previous review.\n\n--Keenan\n", "B_clean_body": ["model", "serial", "attribut", "use", "hash", "code", "determin", "column", "ha", "chang", "onli", "save", "chang", "column", "databas", "thi", "respons", "rail", "8328", "found", "work", "activerecord", "activ", "record", "dirti", "concept", "littl", "tricki", "becaus", "core", "so", "high", "ancestor", "chain", "sinc", "core", "come", "befor", "dirti", "or", "serial", "onli", "extens", "point", "modifi", "core", "or", "behavior", "inject", "by", "serial", "attribut", "call", "thi", "pr", "latter", "thank", "again", "rafaelfranca", "your", "previou", "review", "keenan"], "title_sim": [-0.04181768409764312], "body_sim": [0.43948257417753833], "file_list_sim": 0.21428571428571427, "overlap_files_len": 3, "code_sim": [0.39130242607534915, 0.38815818510126887], "location_sim": [0.12440191387559808, 0.25], "pattern": 1, "time": 173}, {"A_title": "Removing composed_of", "A_clean_title": ["remov", "compos"], "B_title": "use read_attribute to allow scoping by an aggregation's attribute value", "B_clean_title": ["use", "read", "attribut", "allow", "scope", "by", "aggreg", "'s", "attribut", "valu"], "A_body": "composed_of is a complicated feature that's rarely used. So let's deprecate it in 3-2 and remove it in master.\n\nRelated: #6742\n\n/cc @jonleighton @tenderlove\n", "A_clean_body": ["compos", "complic", "featur", "that", "'s", "rare", "use", "so", "let", "'s", "deprec", "it", "remov", "it", "master", "relat", "6742", "cc", "jonleighton", "tenderlov"], "B_body": "The following error is produced in `Arel` when an aggregation is provided as the `:scope` parameter to `validates_uniqueness_of`:\n\n```\nTypeError: Cannot visit CustomClassWithoutRecognizedAncestors\n    from /usr/local/Cellar/ruby/1.9.3-p125/lib/ruby/gems/1.9.1/gems/arel-3.0.2/lib/arel/visitors/visitor.rb:25:in `rescue in visit'\n    from /usr/local/Cellar/ruby/1.9.3-p125/lib/ruby/gems/1.9.1/gems/arel-3.0.2/lib/arel/visitors/visitor.rb:19:in `visit'\n    ...\n```\n\n`ActiveRecord` uses the aggregation's value object as the scope value instead of its actual attribute value.\n\nThe attached code resolves this issue by using the attribute value after type cast but before conversion.\n", "B_clean_body": ["follow", "error", "produc", "arel", "when", "aggreg", "provid", "as", "scope", "paramet", "valid", "uniqu", "typeerror", "type", "error", "not", "visit", "customclasswithoutrecognizedancestor", "custom", "class", "without", "recogn", "ancestor", "rb:25", "usr", "local", "cellar", "rubi", "p125", "lib", "rubi", "gem", "gem", "arel", "lib", "arel", "visitor", "visitor", "rescu", "visit'", "rb:19", "usr", "local", "cellar", "rubi", "p125", "lib", "rubi", "gem", "gem", "arel", "lib", "arel", "visitor", "visitor", "visit'", "activerecord", "activ", "record", "use", "aggreg", "'s", "valu", "object", "as", "scope", "valu", "instead", "it", "actual", "attribut", "valu", "attach", "code", "resolv", "thi", "issu", "by", "attribut", "valu", "after", "type", "cast", "but", "befor", "convers"], "title_sim": [-0.025036374708202705], "body_sim": [0.11684240919077997], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 103}, {"A_title": "Make delegation work with the reserved words passed to `:to`", "A_clean_title": ["make", "deleg", "work", "reserv", "word", "pass"], "B_title": "Module#delegate cannot delegate to receivers named :args or :block for normal methods or :arg for setters.", "B_clean_title": ["modul", "deleg", "not", "deleg", "receiv", "name", "arg", "or", "block", "normal", "method", "or", "arg", "setter"], "A_body": "Fixes #16956.\n", "A_clean_body": ["fix", "16956"], "B_body": "I found this bug while trying to delegate to a method called `block`. Consider the following code:\n\n``` ruby\nrequire 'active_support/core_ext'\n\nclass Foo\n  def block\n    @block ||= Object.new\n  end  \n\n  delegate :dup, to: :block\nend  \n\nFoo.new.dup\n```\n\nI expected this to return a new instance of `Object`, but instead it raised the following error:\n\n```\nTypeError: can't dup NilClass\n```\n\nThis is because `block` is an argument in the dynamically generated `dup` method on `Foo`. The signature of that method looks like this:\n\n``` ruby\nclass Foo\n  def dup(*args, &block)\n    # ...\n  end\nend\n```\n\nNo block is given to the `dup` call, so `block` is nil, thus the error. The same problem exists with delegating to `args` and delegating to `arg` if the method you're delegating happens to be an attribute writer.\n\nI'm not super thrilled with how the tests turned out and would appreciate suggestions on how to make them a bit clearer and possibly shorter, but they fail without the patch and pass with it.\n\nPlease let me know if there's anything I should have done differently.\n", "B_clean_body": ["found", "thi", "bug", "while", "tri", "deleg", "method", "call", "block", "consid", "follow", "code", "rubi", "requir", "'activ", "ext'", "support", "core", "class", "foo", "def", "block", "block", "object", "new", "end", "deleg", "dup", "block", "end", "foo", "new", "dup", "expect", "thi", "return", "new", "instanc", "object", "but", "instead", "it", "rais", "follow", "error", "typeerror", "type", "error", "ca", "n't", "dup", "nilclass", "nil", "class", "thi", "becaus", "block", "argument", "dynam", "gener", "dup", "method", "foo", "signatur", "that", "method", "look", "like", "thi", "rubi", "class", "foo", "def", "dup", "*arg", "block", "end", "end", "no", "block", "given", "dup", "call", "so", "block", "nil", "thu", "error", "same", "problem", "exist", "deleg", "arg", "deleg", "arg", "method", "you", "'re", "deleg", "happen", "attribut", "writer", "'m", "not", "super", "thrill", "how", "test", "turn", "out", "would", "appreci", "suggest", "how", "make", "them", "bit", "clearer", "possibl", "shorter", "but", "they", "fail", "without", "patch", "pass", "it", "pleas", "let", "me", "know", "there", "'s", "anyth", "have", "done", "differ"], "title_sim": [0.00196401049089864], "body_sim": [-0.021817294339210966], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.1267679389195974, 0.11593284363823352], "location_sim": [0.33980582524271846, 0.3723404255319149], "pattern": 0, "time": 446}, {"A_title": "WIP: Don't mutate the racall hash as it's not ours", "A_clean_title": ["wip", "n't", "mutat", "racal", "hash", "as", "it", "'s", "not", "our"], "B_title": "Refactor handling of :action default in routing", "B_clean_title": ["refactor", "handl", "action", "default", "rout"], "A_body": "Fixes #24438\n", "A_clean_body": ["fix", "24438"], "B_body": "The longstanding convention in Rails is that if the :action parameter is missing or nil then it defaults to 'index'. Up until Rails 5.0.0.beta1 this was handled slightly differently than other routing defaults by\ndeleting it from the route options and adding it to the recall parameters.\n\nWith the recent focus of removing unnecessary duplications this has exposed a problem in this strategy - we are now mutating the request's path parameters and causing problems for later url generation. This will typically affect url_for rather a named url helper since the latter explicitly pass :controller, :action, etc.\n\nThe fix is to add a default for :action in the route class if the path contains an :action segment and no default is passed. This change also revealed an issue with the parameterized part expiry in that it doesn't\nfollow a right to left order - as soon as a dynamic segment is required then all other segments become required.\n", "B_clean_body": ["longstand", "convent", "rail", "that", "action", "paramet", "miss", "or", "nil", "then", "it", "default", "'index", "up", "until", "rail", "beta1", "thi", "wa", "handl", "slightli", "differ", "than", "other", "rout", "default", "by", "delet", "it", "rout", "option", "ad", "it", "recal", "paramet", "recent", "focu", "remov", "unnecessari", "duplic", "thi", "ha", "expos", "problem", "thi", "strategi", "we", "are", "now", "mutat", "request", "'s", "path", "paramet", "caus", "problem", "later", "url", "gener", "thi", "will", "typic", "affect", "url", "rather", "name", "url", "helper", "sinc", "latter", "explicitli", "pass", "control", "action", "etc", "fix", "add", "default", "action", "rout", "class", "path", "contain", "action", "segment", "no", "default", "pass", "thi", "chang", "also", "reveal", "issu", "parameter", "part", "expiri", "that", "it", "doesn't", "follow", "right", "left", "order", "as", "soon", "as", "dynam", "segment", "requir", "then", "all", "other", "segment", "becom", "requir"], "title_sim": [0.004307095181059386], "body_sim": [0.08660701179134314], "file_list_sim": 0.375, "overlap_files_len": 3, "code_sim": [0.3450765887243021, 0.11632083008633387], "location_sim": [0.05803571428571429, 0.10833333333333334], "pattern": -1, "time": 78}, {"A_title": "remove unnecessary loop when loading fixtures", "A_clean_title": ["remov", "unnecessari", "loop", "when", "load", "fixtur"], "B_title": "Use the correct connection for reset_pk_sequence", "B_clean_title": ["use", "correct", "connect", "reset", "pk", "sequenc"], "A_body": "", "A_clean_body": [], "B_body": "When a fs.model_class.connection uses a different database than connection, connection.reset_pk_sequence will fail with an exception causing fixture load to rollback. This is reproducible for any ActiveRecord::Base class that calls establish_connection with a different database.\n", "B_clean_body": ["when", "fs", "connect", "model", "class", "use", "differ", "databas", "than", "connect", "connect", "reset", "pk", "sequenc", "will", "fail", "except", "caus", "fixtur", "load", "rollback", "thi", "reproduc", "ani", "activerecord", "activ", "record", ":base", "class", "that", "call", "establish", "connect", "differ", "databas"], "title_sim": [0.00684072856517342], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.72, 0.72], "pattern": 0, "time": 18}, {"A_title": "Removing composed_of", "A_clean_title": ["remov", "compos"], "B_title": "Raise error when setting aggregation to nil when nil is not allowed", "B_clean_title": ["rais", "error", "when", "set", "aggreg", "nil", "when", "nil", "not", "allow"], "A_body": "composed_of is a complicated feature that's rarely used. So let's deprecate it in 3-2 and remove it in master.\n\nRelated: #6742\n\n/cc @jonleighton @tenderlove\n", "A_clean_body": ["compos", "complic", "featur", "that", "'s", "rare", "use", "so", "let", "'s", "deprec", "it", "remov", "it", "master", "relat", "6742", "cc", "jonleighton", "tenderlov"], "B_body": "The test test_nil_raises_error_when_allow_nil_is_false is only passing because the convert proc is throwing an error. If this proc did not throw an error, then no exception would be raised when assigning nil to an aggregation that does not allow nil.\n\nThis changes assigning nil to an aggregation that does not allow it to raise a ActiveRecord::AggregationNilNotPermittedError.\n", "B_clean_body": ["test", "test", "nil", "rais", "error", "when", "allow", "nil", "fals", "onli", "pass", "becaus", "convert", "proc", "throw", "error", "thi", "proc", "did", "not", "throw", "error", "then", "no", "except", "would", "rais", "when", "assign", "nil", "aggreg", "that", "not", "allow", "nil", "thi", "chang", "assign", "nil", "aggreg", "that", "not", "allow", "it", "rais", "activerecord", "activ", "record", ":aggregationnilnotpermittederror", ":aggreg", "nil", "not", "permit", "error"], "title_sim": [0.034229256677373365], "body_sim": [0.08419240258240819], "file_list_sim": 0.16666666666666666, "overlap_files_len": 3, "code_sim": [0.0, 0.0], "location_sim": [0.03914590747330961, 0.1864406779661017], "pattern": 0, "time": 305}, {"A_title": "autosave_association issue that occurs when table has unique index (resubmission)", "A_clean_title": ["autosav", "associ", "issu", "that", "occur", "when", "tabl", "ha", "uniqu", "index", "resubmiss"], "B_title": " #7347: Destroy marked child records before new child records inserted", "B_clean_title": ["7347", "destroy", "mark", "child", "record", "befor", "new", "child", "record", "insert"], "A_body": "This is a resubmission of #10183.\n#10183 was merged and subsequently unmerged due to test failing for MySQL.\n\nComments [here](https://github.com/rails/rails/commit/e8727d37fc49d5bf9976c3cb5c46badb92cf4ced#commitcomment-3047920)\n\nFor this one, I have incorporated the changes suggested by @rafaelfranca in c0a07af.\nThis change however still changes the schema inside the test and works around that by setting `use_transactional_fixtures` to `false` no matter which connection adapter is in use for that test class.\n\nIs this OK or would it be preferable for me to alter the actual schema (and corresponding models) by adding a unique index on a table there?\nI started down this path, but it quickly became more complex than I hoped (i.e. changing the existing schema breaking unrelated test).  I'll work through it though, if that is preferable.\ncc @jonleighton \n\nThanks.\n\nFrom original #10183 description:\n\"Per the comments in pull #3329, \nIf you have a table with a unique field index, and you mark a record for destruction, and you build a new record with the same value as the unique field, then when you call `save`, a database level unique index error will be thrown. \n\nThis happens because the record destruction happens after record creation.\n\nIn this pull request, I moved the record destruction ahead of the record creation.\n\nThis is my first pull request ever, so please go easy on me.  :smile: \"\n", "A_clean_body": ["thi", "resubmiss", "10183", "10183", "wa", "merg", "subsequ", "unmerg", "due", "test", "fail", "mysql", "my", "sql", "comment", "here", "http", "github", "com", "rail", "rail", "commit", "e8727d37fc49d5bf9976c3cb5c46badb92cf4c", "commitcom", "3047920", "thi", "one", "have", "incorpor", "chang", "suggest", "by", "rafaelfranca", "c0a07af", "thi", "chang", "howev", "still", "chang", "schema", "insid", "test", "work", "around", "that", "by", "set", "use", "transact", "fixtur", "fals", "no", "matter", "which", "connect", "adapt", "use", "that", "test", "class", "thi", "ok", "or", "would", "it", "prefer", "me", "alter", "actual", "schema", "correspond", "model", "by", "ad", "uniqu", "index", "tabl", "there", "start", "down", "thi", "path", "but", "it", "quickli", "becam", "more", "complex", "than", "hope", "chang", "exist", "schema", "break", "unrel", "test", "'ll", "work", "through", "it", "though", "that", "prefer", "cc", "jonleighton", "thank", "origin", "10183", "descript", "per", "comment", "pull", "3329", "you", "have", "tabl", "uniqu", "field", "index", "you", "mark", "record", "destruct", "you", "build", "new", "record", "same", "valu", "as", "uniqu", "field", "then", "when", "you", "call", "save", "databas", "level", "uniqu", "index", "error", "will", "thrown", "thi", "happen", "becaus", "record", "destruct", "happen", "after", "record", "creation", "thi", "pull", "request", "move", "record", "destruct", "ahead", "record", "creation", "thi", "my", "first", "pull", "request", "ever", "so", "pleas", "go", "easi", "me", "smile"], "B_body": "This pull request should resolve #7347 issue.\n\nThere was a bug/annoying problem when:\n1. there are some child records for has many association marked for destruction,\n2. in the the same transaction added new child records which conflicts with marked records by schema constraints like unique values for some attributes,\n3. on save there is Rollback Exception, because new conflicted records have been inserted before marked for destruction records are destroyed.\n\nExample code: https://gist.github.com/pftg/5160669\n", "B_clean_body": ["thi", "pull", "request", "resolv", "7347", "issu", "there", "wa", "bug", "annoy", "problem", "when", "there", "are", "some", "child", "record", "ha", "mani", "associ", "mark", "destruct", "same", "transact", "ad", "new", "child", "record", "which", "conflict", "mark", "record", "by", "schema", "constraint", "like", "uniqu", "valu", "some", "attribut", "save", "there", "rollback", "except", "becaus", "new", "conflict", "record", "have", "been", "insert", "befor", "mark", "destruct", "record", "are", "destroy", "exampl", "code", "http", "github", "gist", "com", "pftg", "5160669"], "title_sim": [0.06098669267923429], "body_sim": [0.42268266602585547], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.8156042844799108, 0.8127292856986944], "location_sim": [0.6666666666666666, 0.780952380952381], "pattern": -1, "time": 48}, {"A_title": "Run integration tests through the app's executor", "A_clean_title": ["run", "integr", "test", "through", "app", "'s", "executor"], "B_title": "ConncectionPool: Prevent reuse of a connection with open transactions", "B_clean_title": ["conncectionpool", "conncect", "pool", "prevent", "reus", "connect", "open", "transact"], "A_body": "This ensures that the \"unit of computation\" is an entire test, instead\nof the request. This allows us to skip, for example, connection pooling.\nThis ensures that the same connection is used for the entire test.\n\nWe should arguably do this for all tests, but this level is the only\nplace that we have an obvious lifecycle to hook into.\n\nI think there's still an underlying problem to address, which is that in\ngeneral we shouldn't release a connection with an open transaction that\nhasn't been poisoned back into the pool. However, that's a slightly\nlarger change that can be addressed later.\n\nFixes #24004 (though this may require an upstream change for RSpec)\nFixes #23989\nFixes #24491\nClose #24500\nClose #24599\n", "A_clean_body": ["thi", "ensur", "that", "unit", "comput", "entir", "test", "instead", "request", "thi", "allow", "us", "skip", "exampl", "connect", "pool", "thi", "ensur", "that", "same", "connect", "use", "entir", "test", "we", "arguabl", "thi", "all", "test", "but", "thi", "level", "onli", "place", "that", "we", "have", "obviou", "lifecycl", "hook", "into", "think", "there", "'s", "still", "underli", "problem", "address", "which", "that", "gener", "we", "n't", "releas", "connect", "open", "transact", "that", "ha", "n't", "been", "poison", "back", "into", "pool", "howev", "that", "'s", "slightli", "larger", "chang", "that", "address", "later", "fix", "24004", "though", "thi", "may", "requir", "upstream", "chang", "rspec", "spec", "fix", "23989", "fix", "24491", "close", "24500", "close", "24599"], "B_body": "Checking in a connection with an open transaction can lead to flaky issues as thread started the transaction might or might not get back the same connection.\n\nSee #24491\n", "B_clean_body": ["check", "connect", "open", "transact", "lead", "flaki", "issu", "as", "thread", "start", "transact", "might", "or", "might", "not", "get", "back", "same", "connect", "see", "24491"], "title_sim": [0.021606164754651144], "body_sim": [0.44845155643481655], "file_list_sim": 0.07692307692307693, "overlap_files_len": 1, "code_sim": [0.11506189595369158, 0.0], "location_sim": [0.0915032679738562, 1.0], "pattern": 1, "time": 8}, {"A_title": "Use current database in MySQL's `table_exists?`", "A_clean_title": ["use", "current", "databas", "mysql", "my", "sql", "'s", "tabl", "exist"], "B_title": "Extract `data_source_sql` to refactor data source statements", "B_clean_title": ["extract", "data", "sourc", "sql", "refactor", "data", "sourc", "statement"], "A_body": "This is a minor regression from when we switched from using SHOW TABLES\r\nto querying the information_schema for `table_exists?`. SHOW TABLES by\r\ndefault querys the currently selected database but the current\r\nimplementation defaults to `@config[:database]` if no database name is\r\nprepended to the table name. This meant that if you issued a `USE`\r\nstatement to change database, `table_exists?` gives spurious results as\r\nit's still querying `@config[:database]`.\r\n\r\nThe solution is to use the MySQL `DATABASE()` function in place of\r\n`@config[:database]`.\r\n\r\nhttps://github.com/rails/rails/pull/18856#issuecomment-286064885", "A_clean_body": ["thi", "minor", "regress", "when", "we", "switch", "show", "tabl", "queri", "inform", "schema", "tabl", "exist", "show", "tabl", "by", "default", "queri", "current", "select", "databas", "but", "current", "implement", "default", "config", "databas", "no", "databas", "name", "prepend", "tabl", "name", "thi", "meant", "that", "you", "issu", "use", "statement", "chang", "databas", "tabl", "exist", "give", "spuriou", "result", "as", "it", "'s", "still", "queri", "config", "databas", "solut", "use", "mysql", "my", "sql", "databas", "function", "place", "config", "databas", "http", "github", "com", "rail", "rail", "pull", "18856", "issuecom", "286064885"], "B_body": "", "B_clean_body": [], "title_sim": [0.14962332692693014], "body_sim": [0.0], "file_list_sim": 0.1111111111111111, "overlap_files_len": 1, "code_sim": [0.0011519607910993382, 0.0], "location_sim": [0.07488986784140969, 0.2764227642276423], "pattern": 0, "time": 21}, {"A_title": "Fix collisions with before and after validation callbacks.", "A_clean_title": ["fix", "collis", "befor", "after", "valid", "callback"], "B_title": "Callback collision", "B_clean_title": ["callback", "collis"], "A_body": "This commit allows a user to do something like:\n\n``` ruby\n    before_validation :do_stuff, :on => [ :create, :update ]\n    after_validation :do_more, :on => [ :create, :update ]\n```\n\nThis addresses issue #6744.\n\nThis also uses the unit tests from mandrews/rails/@0f115f4012779ec8691d2c20ad3be8033861c1b0\n(lightly modified) \n", "A_clean_body": ["thi", "commit", "allow", "user", "someth", "like", "rubi", "befor", "valid", "stuff", "creat", "updat", "after", "valid", "more", "creat", "updat", "thi", "address", "issu", "6744", "thi", "also", "use", "unit", "test", "mandrew", "rail", "0f115f4012779ec8691d2c20ad3be8033861c1b0", "lightli", "modifi"], "B_body": "Rebased version of previous pull request see:\nhttps://github.com/rails/rails/pull/269\n", "B_clean_body": ["rebas", "version", "previou", "pull", "request", "see", "http", "github", "com", "rail", "rail", "pull", "269"], "title_sim": [0.7319788207279051], "body_sim": [0.0903250644542134], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.9550733517644149, 0.9969954205318199], "location_sim": [0.6355140186915887, 1.0], "pattern": -1, "time": 378}, {"A_title": "[Feedback] Implement Relation#or", "A_clean_title": ["feedback", "implement", "relat", "or"], "B_title": "Add `#any_of` query method to active_record", "B_clean_title": ["add", "ani", "queri", "method", "activ", "record"], "A_body": "This is an idea for another implementation of `Relation#or`, in order to\naddress some of the API concerns for the previous APIs. In order to make\nit clear what is being changed on the relation, the result is explictly\npassed to either `where` or `having`. This also removes the need to\ncheck for \"structural compatibility\", since you've told us what you're\nlooking to use from either one. If you give two relations that don't\nmake sense together, it's no different than passing column names to\n`where` that don't make sense, and will result in an\n`ActiveRecord::StatementInvalid`.\n\nAdditionally, any arguments which would be valid to `where` or `having`\nare valid arguments to `or`, as well, to allow for a slightly lighter\nweight alternative.\n\nExamples:\n\n``` ruby\ndef self.for_homepage\n  where(active.or(pinned))\nend\n\ndef self.for_homepage\n  where(active.or(pinned: true))\nend\n```\n\n/cc @matthewd \n", "A_clean_body": ["thi", "idea", "anoth", "implement", "relat", "or", "order", "address", "some", "api", "concern", "previou", "api", "ap", "order", "make", "it", "clear", "what", "be", "chang", "relat", "result", "explictli", "pass", "either", "where", "or", "have", "thi", "also", "remov", "need", "check", "structur", "compat", "sinc", "you", "'ve", "told", "us", "what", "you'r", "look", "use", "either", "one", "you", "give", "two", "relat", "that", "don't", "make", "sens", "togeth", "it", "'s", "no", "differ", "than", "pass", "column", "name", "where", "that", "n't", "make", "sens", "will", "result", "activerecord", "activ", "record", ":statementinvalid", ":statement", "invalid", "addit", "ani", "argument", "which", "would", "valid", "where", "or", "have", "are", "valid", "argument", "or", "as", "well", "allow", "slightli", "lighter", "weight", "altern", "exampl", "rubi", "def", "self", "homepag", "where", "activ", "or", "pin", "end", "def", "self", "homepag", "where", "activ", "or", "pin", "true", "end", "cc", "matthewd"], "B_body": "Note : This PR has been [extracted as a gem](https://github.com/oelmekki/activerecord_any_of), usable in both \nrails-3 and rails-4.\n\nThis method is inspired by [any_of from mongoid](http://two.mongoid.org/docs/querying/criteria.html#any_of).\n\nIt is hooked on `WhereChain`, just like `#not`, and allows to compute\nan `OR` like query that leverages AR's `#where` syntax:\n\n``` ruby\nmanual_removal = User.where(id: params[:users][:destroy_ids])\nusers = User.where.any_of(manual_removal, \"email like '%@example.com'\", {banned: true}).destroy_all\n```\n\nIt can be used anywhere `#where` is expected to work :\n\n``` ruby\nmanual_removal = User.where(id: params[:users][:destroy_ids])\nUser.where.any_of(manual_removal, \"email like '%@example.com'\", {banned: true})\n@company.users.where.any_of(manual_removal, \"email like '%@example.com'\", {banned: true})\nUser.where(offline: false).where.any_of( manual_removal, \"email like '%@example.com'\", {banned: true})\n```\n\nIts main purpose is to both :\n- remove the need to write a sql string when we want an `OR`\n- allow to write dynamic `OR` queries, which would be a pain with a string\n\nThere's also a negative version, `#none_of`. This will return all active\nusers :\n\n``` ruby\nbanned_users = User.where(banned: true)\nunconfirmed_users = User.where(\"confirmed_at IS NULL\")\nactive_users = User.where.none_of(banned_users, unconfirmed_users)\n```\n", "B_clean_body": ["note", "thi", "pr", "ha", "been", "extract", "as", "gem", "http", "github", "ani", "com", "oelmekki", "activerecord", "usabl", "both", "rail", "rail", "thi", "method", "inspir", "by", "ani", "mongoid", "http", "mongoid", "html", "two", "org", "doc", "queri", "criteria", "ani", "it", "hook", "wherechain", "where", "chain", "just", "like", "not", "allow", "comput", "or", "like", "queri", "that", "leverag", "ar", "'s", "where", "syntax", "rubi", "manual", "remov", "user", "where", "id", "param", "user", "destroy", "id", "user", "user", "where", "ani", "manual", "remov", "email", "like", "exampl", "com", "ban", "true", "destroy", "all", "it", "use", "anywher", "where", "expect", "work", "rubi", "manual", "remov", "user", "where", "id", "param", "user", "destroy", "id", "user", "where", "ani", "manual", "remov", "email", "like", "exampl", "com", "ban", "true", "compani", "user", "where", "ani", "manual", "remov", "email", "like", "exampl", "com", "ban", "true", "user", "where", "offlin", "fals", "where", "ani", "manual", "remov", "email", "like", "exampl", "com", "ban", "true", "it", "main", "purpos", "both", "remov", "need", "write", "sql", "string", "when", "we", "want", "or", "allow", "write", "dynam", "or", "queri", "which", "would", "pain", "string", "there", "'s", "also", "neg", "version", "none", "thi", "will", "return", "all", "activ", "user", "rubi", "ban", "user", "user", "where", "ban", "true", "unconfirm", "user", "user", "where", "confirm", "at", "null", "activ", "user", "user", "where", "none", "ban", "user", "unconfirm", "user"], "title_sim": [0.08827489827612205], "body_sim": [0.411583744947302], "file_list_sim": 0.375, "overlap_files_len": 3, "code_sim": [0.33216017732410785, 0.42116716847534397], "location_sim": [0.10141509433962265, 0.17768595041322313], "pattern": 0, "time": 598}, {"A_title": "Fixed a stack level too deep problem when validating a record.", "A_clean_title": ["fix", "stack", "level", "too", "deep", "problem", "when", "valid", "record"], "B_title": "Inverse of on build", "B_clean_title": ["invers", "build"], "A_body": "Autosaved associations validates nested records and if there are\ninverse associations it will result a recursion. Solution is to\nmark valid records so that they can be skipped when inverse\nassociated records are validated.\n", "A_clean_body": ["autosav", "associ", "valid", "nest", "record", "there", "are", "invers", "associ", "it", "will", "result", "recurs", "solut", "mark", "valid", "record", "so", "that", "they", "skip", "when", "invers", "associ", "record", "are", "valid"], "B_body": "### Problem\n\nWhen building a new relations(any type of relation) we need to setup the inverse_of association.\nSee https://github.com/rails/rails/issues/10371\n### Solution\n\nCall `.set_inverse_instance` on the association parent. Also remove `set_inverse_instance` from `add_to_target` on collection, as we build it before, and we dont need that extra call.\n\nreview @rafaelfranca @robin850\n", "B_clean_body": ["problem", "when", "build", "new", "relat", "ani", "type", "relat", "we", "need", "setup", "invers", "associ", "see", "http", "github", "com", "rail", "rail", "issu", "10371", "solut", "call", "set", "invers", "instanc", "associ", "parent", "also", "remov", "set", "invers", "instanc", "add", "target", "collect", "as", "we", "build", "it", "befor", "we", "dont", "need", "that", "extra", "call", "review", "rafaelfranca", "robin850"], "title_sim": [0.019006537486495306], "body_sim": [0.5039549893780708], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.25878540005175554, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 134}, {"A_title": "Revise the \"XML is not HTML\" test", "A_clean_title": ["revis", "xml", "not", "html", "test"], "B_title": "Ignore warnings caused by bundled gems", "B_clean_title": ["ignor", "warn", "caus", "by", "bundl", "gem"], "A_body": "It was depending on [a side-effect of the old html-scanner](https://github.com/rails/rails/blob/32553a2d76f4520e1456d5463c691310c22ebd2b/actionpack/lib/action_controller/vendor/html-scanner/html/document.rb#L31-L39), so was no longer proving what it intended to. Instead, assert more directly about the resulting observable difference.\r\n\r\n@kaspth should this test even exist, or is this now really rails-html-sanitizer's job?\r\n\r\n@maclover7 while we still ultimately want the Fixnum warning to go away, this removes the assertion it was tripping, freeing #27412", "A_clean_body": ["it", "wa", "depend", "side", "effect", "old", "html", "scanner", "http", "rb", "github", "scanner", "html", "document", "com", "rail", "rail", "blob", "32553a2d76f4520e1456d5463c691310c22ebd2b", "actionpack", "lib", "action", "control", "vendor", "html", "l31", "l39", "so", "wa", "no", "longer", "prove", "what", "it", "intend", "instead", "assert", "more", "directli", "about", "result", "observ", "differ", "kaspth", "thi", "test", "even", "exist", "or", "thi", "now", "realli", "rail", "html", "sanit", "'s", "job", "maclover7", "while", "we", "still", "ultim", "want", "fixnum", "warn", "go", "away", "thi", "remov", "assert", "it", "wa", "trip", "free", "27412"], "B_body": "Checking all warnings makes the test case fragile.\r\nFor example `test_should_not_impose_childless_html_tags_in_xml` failed\r\nby these warnings.\r\n\r\n```\r\n\"/home/travis/build/rails/rails/vendor/bundle/ruby/2.4.0/gems/\\\r\nnokogiri-1.6.8.1/lib/nokogiri/xml/document.rb:44: \\\r\nwarning: constant ::Fixnum is deprecated\\n\"\r\n```\r\n\r\nThis commit will suppress these noise.", "B_clean_body": ["check", "all", "warn", "make", "test", "case", "fragil", "exampl", "test", "not", "impos", "childless", "html", "tag", "xml", "fail", "by", "these", "warn", "home", "travi", "build", "rail", "rail", "vendor", "bundl", "rubi", "gem", "nokogiri", "rb:44", "lib", "nokogiri", "xml", "document", "warn", "constant", ":fixnum", "deprec", "thi", "commit", "will", "suppress", "these", "nois"], "title_sim": [0.05152912627744518], "body_sim": [0.27127521840385616], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.7105263157894737, 0.7105263157894737], "pattern": -1, "time": 5}, {"A_title": "Remove all ActiveRecord deprecations", "A_clean_title": ["remov", "all", "activerecord", "activ", "record", "deprec"], "B_title": "Passing `column` to `quote` method is deprecated", "B_clean_title": ["pass", "column", "quot", "method", "deprec"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.26992504019617986], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 208}, {"A_title": "[ci skip] add `controller:` argument to routing.md", "A_clean_title": ["ci", "skip", "add", "control", "argument", "rout", "md"], "B_title": "Singular Resources passing a symbole", "B_clean_title": ["singular", "resourc", "pass", "symbol"], "A_body": "This is a small amendment to the routing guide. There is an example in the guide that will raise an exception when used:\n\n``` ruby\nget 'profile', to: :show\n```\n\nPassing a `Symbol` to the `to:` argument for a `get` route method requires a `controller:` argument to also be defined. The documentation is missing the `controller:` argument, which leaving out raises:\n\n```\n$ rake routes\nArgumentError: Missing :controller key on routes definition, please check your routes.\n```\n\nAdding the `controller:` argument will map the route correctly without raising an exception:\n\n``` ruby\nget 'profile', to: :show, controller: 'users'\n```\n\n```\n$ rake routes\nprofile GET    /profile(.:format)  users#show\n```\n\nThis commit updates the example in the documentation to avoid the exception being raised.\n\n<hr />\n\nExamples run on Rails version: 4.2.4.\n", "A_clean_body": ["thi", "small", "amend", "rout", "guid", "there", "exampl", "guid", "that", "will", "rais", "except", "when", "use", "rubi", "get", "'profil", "show", "pass", "symbol", "argument", "get", "rout", "method", "requir", "control", "argument", "also", "defin", "document", "miss", "control", "argument", "which", "leav", "out", "rais", "rake", "rout", "argumenterror", "argument", "error", "miss", "control", "key", "rout", "definit", "pleas", "check", "your", "rout", "ad", "control", "argument", "will", "map", "rout", "correctli", "without", "rais", "except", "rubi", "get", "'profil", "show", "control", "'users'", "rake", "rout", "profil", "get", "profil", "format", "user", "show", "thi", "commit", "updat", "exampl", "document", "avoid", "except", "be", "rais", "hr", "exampl", "run", "rail", "version"], "B_body": "", "B_clean_body": [], "title_sim": [-0.0016293697164221764], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.15386073306625747, 0.15386073306625747], "location_sim": [1.0, 1.0], "pattern": 0, "time": 5}, {"A_title": "Fixes #12423 - Additional select columns are removed when using includes", "A_clean_title": ["fix", "12423", "addit", "select", "column", "are", "remov", "when", "includ"], "B_title": "Raise error if the migration to be deleted is not found. Closes #12674", "B_clean_title": ["rais", "error", "migrat", "delet", "not", "found", "close", "12674"], "A_body": "Closes #12423\n", "A_clean_body": ["close", "12423"], "B_body": "Closes #12674\n", "B_clean_body": ["close", "12674"], "title_sim": [-0.0020149206295868257], "body_sim": [0.9999999999999999], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 50}, {"A_title": "Fix regression on .select method", "A_clean_title": ["fix", "regress", "select", "method"], "B_title": "Add a failing test case for issue #12017", "B_clean_title": ["add", "fail", "test", "case", "issu", "12017"], "A_body": "### Problem\n\n``` ruby\nquery = author.posts.select(:title)\nconnection.select_one(query)\n```\n\nThat code wont work anymore on rails 4. And it used to work on rails 3.\n### Why\n\n`select` method, returns a `ActiveRecord::AssociationRelation` and the connection is not expecting that object.\n### Solution\n\nIf the argument is a `ActiveRecord::AssociationRelation`, get the arel and binds from it.\n\nreview @rafaelfranca @dmathieu\n\nSee this example that fails on AR 4 and not on 3:\nhttps://gist.github.com/arthurnn/8701203\n\n[fixes #7538]\n[fixes #12017]\n[related #13731]\n", "A_clean_body": ["problem", "rubi", "queri", "author", "post", "select", "titl", "connect", "select", "one", "queri", "that", "code", "wont", "work", "anymor", "rail", "it", "use", "work", "rail", "whi", "select", "method", "return", "activerecord", "activ", "record", ":associationrel", ":associ", "relat", "connect", "not", "expect", "that", "object", "solut", "argument", "activerecord", "activ", "record", ":associationrel", ":associ", "relat", "get", "arel", "bind", "it", "review", "rafaelfranca", "dmathieu", "see", "thi", "exampl", "that", "fail", "ar", "not", "http", "github", "gist", "com", "arthurnn", "8701203", "fix", "7538", "fix", "12017", "relat", "13731"], "B_body": "Hello,\n\nThis pull request add a failing test case for #12017. I'm \"ci-skipping\" since the build should fail. I will add the changelog entry etc. when we can get it fixed.\n\nHave a nice day.\n", "B_clean_body": ["hello", "thi", "pull", "request", "add", "fail", "test", "case", "12017", "'m", "ci", "skip", "sinc", "build", "fail", "will", "add", "changelog", "entri", "etc", "when", "we", "get", "it", "fix", "have", "nice", "day"], "title_sim": [0.020951960526472566], "body_sim": [0.1660992849086282], "file_list_sim": 0.1111111111111111, "overlap_files_len": 1, "code_sim": [0.06977056419996192, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 154}, {"A_title": "Fix `PredicateBuilder` to handle nil value passed to Relation#find_by`", "A_clean_title": ["fix", "predicatebuild", "predic", "builder", "handl", "nil", "valu", "pass", "relat", "find", "by"], "B_title": "Better support for AR:B.where(belongs_to_assoc: val) which previously generated invalid SQL", "B_clean_title": ["better", "support", "ar", "where", "belong", "assoc", "val", "which", "previous", "gener", "invalid", "sql"], "A_body": "Fix `PredicateBuilder` to handle nil value passed to Relation#find_by` in case of an association attribute.\n\n Fixes #13075\n", "A_clean_body": ["fix", "predicatebuild", "predic", "builder", "handl", "nil", "valu", "pass", "relat", "find", "by", "case", "associ", "attribut", "fix", "13075"], "B_body": "Using the name of an association in `where` previously worked only\nif the value was a single `ActiveRecrd::Base` object. e.g.\n\n```\nPost.where(author: Author.first)\n```\n\nAny other values, including `nil`, would cause invalid SQL to be\ngenerated. This change supports arguments in the `where` query\nconditions where the key is a `belongs_to` association name and the\nvalue is `nil`, an `Array` of `ActiveRecord::Base` objects, or an\n`ActiveRecord::Relation` object.\n\n```\n# Given the Post model\nclass Post < ActiveRecord::Base\n  belongs_to :author\nend\n\n# nil value finds records where the association is not set\nPost.where(author: nil)\n# SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"author_id\" IS NULL\n\n# Array values find records where the association foreign key\n# matches the ids of the passed ActiveRecord models, resulting\n# in the same query as Post.where(author_id: [1,2])\nauthors_array = [Author.find(1), Author.find(2)]\nPost.where(author: authors_array)\n\n# ActiveRecord::Relation values find records using the same\n# query as Post.where(author_id: Author.where(last_name: \"Emde\"))\nPost.where(author: Author.where(last_name: \"Emde\"))\n```\n\nPolymorphic `belongs_to` associations will continue to be handled\nappropriately, with the polymorphic `association_type` field added\nto the query to match the base class of the value. This feature\npreviously only worked when the value was a single `ActveRecord::Base`.\n\n```\nclass Post < ActiveRecord::Base\n  belongs_to :author, polymorphic: true\nend\n\nPost.where(author: Author.where(last_name: \"Emde\"))\n# Generates a query similar to:\nPost.where(author_id: Author.where(last_name: \"Emde\"), author_type: \"Author\")\n```\n", "B_clean_body": ["name", "associ", "where", "previous", "work", "onli", "valu", "wa", "singl", "activerecrd", "activ", "recrd", ":base", "object", "post", "where", "author", "author", "first", "ani", "other", "valu", "includ", "nil", "would", "caus", "invalid", "sql", "gener", "thi", "chang", "support", "argument", "where", "queri", "condit", "where", "key", "belong", "associ", "name", "valu", "nil", "array", "activerecord", "activ", "record", ":base", "object", "or", "activerecord", "activ", "record", ":relat", "object", "given", "post", "model", "class", "post", "activerecord", "activ", "record", ":base", "belong", "author", "end", "nil", "valu", "find", "record", "where", "associ", "not", "set", "post", "where", "author", "nil", "select", "post", "post", "where", "post", "author", "id", "null", "array", "valu", "find", "record", "where", "associ", "foreign", "key", "match", "id", "pass", "activerecord", "activ", "record", "model", "result", "same", "queri", "as", "post", "where", "author", "id", "1,2", "author", "array", "author", "find", "author", "find", "post", "where", "author", "author", "array", "activerecord", "activ", "record", ":relat", "valu", "find", "record", "same", "queri", "as", "post", "where", "author", "id", "author", "where", "last", "name", "emd", "post", "where", "author", "author", "where", "last", "name", "emd", "polymorph", "belong", "associ", "will", "continu", "handl", "appropri", "polymorph", "associ", "type", "field", "ad", "queri", "match", "base", "class", "valu", "thi", "featur", "previous", "onli", "work", "when", "valu", "wa", "singl", "actverecord", "actv", "record", ":base", "class", "post", "activerecord", "activ", "record", ":base", "belong", "author", "polymorph", "true", "end", "post", "where", "author", "author", "where", "last", "name", "emd", "gener", "queri", "similar", "post", "where", "author", "id", "author", "where", "last", "name", "emd", "author", "type", "author"], "title_sim": [-0.003361402723590652], "body_sim": [0.15930463207663967], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.5183449012414921, 0.5200644398696284], "location_sim": [0.6853932584269663, 1.0], "pattern": 0, "time": 16}, {"A_title": "Don't freeze input strings", "A_clean_title": ["n't", "freez", "input", "string"], "B_title": "WIP: Clone attributes passed to #new", "B_clean_title": ["wip", "clone", "attribut", "pass", "new"], "A_body": "See 34321e4a433bb7eef48fd743286601403f8f7d82 for background on ImmutableString vs String.\r\n\r\nOur String type cannot delegate typecasting to ImmutableString, because the latter freezes its input: duplicating the value after that gives us an unfrozen result, but still mutates the originally passed object.\r\n\r\nFixes #24185\r\nFixes #28718", "A_clean_body": ["see", "34321e4a433bb7eef48fd743286601403f8f7d82", "background", "immutablestr", "immut", "string", "vs", "string", "our", "string", "type", "not", "deleg", "typecast", "immutablestr", "immut", "string", "becaus", "latter", "freez", "it", "input", "duplic", "valu", "after", "that", "give", "us", "unfrozen", "result", "but", "still", "mutat", "origin", "pass", "object", "fix", "24185", "fix", "28718"], "B_body": "### Summary\r\n\r\n**_Note: I am opening this to get feedback on it for being a potential solution to issue #28718_**.\r\n\r\nSay we have a model Car and a car object, **car_1**.\r\nWhen Car is passed **car_1's** attributes in **_#new_**( `car_2 = Car.new(car_1.attributes)` ), **car_2** will save **car_1's** attributes as its `@value_before_type_cast` values for FromUser.\r\n\r\nA method like  `car_2.inspect` can affect `@value_before_type_cast` values for **car_2** which can in turn affect **car_1's** attributes. See issue #28718 and [its reproducable script]( https://gist.github.com/rafaelfranca/dd0a2d32397fd9c3a596a349e6601309) for an example.\r\n\r\nThis commit starts an attempt to clone values(allocate a separate object) for a new object. My reasoning behind this is that each object should have its own allocated values even if the contents of the value are the same for the two objects. While *car_1* and *car_2* may share the same name, they should not share the same String object for name.\r\n\r\nThis is a crude attempt at solving the issue by showing that the attributes passed in could be cloned before they are saved to the new object. It's minimal to allow for feedback before moving forward.", "B_clean_body": ["summari", "note", "am", "open", "thi", "get", "feedback", "it", "be", "potenti", "solut", "issu", "28718", "say", "we", "have", "model", "car", "car", "object", "**car", "1**", "when", "car", "pass", "**car", "1's**", "attribut", "new", "car", "car", "new", "attribut", "car", "**car", "2**", "will", "save", "**car", "1's**", "attribut", "as", "it", "valu", "befor", "type", "cast", "valu", "fromus", "user", "method", "like", "inspect", "car", "affect", "valu", "befor", "type", "cast", "valu", "**car", "2**", "which", "turn", "affect", "**car", "1's**", "attribut", "see", "issu", "28718", "it", "reproduc", "script", "http", "github", "gist", "com", "rafaelfranca", "dd0a2d32397fd9c3a596a349e6601309", "exampl", "thi", "commit", "start", "attempt", "clone", "valu", "alloc", "separ", "object", "new", "object", "my", "reason", "behind", "thi", "that", "each", "object", "have", "it", "own", "alloc", "valu", "even", "content", "valu", "are", "same", "two", "object", "while", "*car", "1*", "*car", "2*", "may", "share", "same", "name", "they", "not", "share", "same", "string", "object", "name", "thi", "crude", "attempt", "at", "solv", "issu", "by", "show", "that", "attribut", "pass", "could", "clone", "befor", "they", "are", "save", "new", "object", "it", "'s", "minim", "allow", "feedback", "befor", "move", "forward"], "title_sim": [0.04348044033704038], "body_sim": [0.34988610610248266], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.2110177648346132, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 0}, {"A_title": "Detect in-place changes on mutable AR attributes", "A_clean_title": ["detect", "place", "chang", "mutabl", "ar", "attribut"], "B_title": "Opt-out of always writing of serialized columns (`serialize :some_attr, dirty: :never`)", "B_clean_title": ["opt", "out", "alway", "write", "serial", "column", "serial", "some", "attr", "dirti", "never"], "A_body": "We have several mutable types on Active Record now. (Serialized, JSON,\nHStore). We need to be able to detect if these have been modified in\nplace.\n\nSerialized attributes now \"just work\" and no longer need to be saved 100% of the time.\n\nFixes #8328\n", "A_clean_body": ["we", "have", "sever", "mutabl", "type", "activ", "record", "now", "serial", "json", "hstore", "store", "we", "need", "abl", "detect", "these", "have", "been", "modifi", "place", "serial", "attribut", "now", "just", "work", "no", "longer", "need", "save", "100", "time", "fix", "8328"], "B_body": "This is a first cut at a simple patch that allows developers to protect certain serialized columns from being written to the database on every update. The default behavior is not affected and this patch is 100% backwards compatible.  Quick example:\n\n``` ruby\nclass MyModel < ActiveRecord::Base\n\n  # some_field gets written on every write\n  serialize :field1\n  # same as above\n  serialize :field2, dirty: :always\n  serialize :field3, Object, dirty: :always\n\n  # field4 only gets written, if\n  # field4_will_change was called\n  serialize :field4, dirty: :never\nend\n```\n\nThe current second argument, `class_name`, still works and is optional as well.\n\nThis patch fixes #8328 in a very lightweight way. If this gets any interest, I'd love to discuss\n\n 1) Allowing values `:clone` and `:hash` to the dirty option. This would store a hash or copy of the object after initialization and compare it when saving. This is rather expensive so it has to be strictly opt-in.\n\n 2) Consolidating the existing `serialized_attributes` and the new `serialized_attribute_options` class attributes. IMO it would be nice to have something like `MyModel.serialized_attribute_options == {my_field: {dirty: :always, coder: XXX}}`. This could be implemented by first deprecating `serialized_attributes` in case somebody is directly using it. It may even make sense to simplify the `serialize` method more, by making the current `class_name` argument a part of the options hash\n\nI've never attempted to contribute to rails, so forgive my ignorance wrt process. I'm also more than happy to change the naming, formatting and structure of the code as needed. I'll also write some specs (I already wrote some but wasn't able to run them... :().\n\nBrief rationale: Consider a system with two separate processes `A` and `B`. `A` reads your model object, does something for a second and then call save on it. Whatever your serialized column's value was when `A` read it is now written to the database. In the meantime, `B` might have modified that column. Those changes are now lost.\n", "B_clean_body": ["thi", "first", "cut", "at", "simpl", "patch", "that", "allow", "develop", "protect", "certain", "serial", "column", "be", "written", "databas", "everi", "updat", "default", "behavior", "not", "affect", "thi", "patch", "100", "backward", "compat", "quick", "exampl", "rubi", "class", "mymodel", "my", "model", "activerecord", "activ", "record", ":base", "some", "field", "get", "written", "everi", "write", "serial", "field1", "same", "as", "abov", "serial", "field2", "dirti", "alway", "serial", "field3", "object", "dirti", "alway", "field4", "onli", "get", "written", "field4", "will", "chang", "wa", "call", "serial", "field4", "dirti", "never", "end", "current", "second", "argument", "class", "name", "still", "work", "option", "as", "well", "thi", "patch", "fix", "8328", "veri", "lightweight", "way", "thi", "get", "ani", "interest", "'d", "love", "discuss", "allow", "valu", "clone", "hash", "dirti", "option", "thi", "would", "store", "hash", "or", "copi", "object", "after", "initi", "compar", "it", "when", "save", "thi", "rather", "expens", "so", "it", "ha", "strictli", "opt", "consolid", "exist", "serial", "attribut", "new", "serial", "attribut", "option", "class", "attribut", "imo", "it", "would", "nice", "have", "someth", "like", "mymodel", "my", "model", "serial", "attribut", "option", "my", "field", "dirti", "alway", "coder", "xxx", "thi", "could", "implement", "by", "first", "deprec", "serial", "attribut", "case", "somebodi", "directli", "it", "it", "may", "even", "make", "sens", "simplifi", "serial", "method", "more", "by", "make", "current", "class", "name", "argument", "part", "option", "hash", "'ve", "never", "attempt", "contribut", "rail", "so", "forgiv", "my", "ignor", "wrt", "process", "'m", "also", "more", "than", "happi", "chang", "name", "format", "structur", "code", "as", "need", "'ll", "also", "write", "some", "spec", "alreadi", "wrote", "some", "but", "wa", "n't", "abl", "run", "them", "brief", "rational", "consid", "system", "two", "separ", "process", "read", "your", "model", "object", "someth", "second", "then", "call", "save", "it", "whatev", "your", "serial", "column", "'s", "valu", "wa", "when", "read", "it", "now", "written", "databas", "meantim", "might", "have", "modifi", "that", "column", "those", "chang", "are", "now", "lost"], "title_sim": [-0.034928821581150016], "body_sim": [0.46554048977770046], "file_list_sim": 0.16666666666666666, "overlap_files_len": 2, "code_sim": [0.18748050824860443, 0.20094906495359507], "location_sim": [0.1891891891891892, 0.29914529914529914], "pattern": 1, "time": 141}, {"A_title": "copy reflection_scopes\u2019s unscoped value when building scope for preloading", "A_clean_title": ["copi", "reflect", "scope", "unscop", "valu", "when", "build", "scope", "preload"], "B_title": "Fix unscoping bug in preload and includes", "B_clean_title": ["fix", "unscop", "bug", "preload", "includ"], "A_body": "Closes #11036\n", "A_clean_body": ["close", "11036"], "B_body": "This PR fixes https://github.com/rails/rails/issues/11036.\n\nCurrently unscoped block does not work for `includes` and `preload`.\nI changed `ActiveRecord::Associations::Preloader` to use [all](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/scoping/named.rb#L24-L30) instead of  [default_scoped](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/scoping/named.rb#L32-L34).\nAnd ignore :preload and :includes scope to pass #5667.\n", "B_clean_body": ["thi", "pr", "fix", "http", "github", "com", "rail", "rail", "issu", "11036", "current", "unscop", "block", "not", "work", "includ", "preload", "chang", "activerecord", "activ", "record", ":associ", ":preload", "use", "all", "http", "rb", "github", "com", "rail", "rail", "blob", "master", "activerecord", "lib", "activ", "record", "scope", "name", "l24", "l30", "instead", "default", "scope", "http", "rb", "github", "com", "rail", "rail", "blob", "master", "activerecord", "lib", "activ", "record", "scope", "name", "l32", "l34", "ignor", "preload", "includ", "scope", "pass", "5667"], "title_sim": [0.47186520064454845], "body_sim": [0.007008184822718157], "file_list_sim": 0.16666666666666666, "overlap_files_len": 1, "code_sim": [0.16312483282283288, 0.5457986791193116], "location_sim": [0.0, 0.0], "pattern": 1, "time": 82}, {"A_title": "Removing composed_of", "A_clean_title": ["remov", "compos"], "B_title": "Clear aggregation cache after setter method calls.", "B_clean_title": ["clear", "aggreg", "cach", "after", "setter", "method", "call"], "A_body": "composed_of is a complicated feature that's rarely used. So let's deprecate it in 3-2 and remove it in master.\n\nRelated: #6742\n\n/cc @jonleighton @tenderlove\n", "A_clean_body": ["compos", "complic", "featur", "that", "'s", "rare", "use", "so", "let", "'s", "deprec", "it", "remov", "it", "master", "relat", "6742", "cc", "jonleighton", "tenderlov"], "B_body": "Solve this issue:\n\n```\ncustomer.address.street # => \"Quiet Road\"\ncustomer.address_street = \"Noisy Road\"\ncustomer.address.street # => \"Quiet Road\"\n```\n\nWhere:\n\n```\nclass Customer\n  composed_of :address, :mapping => [ %w(address_street street), %w(address_city city) ]\nend\n\n\nclass Address\n  attr_reader :street, :city, :country\n\n  def initialize(street, city, country)\n    @street, @city, @country = street, city, country\n  end\nend\n```\n", "B_clean_body": ["solv", "thi", "issu", "custom", "address", "street", "quiet", "road", "custom", "address", "street", "noisi", "road", "custom", "address", "street", "quiet", "road", "where", "class", "custom", "compos", "address", "map", "address", "street", "street", "address", "citi", "citi", "end", "class", "address", "attr", "reader", "street", "citi", "countri", "def", "initi", "street", "citi", "countri", "street", "citi", "countri", "street", "citi", "countri", "end", "end"], "title_sim": [-0.008149793838994774], "body_sim": [0.07413348111115284], "file_list_sim": 0.1111111111111111, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 19}, {"A_title": "On destroying do not touch destroyed belongs to association.", "A_clean_title": ["destroy", "not", "touch", "destroy", "belong", "associ"], "B_title": "Optimistic locking destroy bug", "B_clean_title": ["optimist", "lock", "destroy", "bug"], "A_body": "Fixes: #13445\n", "A_clean_body": ["fix", "13445"], "B_body": "This PR is only meant as a discussion point at this time.  I do not\ncurrently have a fix here.\n\nThere seems to be a problem when using optimistic locking with\n:dependent => :destroy and :touch => true.  This pull request\nattempts to expose the error although I do not yet have a\nfix.  Please see the new test in locking_test and note that\nit fails.  This failure means that when attempting to destroy\na model object with :dependent => :destroy on a realtionship\nwhere the inverse has :touch => true results in:\n\nActiveRecord::StaleObjectError: Attempted to destroy a stale object\n\nIf in the new test we attempted to do `p.destroy` we would trigger the\nStaleObjectError.  This is because the lock_version of the Person in\nthe database gets updated when the :reference is destroyed due to\n:touch => true but the in-memory lock_version on the person object,\np, is NOT updated so when the destroy is attempted it thinks it is\nstale.\n\nAny advice on how to fix this in AR without breaking anything else\nwould be appreciated.\n", "B_clean_body": ["thi", "pr", "onli", "meant", "as", "discuss", "point", "at", "thi", "time", "not", "current", "have", "fix", "here", "there", "seem", "problem", "when", "optimist", "lock", "depend", "destroy", "touch", "true", "thi", "pull", "request", "attempt", "expos", "error", "although", "not", "yet", "have", "fix", "pleas", "see", "new", "test", "lock", "test", "note", "that", "it", "fail", "thi", "failur", "mean", "that", "when", "attempt", "destroy", "model", "object", "depend", "destroy", "realtionship", "where", "invers", "ha", "touch", "true", "result", "activerecord", "activ", "record", ":staleobjecterror", ":stale", "object", "error", "attempt", "destroy", "stale", "object", "new", "test", "we", "attempt", "destroy", "we", "would", "trigger", "staleobjecterror", "stale", "object", "error", "thi", "becaus", "lock", "version", "person", "databas", "get", "updat", "when", "refer", "destroy", "due", "touch", "true", "but", "memori", "lock", "version", "person", "object", "not", "updat", "so", "when", "destroy", "attempt", "it", "think", "it", "stale", "ani", "advic", "how", "fix", "thi", "ar", "without", "break", "anyth", "would", "appreci"], "title_sim": [0.38792424588927626], "body_sim": [0.07816300789425151], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.2684904245288178, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 299}, {"A_title": "Add cache_if and cache_unless two methods to skip fragment cache.", "A_clean_title": ["add", "cach", "cach", "unless", "two", "method", "skip", "fragment", "cach"], "B_title": "Added support for conditional fragment caching using :if and :unless options.", "B_clean_title": ["ad", "support", "condit", "fragment", "cach", "unless", "option"], "A_body": "Sometimes you don't want cache to all user.\nyou can\n\n```\n<%cache_if session[:user_id].blank?,'xxx' do%>\n  something..\n<%end%>\n```\n\nor\n\n```\n<%cache_unless current_user.admin?, 'xxx' do%>\n  something..\n<%end%>\n```\n", "A_clean_body": ["sometim", "you", "n't", "want", "cach", "all", "user", "you", "cach", "session", "user", "id", "blank", "'xxx", "someth", "end", "or", "cach", "unless", "admin", "current", "user", "'xxx", "someth", "end"], "B_body": "This allows fragment caching to be used conditionally by passing `if/unless` to the `cache` helper method. This comes in especially handy when caching forms that may contain changed values/errors.\n\nUsage:\n\n``` erb\n<% cache [ @user, 'form' ], :unless => @user.changed? do %>\n  <%= render partial: 'shared/error_messages', locals: {instance: @user} %>\n  <%= form_for @user do |f| %>\n    <div class=\"field\">\n      <div><%= f.label :name %></div>\n      <div><%= f.text_field :name %></div>\n    </div>\n    <div class=\"actions\">\n      <%= f.submit %>\n    </div>\n  <% end %>\n<% end %>\n```\n", "B_clean_body": ["thi", "allow", "fragment", "cach", "use", "condit", "by", "pass", "unless", "cach", "helper", "method", "thi", "come", "especi", "handi", "when", "cach", "form", "that", "may", "contain", "chang", "valu", "error", "usag", "erb", "cach", "user", "'form", "unless", "user", "chang", "render", "partial", "messag", "'share", "error", "local", "instanc", "user", "form", "user", "|f|", "div", "class=", "field", "div", "label", "name", "div", "div", "text", "field", "name", "div", "div", "div", "class=", "action", "submit", "div", "end", "end"], "title_sim": [0.6544257493277388], "body_sim": [0.5744277037938081], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.561836503336239, 0.36879432925901573], "location_sim": [0.3968253968253968, 0.8771929824561403], "pattern": 0, "time": 208}, {"A_title": "ActiveSupport: Fixing issue when delegating to methods named \"block\", \"args\", or \"arg\"", "A_clean_title": ["activesupport", "activ", "support", "fix", "issu", "when", "deleg", "method", "name", "block", "arg", "or", "arg"], "B_title": "Module#delegate cannot delegate to receivers named :args or :block for normal methods or :arg for setters.", "B_clean_title": ["modul", "deleg", "not", "deleg", "receiv", "name", "arg", "or", "block", "normal", "method", "or", "arg", "setter"], "A_body": "When using `delegate` with `to: :block` (for example), the method calls the `block` argument to the method, not the method on the delegating object. For example, the following will fail even if the `Assignment` has a block:\n\n``` ruby\nclass Assignment\n  has_one :block \n  delegate :class, to: :block \nend\nAssignment.new.class\n```\n\nThe `delegate` method already prefixes certain reserved Ruby keywords with `self.`, so this patch just does the same for `block`, `args`, and `arg`. I've also included a test case that should fail without the patch applied.\n\nThanks!\n", "A_clean_body": ["when", "deleg", "block", "exampl", "method", "call", "block", "argument", "method", "not", "method", "deleg", "object", "exampl", "follow", "will", "fail", "even", "assign", "ha", "block", "rubi", "class", "assign", "ha", "one", "block", "deleg", "class", "block", "end", "assign", "new", "class", "deleg", "method", "alreadi", "prefix", "certain", "reserv", "rubi", "keyword", "self", "so", "thi", "patch", "just", "same", "block", "arg", "arg", "'ve", "also", "includ", "test", "case", "that", "fail", "without", "patch", "appli", "thank"], "B_body": "I found this bug while trying to delegate to a method called `block`. Consider the following code:\n\n``` ruby\nrequire 'active_support/core_ext'\n\nclass Foo\n  def block\n    @block ||= Object.new\n  end  \n\n  delegate :dup, to: :block\nend  \n\nFoo.new.dup\n```\n\nI expected this to return a new instance of `Object`, but instead it raised the following error:\n\n```\nTypeError: can't dup NilClass\n```\n\nThis is because `block` is an argument in the dynamically generated `dup` method on `Foo`. The signature of that method looks like this:\n\n``` ruby\nclass Foo\n  def dup(*args, &block)\n    # ...\n  end\nend\n```\n\nNo block is given to the `dup` call, so `block` is nil, thus the error. The same problem exists with delegating to `args` and delegating to `arg` if the method you're delegating happens to be an attribute writer.\n\nI'm not super thrilled with how the tests turned out and would appreciate suggestions on how to make them a bit clearer and possibly shorter, but they fail without the patch and pass with it.\n\nPlease let me know if there's anything I should have done differently.\n", "B_clean_body": ["found", "thi", "bug", "while", "tri", "deleg", "method", "call", "block", "consid", "follow", "code", "rubi", "requir", "'activ", "ext'", "support", "core", "class", "foo", "def", "block", "block", "object", "new", "end", "deleg", "dup", "block", "end", "foo", "new", "dup", "expect", "thi", "return", "new", "instanc", "object", "but", "instead", "it", "rais", "follow", "error", "typeerror", "type", "error", "ca", "n't", "dup", "nilclass", "nil", "class", "thi", "becaus", "block", "argument", "dynam", "gener", "dup", "method", "foo", "signatur", "that", "method", "look", "like", "thi", "rubi", "class", "foo", "def", "dup", "*arg", "block", "end", "end", "no", "block", "given", "dup", "call", "so", "block", "nil", "thu", "error", "same", "problem", "exist", "deleg", "arg", "deleg", "arg", "method", "you", "'re", "deleg", "happen", "attribut", "writer", "'m", "not", "super", "thrill", "how", "test", "turn", "out", "would", "appreci", "suggest", "how", "make", "them", "bit", "clearer", "possibl", "shorter", "but", "they", "fail", "without", "patch", "pass", "it", "pleas", "let", "me", "know", "there", "'s", "anyth", "have", "done", "differ"], "title_sim": [0.6751131937479707], "body_sim": [0.7562121283890435], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.5817679756599972, 0.5817679756599972], "location_sim": [0.0, 0.0], "pattern": 0, "time": 781}, {"A_title": "Adding deep versions of stringify_keys and symbolize_keys (plain and bang) for nested hashes", "A_clean_title": ["ad", "deep", "version", "stringifi", "key", "symbol", "key", "plain", "bang", "nest", "hash"], "B_title": "Recursive hash key methods", "B_clean_title": ["recurs", "hash", "key", "method"], "A_body": "I have to carry around some snippets 'cause I always use these methods (specially deep_symbolize_keys) when I use YAML files with custom app configuration. Some people I know also have their own versions, so I thought adding them to ActiveSupport was a good idea.\n", "A_clean_body": ["have", "carri", "around", "some", "snippet", "'caus", "alway", "use", "these", "method", "special", "deep", "symbol", "key", "when", "use", "yaml", "file", "custom", "app", "configur", "some", "peopl", "know", "also", "have", "their", "own", "version", "so", "thought", "ad", "them", "activesupport", "activ", "support", "wa", "good", "idea"], "B_body": "I've updated Hash#stringify_keys, Hash#stringify_keys!, Hash#symbolize_keys and Hash#symbolize_keys! to accept an option which applies the method recursively:\n\n```\na = { :foo => \"bar\", :foo1 => { :nested_foo => \"bar\", :more_foo => \"bar\" } }\na.stringify_keys \n#=>  { \"foo\" => \"bar, \"foo1\" => { :nested_foo => \"bar\", :more_foo => \"bar\" } }\na.stringify_keys(recursive: true)\n#=>  { \"foo\" => \"bar, \"foo1\" => { \"nested_foo\" => \"bar\", \"more_foo\" => \"bar\" } }\n```\n\nIt also handles hashes nested within arrays well.\n", "B_clean_body": ["'ve", "updat", "hash", "stringifi", "key", "hash", "stringifi", "key", "hash", "symbol", "key", "hash", "symbol", "key", "accept", "option", "which", "appli", "method", "recurs", "foo", "bar", "foo1", "nest", "foo", "bar", "more", "foo", "bar", "stringifi", "key", "foo", "bar", "foo1", "nest", "foo", "bar", "more", "foo", "bar", "stringifi", "key", "recurs", "true", "foo", "bar", "foo1", "nest", "foo", "bar", "more", "foo", "bar", "it", "also", "handl", "hash", "nest", "within", "array", "well"], "title_sim": [0.4673536442335741], "body_sim": [0.13491160585631007], "file_list_sim": 0.4, "overlap_files_len": 2, "code_sim": [0.33993776222457434, 0.32686726581689807], "location_sim": [0.46786632390745503, 0.5449101796407185], "pattern": 0, "time": 34}, {"A_title": "Optimize enumerable methods for collection associations", "A_clean_title": ["optim", "enumer", "method", "collect", "associ"], "B_title": "Optimize none? and one? relation query methods to use LIMIT 1 and COUNT.", "B_clean_title": ["optim", "none", "one", "relat", "queri", "method", "use", "limit", "count"], "A_body": "Optimize `none?` and `one?` methods for `CollectionAssociation` class to prevent of loading the entire records into memory when no block given. And of course tests.\n", "A_clean_body": ["optim", "none", "one", "method", "collectionassoci", "collect", "associ", "class", "prevent", "load", "entir", "record", "into", "memori", "when", "no", "block", "given", "cours", "test"], "B_body": "I was surprised to find out that relation's `none?` method was loading the entire collection as an array,\neven if no block or limit was given. This contrasts how `any?` and `many?` work, which is to use `LIMIT 1` and `COUNT` respectively, if no block and limit is given.\n\nIMO it's more natural to use `.none?` query rather than either `empty?` (because `empty?` is an Array method while `none?` is an Enumerable method and thus seems more suitable for a generic set such a a set of database rows). I therefore changed `none?` to follow the already existing behavior for `any?` and `many?`. \n\nI also implemented an optimized `one?` for similar reasons and for completion sake - just as me, others could be surprised that `one?` behaves differently than `any?` and `many?`, and I don't see a drawback to being consistent in providing an efficient implementation if possible.\n\nThis change applies to relations (e.g. `User.all`) as well as associations (e.g. `account.users`).\n\nBefore:\n\n``` ruby\nusers.none?\nSELECT \"users\".* FROM \"users\"\n\nusers.one?\nSELECT \"users\".* FROM \"users\"\n```\n\nAfter:\n\n``` ruby\nusers.none?\nSELECT 1 AS one FROM \"users\" LIMIT 1\n\nusers.one?\nSELECT COUNT(*) FROM \"users\"\n```\n\n`NullRelation` has been updated to short-curciut `none?` and `one?`, as it already does with `any?` and `many?`.\n\nAlso, improved method documentation a bit.\n\nI added the (appropriately modified) same set of tests as present for `any?` and `many?` methods in `relations_test.rb` and `associations/has_many_association_test.rb` unit tests.\n", "B_clean_body": ["wa", "surpris", "find", "out", "that", "relat", "'s", "none", "method", "wa", "load", "entir", "collect", "as", "array", "even", "no", "block", "or", "limit", "wa", "given", "thi", "contrast", "how", "ani", "mani", "work", "which", "use", "limit", "count", "respect", "no", "block", "limit", "given", "imo", "it", "'s", "more", "natur", "use", "none", "queri", "rather", "than", "either", "empti", "becaus", "empti", "array", "method", "while", "none", "enumer", "method", "thu", "seem", "more", "suitabl", "gener", "set", "such", "set", "databas", "row", "therefor", "chang", "none", "follow", "alreadi", "exist", "behavior", "ani", "mani", "also", "implement", "optim", "one", "similar", "reason", "complet", "sake", "just", "as", "me", "other", "could", "surpris", "that", "one", "behav", "differ", "than", "ani", "mani", "n't", "see", "drawback", "be", "consist", "provid", "effici", "implement", "possibl", "thi", "chang", "appli", "relat", "user", "all", "as", "well", "as", "associ", "account", "user", "befor", "rubi", "user", "none", "select", "user", "user", "user", "one", "select", "user", "user", "after", "rubi", "user", "none", "select", "as", "one", "user", "limit", "user", "one", "select", "count", "user", "nullrel", "null", "relat", "ha", "been", "updat", "short", "curciut", "none", "one", "as", "it", "alreadi", "ani", "mani", "also", "improv", "method", "document", "bit", "ad", "appropri", "modifi", "same", "set", "test", "as", "present", "ani", "mani", "method", "rb", "relat", "test", "rb", "mani", "associ", "test", "associ", "ha", "unit", "test"], "title_sim": [0.30987525467929844], "body_sim": [0.4458840474457803], "file_list_sim": 0.25, "overlap_files_len": 2, "code_sim": [0.16846953505284337, 0.4948243944982162], "location_sim": [0.0718954248366013, 0.39759036144578314], "pattern": 0, "time": 647}, {"A_title": "Support collate for postgresql", "A_clean_title": ["support", "collat", "postgresql"], "B_title": "Added support for LC_COLLATE and LC_CTYPE for PostgreSQL adapter.", "B_clean_title": ["ad", "support", "lc", "collat", "lc", "ctype", "postgresql", "postgr", "sql", "adapt"], "A_body": "Since PostgreSQL 8.4, Collate and Ctype options are supported when creating database.\n\nPlease see also http://www.postgresql.jp/document/9.1/html/sql-createdatabase.html.\n", "A_clean_body": ["sinc", "postgresql", "postgr", "sql", "collat", "ctype", "option", "are", "support", "when", "creat", "databas", "pleas", "see", "also", "http", "postgresql", "createdatabas", "html", "www", "jp", "document", "html", "sql"], "B_body": "Since version 8.4, PostgreSQL supports specifying custom LC_COLLATE and LC_CTYPE for CREATE DATABASE, so one database cluster can now contain databases with different collations.\n\nThis adds support for lc_collate and lc_ctype options for database.yml\n", "B_clean_body": ["sinc", "version", "postgresql", "postgr", "sql", "support", "specifi", "custom", "lc", "collat", "lc", "ctype", "creat", "databas", "so", "one", "databas", "cluster", "now", "contain", "databas", "differ", "collat", "thi", "add", "support", "lc", "collat", "lc", "ctype", "option", "databas", "yml"], "title_sim": [0.7258728163360164], "body_sim": [0.591171374038852], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.6936418804510307, 0.5044741157772795], "location_sim": [0.0, 0.0], "pattern": 1, "time": 288}, {"A_title": "Add types to ActiveRecord::Store accessors", "A_clean_title": ["add", "type", "activerecord", "activ", "record", ":store", "accessor"], "B_title": "Add data type support to store_accessor", "B_clean_title": ["add", "data", "type", "support", "store", "accessor"], "A_body": "### Summary\n\nActiveRecord::Store is awesome, but it doesn't have any support for casting types. The documentation recommends overriding the setters for casting values to their appropriate types.\n\nNow that we have the `attributes` api in Rails 5, we can use that to simplify this and add type support to AR::Store.\n\nAs an example, we can go from this:\n\n``` ruby\nclass Song < ActiveRecord::Base\n  # Uses a stored integer to hold the volume adjustment of the song\n  store :settings, accessors: [:volume_adjustment]\n\n  def volume_adjustment=(decibels)\n    super(decibels.to_i)\n  end\n\n  def volume_adjustment\n    super.to_i\n  end\nend\n```\n\nTo this:\n\n``` ruby\nclass Song < ActiveRecord::Base\n  store :settings, accessors: [volume_adjustment: :integer]\nend\n```\n\nSince this uses ActiveRecord::Types for the lookup, you can use any registered type and it will work just like standard attributes.\n", "A_clean_body": ["summari", "activerecord", "activ", "record", ":store", "awesom", "but", "it", "n't", "have", "ani", "support", "cast", "type", "document", "recommend", "overrid", "setter", "cast", "valu", "their", "appropri", "type", "now", "that", "we", "have", "attribut", "api", "rail", "we", "use", "that", "simplifi", "thi", "add", "type", "support", "ar", ":store", "as", "exampl", "we", "go", "thi", "rubi", "class", "song", "activerecord", "activ", "record", ":base", "use", "store", "integ", "hold", "volum", "adjust", "song", "store", "set", "accessor", "volum", "adjust", "def", "volum", "adjustment=", "decibel", "super", "decibel", "end", "def", "volum", "adjust", "super", "end", "end", "thi", "rubi", "class", "song", "activerecord", "activ", "record", ":base", "store", "set", "accessor", "volum", "adjust", "integ", "end", "sinc", "thi", "use", "activerecord", "activ", "record", ":type", "lookup", "you", "use", "ani", "regist", "type", "it", "will", "work", "just", "like", "standard", "attribut"], "B_body": "Add type casting for store_accessors. First, example:\n\n``` ruby\nclass TypedUser < User\n  store_accessor :settings, login_at: :date_time\nend\n\nu = TypedUser.new(active: false, login_at: '2015-01-01 00:01')   \nu.login_at.is_a?(DateTime) #=> true \nu.login_at = DateTime.new(2015,1,1,11,0,0)\nu.reload\n\n# after loading record from db store contains raw data\nu.settings['login_at'] #=> '2015-01-01 11:00:00'\n# but accessor returns type casted value\nu.login_at == DateTime.new(2015,1,1,11,0,0) #=> true\n```\n\nThis feature is the most efficient when working with Postresql hstore, because hstore stores all values as strings. Example:\n\n``` ruby\n# without typed accessors\nclass User < ActiveRecord::User\n  # suppose we store some counter within hstore 'settings'\n  store_accessor :settings, :counter\n\n  # we have to override getter to get value as integer\n  def counter\n    super.to_i  \n  end\nend\n\n# with typed accessor\nclass User < ActiveRecord::User\n  store_accessor :settings, counter: :integer\nend\n```\n\nThis makes code depend less on store type. \n\nAnother feature is data normalization:\n\n``` ruby\nclass User < ActiveRecord::User\n  store_accessor :settings, birthday: :date\nend\n\nUser.new(birthday: '01/01/2010') #=> stores 'birthday' as '2010-01-01' \nUser.new(birthday: '2010-01-01') #=> stores 'birthday' as '2010-01-01'  too\n```\n\nCustom types are also supported (they must inherits from `ActiveRecord::Type::Value`):\n\n``` ruby\nclass User < ActiveRecord::User\n  # provide class or instance itself\n  store_accessor :settings, birthday: BirthdayValue, money: MoneyValue.new\nend\n```\n", "B_clean_body": ["add", "type", "cast", "store", "accessor", "first", "exampl", "rubi", "class", "typedus", "type", "user", "user", "store", "accessor", "set", "login", "at", "date", "time", "end", "typedus", "new", "type", "user", "activ", "fals", "login", "at", "'2015", "01", "01", "00:01", "login", "at", "datetim", "date", "time", "true", "login", "at", "datetim", "new", "date", "time", "2015,1,1,11,0,0", "reload", "after", "load", "record", "db", "store", "contain", "raw", "data", "set", "'login", "at", "'2015", "01", "01", "11:00:00'", "but", "accessor", "return", "type", "cast", "valu", "login", "at", "datetim", "new", "date", "time", "2015,1,1,11,0,0", "true", "thi", "featur", "most", "effici", "when", "work", "postresql", "hstore", "becaus", "hstore", "store", "all", "valu", "as", "string", "exampl", "rubi", "without", "type", "accessor", "class", "user", "activerecord", "activ", "record", ":user", "suppos", "we", "store", "some", "counter", "within", "hstore", "'settings'", "store", "accessor", "set", "counter", "we", "have", "overrid", "getter", "get", "valu", "as", "integ", "def", "counter", "super", "end", "end", "type", "accessor", "class", "user", "activerecord", "activ", "record", ":user", "store", "accessor", "set", "counter", "integ", "end", "thi", "make", "code", "depend", "less", "store", "type", "anoth", "featur", "data", "normal", "rubi", "class", "user", "activerecord", "activ", "record", ":user", "store", "accessor", "set", "birthday", "date", "end", "user", "new", "birthday", "'01", "01", "2010", "store", "'birthday", "as", "'2010", "01", "01", "user", "new", "birthday", "'2010", "01", "01", "store", "'birthday", "as", "'2010", "01", "01", "too", "custom", "type", "are", "also", "support", "they", "must", "inherit", "activerecord", "activ", "record", ":type", ":valu", "rubi", "class", "user", "activerecord", "activ", "record", ":user", "provid", "class", "or", "instanc", "itself", "store", "accessor", "set", "birthday", "birthdayvalu", "birthday", "valu", "money", "moneyvalu", "new", "money", "valu", "end"], "title_sim": [0.42031366593074126], "body_sim": [0.6205715970391921], "file_list_sim": 0.375, "overlap_files_len": 3, "code_sim": [0.4937421977660688, 0.34849857305955445], "location_sim": [0.3711340206185567, 0.6084507042253521], "pattern": 0, "time": 618}, {"A_title": "Added Hash#assert_required_keys to emulate required keywords", "A_clean_title": ["ad", "hash", "assert", "requir", "key", "emul", "requir", "keyword"], "B_title": "Added assert_required_keys method to hash", "B_clean_title": ["ad", "assert", "requir", "key", "method", "hash"], "A_body": "", "A_clean_body": [], "B_body": "Similar to assert_valid_keys method, assert_required_keys method validates if all required_keys that was passed exists in hash keys\n\nFor example\n\n``` ruby\n{ :year => 2012 }.assert_required_keys(:year, :month) # => raises \"ArgumentError: Key month is required\"\n```\n\nUseful when you need check if required options was passed\n", "B_clean_body": ["similar", "assert", "valid", "key", "method", "assert", "requir", "key", "method", "valid", "all", "requir", "key", "that", "wa", "pass", "exist", "hash", "key", "exampl", "rubi", "year", "2012", "assert", "requir", "key", "year", "month", "rais", "argumenterror", "argument", "error", "key", "month", "requir", "use", "when", "you", "need", "check", "requir", "option", "wa", "pass"], "title_sim": [0.9379941855884378], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.18309314207931135, 0.18309314207931135], "location_sim": [0.45555555555555555, 0.45555555555555555], "pattern": 0, "time": 316}, {"A_title": "Do not introduce new variable", "A_clean_title": ["not", "introduc", "new", "variabl"], "B_title": "Refactor debug view", "B_clean_title": ["refactor", "debug", "view"], "A_body": "", "A_clean_body": [], "B_body": "Avoid logic in ERB and use helpers.\n", "B_clean_body": ["avoid", "logic", "erb", "use", "helper"], "title_sim": [0.028302901305072625], "body_sim": [0.0], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.19, 1.0], "pattern": 0, "time": 0}, {"A_title": "Fix Hash#deep_merge bug and improve documentation \u2014 resolves #12738", "A_clean_title": ["fix", "hash", "deep", "merg", "bug", "improv", "document", "resolv", "12738"], "B_title": "Hash#deep_merge does not yield block for false boolean value.", "B_clean_title": ["hash", "deep", "merg", "not", "yield", "block", "fals", "boolean", "valu"], "A_body": "Previously merging into a hash with a falsy value would not result in\nthe merge-block being called. The fix is simply to check for presence\nof the key in the hash.\n\nThe documentation example for `deep_merge` now appropriately\ndemonstrates what a deep merge does.\n\nCloses #12738\n", "A_clean_body": ["previous", "merg", "into", "hash", "falsi", "valu", "would", "not", "result", "merg", "block", "be", "call", "fix", "simpli", "check", "presenc", "key", "hash", "document", "exampl", "deep", "merg", "now", "appropri", "demonstr", "what", "deep", "merg", "close", "12738"], "B_body": "When applying deep_merge with block on Hash with _false_ keys, the block does not get yielded.\n\nhttps://github.com/rails/rails/blob/ef5d85709d346e55827e88f53430a2cbe1e5fb9e/activesupport/lib/active_support/core_ext/hash/deep_merge.rb#L22\n\nThe value `tv` should be properly checked for nil, e.g. `!tv.nil?`.\n\nFailing test:\n\n``` ruby\n  def test_deep_merge_with_block_for_boolean_values\n    hash_1 = { c: { c1: false, c2: false } }\n    hash_2 = { c: { c1: true } }\n\n    expected = { c: { c1: [:c1, false, true], c2: false } } \n\n    assert_equal(expected, hash_1.deep_merge(hash_2) { |key, old, n| [key, old, n] })\n\n    hash_1.deep_merge!(hash_2) { |key, old, n| [key, old, n] }\n    assert_equal expected, hash_1\n  end\n```\n\nTest output:\n\n```\n--- expected\n+++ actual\n@@ -1 +1 @@\n-{:c=>{:c1=>[:c1, false, true], :c2=>false}}\n+{:c=>{:c1=>true, :c2=>false}}\n```\n", "B_clean_body": ["when", "appli", "deep", "merg", "block", "hash", "fals", "key", "block", "not", "get", "yield", "http", "rb", "github", "merg", "com", "rail", "rail", "blob", "ef5d85709d346e55827e88f53430a2cbe1e5fb9", "activesupport", "lib", "activ", "support", "core", "ext", "hash", "deep", "l22", "valu", "tv", "properli", "check", "nil", "tv", "nil", "fail", "test", "rubi", "def", "test", "deep", "merg", "block", "boolean", "valu", "hash", "c1", "fals", "c2", "fals", "hash", "c1", "true", "expect", "c1", "c1", "fals", "true", "c2", "fals", "assert", "equal", "expect", "hash", "deep", "merg", "hash", "|key", "old", "n|", "key", "old", "hash", "deep", "merg", "hash", "|key", "old", "n|", "key", "old", "assert", "equal", "expect", "hash", "end", "test", "output", "expect", "actual", "+1", "c=", "c1=", "c1", "fals", "true", "c2=", "fals", "c=", "c1=", "true", "c2=", "fals"], "title_sim": [0.44568116787137124], "body_sim": [0.6856844480906997], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.5258010223547872, 0.5398498370691114], "location_sim": [0.8941176470588236, 1.0], "pattern": 0, "time": 65}, {"A_title": "Guides: Fix Incorrect Reference to Article in example SQL query", "A_clean_title": ["guid", "fix", "incorrect", "refer", "articl", "exampl", "sql", "queri"], "B_title": "Reorder query in active record query of rails guide ", "B_clean_title": ["reorder", "queri", "activ", "record", "queri", "rail", "guid"], "A_body": "I incorrectly replaced `comment` with `article` in two of the SQL queries that were part of  #15215.\n\nThis is how it should appear.\n\n> ### `reorder`\n> \n> The `reorder` method overrides the default scope order. For example:\n> \n> ``` ruby\n> class Article < ActiveRecord::Base\n>   ..\n>   ..\n>   has_many :comments, -> { order('posted_at DESC') }\n> end\n> \n> Article.find(10).comments.reorder('name')\n> ```\n> \n> The SQL that would be executed:\n> \n> ``` sql\n> SELECT * FROM comments WHERE article_id = 10 ORDER BY name\n> ```\n> \n> In case the `reorder` clause is not used, the SQL executed would be:\n> \n> ``` sql\n> SELECT * FROM comments WHERE article_id = 10 ORDER BY posted_at DESC\n> ```\n\nCurrently, the sql clauses in the above appear as:\n\n``` sql\nSELECT * FROM articles WHERE id = 10 ORDER BY name\n```\n\n``` sql\nSELECT * FROM articles WHERE id = 10 ORDER BY posted_at DESC\n```\n\nThis correctly updates the queries as well as fixes the alignment for some of the tables.\n", "A_clean_body": ["incorrectli", "replac", "comment", "articl", "two", "sql", "queri", "that", "were", "part", "15215", "thi", "how", "it", "appear", "reorder", "reorder", "method", "overrid", "default", "scope", "order", "exampl", "rubi", "class", "articl", "activerecord", "activ", "record", ":base", "ha", "mani", "comment", "order", "'post", "at", "desc", "end", "articl", "find", "10", "comment", "reorder", "'name", "sql", "that", "would", "execut", "sql", "select", "comment", "where", "articl", "id", "10", "order", "by", "name", "case", "reorder", "claus", "not", "use", "sql", "execut", "would", "sql", "select", "comment", "where", "articl", "id", "10", "order", "by", "post", "at", "desc", "current", "sql", "claus", "abov", "appear", "as", "sql", "select", "articl", "where", "id", "10", "order", "by", "name", "sql", "select", "articl", "where", "id", "10", "order", "by", "post", "at", "desc", "thi", "correctli", "updat", "queri", "as", "well", "as", "fix", "align", "some", "tabl"], "B_body": "I checked the rails guides recently and found that query in the reorder is not correct. I corrected it and pushed that yesterday and it was merged. But today there was a change i.e to move from post to article and found the same mistake.\n\nIn getting the the comments of article reordered by name there must be two things:-\n\nCurrent Query:-\nSELECT \\* FROM articles WHERE id = 10 ORDER BY name\n\nIdeally It should be:-\nSELECT \\* FROM articles WHERE id = 10\nSELECT \\* FROM comments WHERE article_id = 10 ORDER BY name\n1. It hit two queries on database first to load article and then comments but It is showing one.\n2. Ordering is done of post but it should be of comments\n\nSame case for default case without any reorder i.e order by posted_at  :-\n\nCurrent query is:-\nSELECT \\* FROM articles WHERE id = 10 ORDER BY posted_at DESC\n\nIt should be:-\n\nSELECT \\* FROM articles WHERE id = 10\nSELECT \\* FROM comments WHERE article_id = 10 ORDER BY posted_at DESC\n", "B_clean_body": ["check", "rail", "guid", "recent", "found", "that", "queri", "reorder", "not", "correct", "correct", "it", "push", "that", "yesterday", "it", "wa", "merg", "but", "today", "there", "wa", "chang", "move", "post", "articl", "found", "same", "mistak", "get", "comment", "articl", "reorder", "by", "name", "there", "must", "two", "thing", "current", "queri", "select", "articl", "where", "id", "10", "order", "by", "name", "ideal", "it", "select", "articl", "where", "id", "10", "select", "comment", "where", "articl", "id", "10", "order", "by", "name", "it", "hit", "two", "queri", "databas", "first", "load", "articl", "then", "comment", "but", "it", "show", "one", "order", "done", "post", "but", "it", "comment", "same", "case", "default", "case", "without", "ani", "reorder", "order", "by", "post", "at", "current", "queri", "select", "articl", "where", "id", "10", "order", "by", "post", "at", "desc", "it", "select", "articl", "where", "id", "10", "select", "comment", "where", "articl", "id", "10", "order", "by", "post", "at", "desc"], "title_sim": [0.5860813331290564], "body_sim": [0.8210594299368913], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.38029864400121416, 0.38029864400121416], "location_sim": [0.4827586206896552, 0.5490196078431373], "pattern": 0, "time": 0}, {"A_title": "`#as_json` isolates options when encoding a hash. Closes #8182", "A_clean_title": ["as", "json", "isol", "option", "when", "encod", "hash", "close", "8182"], "B_title": "Issue with JSON serialization", "B_clean_title": ["issu", "json", "serial"], "A_body": "I modified the `Encoder` so that duplicates of the original `options` hash are passed around. I'm not sure if there are cases where we actually wan't the side effects but all the tests passed.\n\nThis is a fix #8182\n", "A_clean_body": ["modifi", "encod", "so", "that", "duplic", "origin", "option", "hash", "are", "pass", "around", "'m", "not", "sure", "there", "are", "case", "where", "we", "actual", "wa", "n't", "side", "effect", "but", "all", "test", "pass", "thi", "fix", "8182"], "B_body": "Suppose we have simple model with custom `as_json`:\n\n``` ruby\nclass TestModel < ActiveRecord::Base\n\n  def some_method\n    'test output'\n  end\n\n  def as_json(options={})\n    options[:methods] ||= []\n    options[:methods].push(:some_method)\n    super options\n  end\nend\n```\n\nAnd we want to serialize array of 10 records:\n\n``` ruby\n([TestModel.new] * 10).as_json\n```\n\nExpected behaviour (for me) is that `some_method` will be called just 10 times. But I get 55 instead :smile:. This is because of modification of `options` variable, which passed in `super`\n\nI've tested it with rails 3.2, 3.0.9 and latest master. With ActiveRecord and MongoMapper.\n", "B_clean_body": ["suppos", "we", "have", "simpl", "model", "custom", "as", "json", "rubi", "class", "testmodel", "test", "model", "activerecord", "activ", "record", ":base", "def", "some", "method", "'test", "output'", "end", "def", "as", "json", "options=", "option", "method", "option", "method", "push", "some", "method", "super", "option", "end", "end", "we", "want", "serial", "array", "10", "record", "rubi", "testmodel", "new", "test", "model", "10", "as", "json", "expect", "behaviour", "me", "that", "some", "method", "will", "call", "just", "10", "time", "but", "get", "55", "instead", "smile", "thi", "becaus", "modif", "option", "variabl", "which", "pass", "super", "'ve", "test", "it", "rail", "latest", "master", "activerecord", "activ", "record", "mongomapp", "mongo", "mapper"], "title_sim": [0.16371410384791638], "body_sim": [0.21700054024940044], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.32038042125430555, 0.2694432451567174], "location_sim": [0.1917808219178082, 0.2222222222222222], "pattern": -1, "time": 110}, {"A_title": "Distance of time in words should work correct if from time > to_time", "A_clean_title": ["distanc", "time", "word", "work", "correct", "time", "time"], "B_title": "distance_of_time_in_words inconsistency between code and documentation", "B_clean_title": ["distanc", "time", "word", "inconsist", "between", "code", "document"], "A_body": "In accordance with documentation https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/date_helper.rb#L63-64 `distance_of_time_in_words` should have the same result independent of args order.\n\nBecause of leap years trick https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/date_helper.rb#L97-102 result for long time distances can differ.\n\nIn the test case which I added result was 'about 28 years' instead of 'almost 28 years`\n", "A_clean_body": ["accord", "document", "http", "rb", "github", "helper", "com", "rail", "rail", "blob", "master", "actionpack", "lib", "action", "view", "helper", "date", "l63", "64", "distanc", "time", "word", "have", "same", "result", "independ", "arg", "order", "becaus", "leap", "year", "trick", "http", "rb", "github", "helper", "com", "rail", "rail", "blob", "master", "actionpack", "lib", "action", "view", "helper", "date", "l97", "102", "result", "long", "time", "distanc", "differ", "test", "case", "which", "ad", "result", "wa", "'about", "28", "year", "instead", "'almost", "28", "year"], "B_body": "`distance_of_time_in_words` documentation isn't consistent on what the method does.\n\n`distance_of_time_in_words(1.minute + 59.seconds)`\nshould return \n`\"2 minutes\"`\nbut is returning\n`\"1 minute\"`\n\nSo, either the method documentation or the code itself are wrong.\nI've pull-requested a solution assuming that the error is in the code rather than in the documentation.\n\nAny suggestions?\n", "B_clean_body": ["distanc", "time", "word", "document", "n't", "consist", "what", "method", "distanc", "time", "word", "minut", "59", "second", "return", "minut", "but", "return", "minut", "so", "either", "method", "document", "or", "code", "itself", "are", "wrong", "'ve", "pull", "request", "solut", "assum", "that", "error", "code", "rather", "than", "document", "ani", "suggest"], "title_sim": [0.614948217333131], "body_sim": [0.1778680671628279], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.9814629123084662, 0.9814629123084662], "location_sim": [0.7821782178217822, 0.7821782178217822], "pattern": 0, "time": 19}, {"A_title": "Fix `new_cipher': uninitialized constant #<Class:Rails::Secrets>::OpenSSL (NameError)", "A_clean_title": ["fix", "new", "cipher", "uniniti", "constant", "class", "rail", ":secret", ":openssl", ":open", "ssl", "nameerror", "name", "error"], "B_title": "Update secrets to use modern crypto", "B_clean_title": ["updat", "secret", "use", "modern", "crypto"], "A_body": "rails 5.1.0 master\r\nruby-head\r\n\r\n~~~\r\nMacbook-Pro:test_app sharevari$ bundle exec rails secrets:setup\r\n  from bin/rails:4:in `<main>'\r\n  from bin/rails:4:in `load'\r\n  from /Users/sharevari/repository/sharevari/test_app/bin/spring:16:in `<top (required)>'\r\n  from /Users/sharevari/repository/sharevari/test_app/bin/spring:16:in `require'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/spring-2.0.1/lib/spring/binstub.rb:31:in `<top (required)>'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/spring-2.0.1/lib/spring/binstub.rb:31:in `load'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/spring-2.0.1/bin/spring:49:in `<top (required)>'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/spring-2.0.1/lib/spring/client.rb:30:in `run'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/spring-2.0.1/lib/spring/client/command.rb:7:in `call'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/spring-2.0.1/lib/spring/client/rails.rb:28:in `call'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/spring-2.0.1/lib/spring/client/rails.rb:28:in `load'\r\n  from /Users/sharevari/repository/sharevari/test_app/bin/rails:10:in `<top (required)>'\r\n  from /Users/sharevari/repository/sharevari/test_app/bin/rails:10:in `require'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/bundler/gems/rails-89d5d975e540/railties/lib/rails/commands.rb:16:in `<top (required)>'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/bundler/gems/rails-89d5d975e540/railties/lib/rails/command.rb:44:in `invoke'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/bundler/gems/rails-89d5d975e540/railties/lib/rails/command/base.rb:63:in `perform'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor.rb:369:in `dispatch'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/invocation.rb:126:in `invoke_command'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/command.rb:27:in `run'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/bundler/gems/rails-89d5d975e540/railties/lib/rails/commands/secrets/secrets_command.rb:17:in `setup'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/base.rb:444:in `start'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/group.rb:232:in `dispatch'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/invocation.rb:133:in `invoke_all'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/invocation.rb:133:in `map'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/invocation.rb:133:in `each'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/invocation.rb:133:in `block in invoke_all'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/invocation.rb:126:in `invoke_command'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/gems/thor-0.19.4/lib/thor/command.rb:27:in `run'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/bundler/gems/rails-89d5d975e540/railties/lib/rails/generators/rails/encrypted_secrets/encrypted_secrets_generator.rb:9:in `add_secrets_key_file'\r\n  from /Users/sharevari/.rvm/gems/ruby-head@test/bundler/gems/rails-89d5d975e540/railties/lib/rails/secrets.rb:33:in `generate_key'\r\n/Users/sharevari/.rvm/gems/ruby-head@test/bundler/gems/rails-89d5d975e540/railties/lib/rails/secrets.rb:101:in `new_cipher': uninitialized constant #<Class:Rails::Secrets>::OpenSSL (NameError)\r\n~~~\r\n", "A_clean_body": ["rail", "master", "rubi", "head", "macbook", "pro", "test", "app", "sharevari", "bundl", "exec", "rail", "secret", "setup", "bin", "rails:4", "main", "bin", "rails:4", "load'", "user", "sharevari", "repositori", "sharevari", "test", "app", "bin", "spring:16", "top", "requir", "user", "sharevari", "repositori", "sharevari", "test", "app", "bin", "spring:16", "require'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "spring", "rb:31", "lib", "spring", "binstub", "top", "requir", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "spring", "rb:31", "lib", "spring", "binstub", "load'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "spring", "bin", "spring:49", "top", "requir", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "spring", "rb:30", "lib", "spring", "client", "run'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "spring", "rb:7", "lib", "spring", "client", "command", "call'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "spring", "rb:28", "lib", "spring", "client", "rail", "call'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "spring", "rb:28", "lib", "spring", "client", "rail", "load'", "user", "sharevari", "repositori", "sharevari", "test", "app", "bin", "rails:10", "top", "requir", "user", "sharevari", "repositori", "sharevari", "test", "app", "bin", "rails:10", "require'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "bundler", "gem", "rail", "rb:16", "89d5d975e540", "railti", "lib", "rail", "command", "top", "requir", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "bundler", "gem", "rail", "rb:44", "89d5d975e540", "railti", "lib", "rail", "command", "invoke'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "bundler", "gem", "rail", "rb:63", "89d5d975e540", "railti", "lib", "rail", "command", "base", "perform'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:369", "lib", "thor", "dispatch'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:126", "lib", "thor", "invoc", "invok", "command'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:27", "lib", "thor", "command", "run'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "bundler", "gem", "rail", "rb:17", "command", "89d5d975e540", "railti", "lib", "rail", "command", "secret", "secret", "setup'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:444", "lib", "thor", "base", "start'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:232", "lib", "thor", "group", "dispatch'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:133", "lib", "thor", "invoc", "invok", "all'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:133", "lib", "thor", "invoc", "map'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:133", "lib", "thor", "invoc", "each'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:133", "lib", "thor", "invoc", "block", "invok", "all'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:126", "lib", "thor", "invoc", "invok", "command'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "gem", "thor", "19", "rb:27", "lib", "thor", "command", "run'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "bundler", "gem", "rail", "rb:9", "secret", "gener", "89d5d975e540", "railti", "lib", "rail", "gener", "rail", "encrypt", "secret", "encrypt", "add", "secret", "key", "file'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "bundler", "gem", "rail", "rb:33", "89d5d975e540", "railti", "lib", "rail", "secret", "gener", "key'", "head", "user", "sharevari", "rvm", "gem", "rubi", "test", "bundler", "gem", "rail", "rb:101", "89d5d975e540", "railti", "lib", "rail", "secret", "new", "cipher", "uniniti", "constant", "class", "rail", ":secret", ":openssl", ":open", "ssl", "nameerror", "name", "error"], "B_body": "Fixes #28135 by replacing the default mode with AES-128-GCM, allowing the mode to be configured manually, correctly generating keys, and using a random initialization vector on every encryption.", "B_clean_body": ["fix", "28135", "by", "replac", "default", "mode", "ae", "128", "gcm", "allow", "mode", "configur", "manual", "correctli", "gener", "key", "random", "initi", "vector", "everi", "encrypt"], "title_sim": [0.05093386847318038], "body_sim": [0.05562639121508927], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.15789473684210525, 0.19148936170212766], "pattern": -1, "time": 5}, {"A_title": "Add ability to override base job class for ActionMailer async delivery", "A_clean_title": ["add", "abil", "overrid", "base", "job", "class", "actionmail", "action", "mailer", "async", "deliveri"], "B_title": "AM::Delivery job configuration", "B_clean_title": ["am", ":deliveri", "job", "configur"], "A_body": "Fixes #19793\n", "A_clean_body": ["fix", "19793"], "B_body": "@matthewd @senny\n", "B_clean_body": ["matthewd", "senni"], "title_sim": [0.25044754425362414], "body_sim": [0.009038602812058608], "file_list_sim": 0.125, "overlap_files_len": 1, "code_sim": [0.8058085735996566, 0.4169471584269882], "location_sim": [0.19642857142857142, 1.0], "pattern": 0, "time": 208}, {"A_title": "Fixed style break when clicking \"About your application\u2019s environment\" on no-root-route/welcome page", "A_clean_title": ["fix", "style", "break", "when", "click", "about", "your", "applic", "environ", "no", "root", "rout", "welcom", "page"], "B_title": "Fix info page style", "B_clean_title": ["fix", "info", "page", "style"], "A_body": "Fixed style break when clicking \"About your application\u2019s environment\" on no-root-route/welcome page\n", "A_clean_body": ["fix", "style", "break", "when", "click", "about", "your", "applic", "environ", "no", "root", "rout", "welcom", "page"], "B_body": "When I click link \"About your application's environment\" at welcome page, the page style (such as font, background color etc) are broken. (see the following images.)\n\nThis cause is that the partial page loaded by xhr contains their own css.\n\nSo I stop containing css in loaded page.\n\n---\n\nBefore click:\n![ 2013-01-04 15 51 05](https://f.cloud.github.com/assets/290782/42622/33f23390-563b-11e2-80c4-87c596d6f301.png)\n\nAfter click:\n![ 2013-01-04 15 51 17](https://f.cloud.github.com/assets/290782/42621/33c2d00a-563b-11e2-9ae6-f24e4ae31590.png)\n", "B_clean_body": ["when", "click", "link", "about", "your", "applic", "'s", "environ", "at", "welcom", "page", "page", "style", "such", "as", "font", "background", "color", "etc", "are", "broken", "see", "follow", "imag", "thi", "caus", "that", "partial", "page", "load", "by", "xhr", "contain", "their", "own", "css", "so", "stop", "contain", "css", "load", "page", "befor", "click", "2013", "01", "04", "15", "51", "05", "http", "563b", "11e2", "80c4", "cloud", "github", "87c596d6f301", "png", "com", "asset", "290782", "42622", "33f23390", "after", "click", "2013", "01", "04", "15", "51", "17", "http", "563b", "11e2", "9ae6", "cloud", "github", "f24e4ae31590", "png", "com", "asset", "290782", "42621", "33c2d00a"], "title_sim": [0.4423519266751466], "body_sim": [0.4311037607501782], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.7586206896551724, 1.0], "pattern": 0, "time": 0}, {"A_title": "Fixing build broken by this change", "A_clean_title": ["fix", "build", "broken", "by", "thi", "chang"], "B_title": "Code cleanup for ActionDispatch::Flash#call", "B_clean_title": ["code", "cleanup", "actiondispatch", "action", "dispatch", ":flash", "call"], "A_body": "c43ca06ca091fc09e2c86bb051ac92b648f12b64\n", "A_clean_body": ["c43ca06ca091fc09e2c86bb051ac92b648f12b64"], "B_body": "Here I include a fix for the broken specs in railties as reported here\nhttps://github.com/rails/rails/pull/10580#issuecomment-17788152\n", "B_clean_body": ["here", "includ", "fix", "broken", "spec", "railti", "as", "report", "here", "http", "github", "com", "rail", "rail", "pull", "10580", "issuecom", "17788152"], "title_sim": [-0.0019658864499698375], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Fix mysql to support duplicated column names", "A_clean_title": ["fix", "mysql", "support", "duplic", "column", "name"], "B_title": "Fix retrieving duplicated columns with mysql", "B_clean_title": ["fix", "retriev", "duplic", "column", "mysql"], "A_body": "This will fix the [broken test](https://github.com/rails/rails/commit/4a2650836680f51490e999c3c8441a2f9adff96e)  `test_with_limiting_with_custom_select`.\n\nThe query's result was built in a hash with column name as key, if the\nresult have a duplicated column name the last value was\noverriding the first one.\n", "A_clean_body": ["thi", "will", "fix", "broken", "test", "http", "github", "com", "rail", "rail", "commit", "4a2650836680f51490e999c3c8441a2f9adff96", "test", "limit", "custom", "select", "queri", "'s", "result", "wa", "built", "hash", "column", "name", "as", "key", "result", "have", "duplic", "column", "name", "last", "valu", "wa", "overrid", "first", "one"], "B_body": "This fixes SQL queries with MySQL where the same name is used several times for the same column, therefore [breaking the build](https://travis-ci.org/rails/rails/jobs/15329752#L1172).\n\nWhen a field is named several times, second and further occurencies get prepended the name \"_x\" where x is the index.\n", "B_clean_body": ["thi", "fix", "sql", "queri", "mysql", "my", "sql", "where", "same", "name", "use", "sever", "time", "same", "column", "therefor", "break", "build", "http", "travi", "ci", "org", "rail", "rail", "job", "15329752", "l1172", "when", "field", "name", "sever", "time", "second", "further", "occur", "get", "prepend", "name", "where", "index"], "title_sim": [0.7337988349121093], "body_sim": [0.2756593098670127], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0494582038390796, 0.0494582038390796], "location_sim": [0.8372093023255814, 1.0], "pattern": 0, "time": 0}, {"A_title": "Fix single-quotes string interpolation", "A_clean_title": ["fix", "singl", "quot", "string", "interpol"], "B_title": "Fix a bug with initialize schema_migrations table", "B_clean_title": ["fix", "bug", "initi", "schema", "migrat", "tabl"], "A_body": "This line was throwing an error for me when migrating.\n\n`ActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  syntax error at or near \"{\"\nLINE 1: ...NSERT INTO \"schema_migrations\" (version) VALUES (#{v}), (#{v...`\n", "A_clean_body": ["thi", "line", "wa", "throw", "error", "me", "when", "migrat", "activerecord", "activ", "record", ":statementinvalid", ":statement", "invalid", "pg", ":syntaxerror", ":syntax", "error", "error", "syntax", "error", "at", "or", "near", "line", "nsert", "into", "schema", "migrat", "version", "valu"], "B_body": "Performing a command `bundle exec rake db:drop db:create db:schema:load --trace` I get the following error:\n\n``` ruby\n-- initialize_schema_migrations_table()\n   -> 0.0081s\nrake aborted!\nActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  syntax error at or near \"{\"\nLINE 1: ...NSERT INTO \"schema_migrations\" (version) VALUES (#{v}), (#{v...\n                                                             ^\n: INSERT INTO \"schema_migrations\" (version) VALUES (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (\n#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v}), (#{v})\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:133:in `async_exec'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:133:in `block in execu\nte'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:528:in `block in log'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:522:in `log'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:132:in `execute'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:995:in `assume_migrated_up\nto_version'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/schema.rb:52:in `define'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/schema.rb:44:in `define'\n/Users/mgrachev/mm/db/schema.rb:14:in `<top (required)>'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activesupport/lib/active_support/dependencies.rb:296:in `load'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activesupport/lib/active_support/dependencies.rb:296:in `block in load'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activesupport/lib/active_support/dependencies.rb:268:in `load_dependency'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activesupport/lib/active_support/dependencies.rb:296:in `load'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/tasks/database_tasks.rb:216:in `load_schema'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/tasks/database_tasks.rb:246:in `block in load_schema_current'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/tasks/database_tasks.rb:286:in `block in each_current_configuration'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/tasks/database_tasks.rb:285:in `each'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/tasks/database_tasks.rb:285:in `each_current_configuration'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/tasks/database_tasks.rb:245:in `load_schema_current'\n/Users/mgrachev/mm/vendor/bundle/bundler/gems/rails-9864bcee8cfd/activerecord/lib/active_record/railties/databases.rake:260:in `block (3 levels) in <top (required)>'\n/Users/mgrachev/mm/vendor/bundle/gems/rake-10.5.0/lib/rake/task.rb:240:in `call'\n/Users/mgrachev/mm/vendor/bundle/gems/rake-10.5.0/lib/rake/task.rb:240:in `block in execute'\n/Users/mgrachev/mm/vendor/bundle/gems/rake-10.5.0/lib/rake/task.rb:235:in `each'\n/Users/mgrachev/mm/vendor/bundle/gems/rake-10.5.0/lib/rake/task.rb:235:in `execute'\n```\n", "B_clean_body": ["perform", "command", "bundl", "exec", "rake", "db", "drop", "db", "creat", "db", "schema", "load", "trace", "get", "follow", "error", "rubi", "initi", "schema", "migrat", "tabl", "0081", "rake", "abort", "activerecord", "activ", "record", ":statementinvalid", ":statement", "invalid", "pg", ":syntaxerror", ":syntax", "error", "error", "syntax", "error", "at", "or", "near", "line", "nsert", "into", "schema", "migrat", "version", "valu", "insert", "into", "schema", "migrat", "version", "valu", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:133", "statement", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "connect", "adapt", "postgresql", "databas", "async", "exec'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:133", "statement", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "connect", "adapt", "postgresql", "databas", "block", "execu", "te'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:528", "adapt", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "connect", "adapt", "abstract", "block", "log'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:21", "9864bcee8cfd", "activesupport", "lib", "activ", "support", "notif", "instrument", "instrument'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:522", "adapt", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "connect", "adapt", "abstract", "log'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:132", "statement", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "connect", "adapt", "postgresql", "databas", "execute'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:995", "statement", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "connect", "adapt", "abstract", "schema", "assum", "migrat", "up", "version'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:52", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "schema", "define'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:44", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "schema", "define'", "rb:14", "user", "mgrachev", "mm", "db", "schema", "top", "requir", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:296", "9864bcee8cfd", "activesupport", "lib", "activ", "support", "depend", "load'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:296", "9864bcee8cfd", "activesupport", "lib", "activ", "support", "depend", "block", "load'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:268", "9864bcee8cfd", "activesupport", "lib", "activ", "support", "depend", "load", "dependency'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:296", "9864bcee8cfd", "activesupport", "lib", "activ", "support", "depend", "load'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:216", "task", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "task", "databas", "load", "schema'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:246", "task", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "task", "databas", "block", "load", "schema", "current'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:286", "task", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "task", "databas", "block", "each", "current", "configuration'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:285", "task", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "task", "databas", "each'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:285", "task", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "task", "databas", "each", "current", "configuration'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rb:245", "task", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "task", "databas", "load", "schema", "current'", "user", "mgrachev", "mm", "vendor", "bundl", "bundler", "gem", "rail", "rake:260", "9864bcee8cfd", "activerecord", "lib", "activ", "record", "railti", "databas", "block", "level", "top", "requir", "user", "mgrachev", "mm", "vendor", "bundl", "gem", "rake", "10", "rb:240", "lib", "rake", "task", "call'", "user", "mgrachev", "mm", "vendor", "bundl", "gem", "rake", "10", "rb:240", "lib", "rake", "task", "block", "execute'", "user", "mgrachev", "mm", "vendor", "bundl", "gem", "rake", "10", "rb:235", "lib", "rake", "task", "each'", "user", "mgrachev", "mm", "vendor", "bundl", "gem", "rake", "10", "rb:235", "lib", "rake", "task", "execute'"], "title_sim": [0.07733650014404289], "body_sim": [0.30729524546187803], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Make the isolated tests run on JRuby", "A_clean_title": ["make", "isol", "test", "run", "jrubi", "rubi"], "B_title": "Don't parallelize tests running on jruby", "B_clean_title": ["n't", "parallel", "test", "run", "jrubi"], "A_body": "Hello,\n\nThis pull request make the tests correctly run in isolation for JRuby. As there is no forking on JRuby, we need to spawn sub-processes to make the tests run in isolation.\n\nPreviously, we were defining globally env variables and running the test file through back-ticks and delete these variables once the test ran.\n\nNow, we simply rely on `IO.popen` as this is cross-platform and the env variables are available during the child-process execution only so there are no race conditions.\n\nThus, we no longer get \"ArgumentError: marshal data too short\" when running `rake test:isolated`. The only drawback we can see is that since we are using `Process.wait`, on computers with a tiny CPU, the test suite is bit slower to run. \n\nMost of the work have been done by Ben here by the way!\n\nHave a nice day.\n", "A_clean_body": ["hello", "thi", "pull", "request", "make", "test", "correctli", "run", "isol", "jrubi", "rubi", "as", "there", "no", "fork", "jrubi", "rubi", "we", "need", "spawn", "sub", "process", "make", "test", "run", "isol", "previous", "we", "were", "defin", "global", "env", "variabl", "run", "test", "file", "through", "back", "tick", "delet", "these", "variabl", "onc", "test", "ran", "now", "we", "simpli", "reli", "io", "popen", "as", "thi", "cross", "platform", "env", "variabl", "are", "avail", "dure", "child", "process", "execut", "onli", "so", "there", "are", "no", "race", "condit", "thu", "we", "no", "longer", "get", "argumenterror", "argument", "error", "marshal", "data", "too", "short", "when", "run", "rake", "test", "isol", "onli", "drawback", "we", "see", "that", "sinc", "we", "are", "process", "wait", "comput", "tini", "cpu", "test", "suit", "bit", "slower", "run", "most", "work", "have", "been", "done", "by", "ben", "here", "by", "way", "have", "nice", "day"], "B_body": "Running tests using Minitest's `parallelize_me!` leads to the following\nerror:\n\n``` ruby\n\nArgumentError: marshal data too short\n        load at org/jruby/RubyMarshal.java:150\n         run at\n/home/travis/build/rails/rails/activesupport/lib/active_support/testing/isolation.rb:82\n  _run_suite at\n/home/travis/build/rails/rails/vendor/bundle/jruby/1.9/gems/minitest-4.7.5/lib/minitest/unit.rb:933\n        each at\n/home/travis/build/rails/rails/vendor/bundle/jruby/1.9/gems/minitest-4.7.5/lib/minitest/parallel_each.rb:45\nrake aborted!\n```\n\nFull Log here:\nhttps://s3.amazonaws.com/archive.travis-ci.org/jobs/16812844/log.txt\n\nAbove Error Occurs in many railties, ap, amo, av when tests are run on jruby. with this patch, atleast the tests would compete & not due due weird threading issues. \n#11700\n", "B_clean_body": ["run", "test", "minitest", "'s", "parallel", "me", "lead", "follow", "error", "rubi", "argumenterror", "argument", "error", "marshal", "data", "too", "short", "load", "at", "java:150", "org", "jrubi", "rubymarsh", "rubi", "marshal", "run", "at", "rb:82", "home", "travi", "build", "rail", "rail", "activesupport", "lib", "activ", "support", "test", "isol", "run", "suit", "at", "rb:933", "home", "travi", "build", "rail", "rail", "vendor", "bundl", "jrubi", "gem", "minitest", "lib", "minitest", "unit", "each", "at", "rb:45", "home", "travi", "build", "rail", "rail", "vendor", "bundl", "jrubi", "gem", "minitest", "each", "lib", "minitest", "parallel", "rake", "abort", "full", "log", "here", "http", "amazonaw", "travi", "ci", "txt", "s3", "com", "archiv", "org", "job", "16812844", "log", "abov", "error", "occur", "mani", "railti", "ap", "amo", "av", "when", "test", "are", "run", "jrubi", "thi", "patch", "atleast", "test", "would", "compet", "not", "due", "due", "weird", "thread", "issu", "11700"], "title_sim": [0.47597433827613683], "body_sim": [0.45750717445374567], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 159}, {"A_title": "Detect in-place changes on mutable attributes on Active Model", "A_clean_title": ["detect", "place", "chang", "mutabl", "attribut", "activ", "model"], "B_title": "Hstore columns should always be saved, if changed or not", "B_clean_title": ["hstore", "column", "alway", "save", "chang", "or", "not"], "A_body": "We have several mutable types on Active Record now. (Serialized, JSON,\nHStore). We need to be able to detect if these have been modified in\nplace. By storing the hashed value of the original attribute, we can\nachieve this without significantly increasing memory usage or time for\ndirty checking per-record.\n\nfixes #8328\n", "A_clean_body": ["we", "have", "sever", "mutabl", "type", "activ", "record", "now", "serial", "json", "hstore", "store", "we", "need", "abl", "detect", "these", "have", "been", "modifi", "place", "by", "store", "hash", "valu", "origin", "attribut", "we", "achiev", "thi", "without", "significantli", "increas", "memori", "usag", "or", "time", "dirti", "check", "per", "record", "fix", "8328"], "B_body": "According to issue: https://github.com/rails/rails/issues/6127 changes to Hstore columns were not saved unless marked with ***_will_change!**. This Pull Request is going to fix that by introducing a list of columns that should always be saved if their were changed or not. \n\n**dirty_attribute_names** is a class variable added to **dirty.rb**.\nIf a column name will be added to that list all then AR will always update that attribute. \n\nPotentially the **serialized_attributes** may be managed with **dirty_attribute_names** so we can have only one way to deal with those things. \n\nTested over ruby-2.0.0-p0 and postgresql 9.2.3.\n", "B_clean_body": ["accord", "issu", "http", "github", "com", "rail", "rail", "issu", "6127", "chang", "hstore", "column", "were", "not", "save", "unless", "mark", "will", "chang", "thi", "pull", "request", "go", "fix", "that", "by", "introduc", "list", "column", "that", "alway", "save", "their", "were", "chang", "or", "not", "**dirti", "attribut", "names**", "class", "variabl", "ad", "**dirti", "rb**", "column", "name", "will", "ad", "that", "list", "all", "then", "ar", "will", "alway", "updat", "that", "attribut", "potenti", "**serial", "attributes**", "may", "manag", "**dirti", "attribut", "names**", "so", "we", "have", "onli", "one", "way", "deal", "those", "thing", "test", "over", "rubi", "p0", "postgresql"], "title_sim": [0.10358755925208311], "body_sim": [0.2117066626510808], "file_list_sim": 0.15384615384615385, "overlap_files_len": 2, "code_sim": [0.20979153606803208, 0.3401239715271369], "location_sim": [0.11842105263157894, 0.34615384615384615], "pattern": -1, "time": 423}, {"A_title": "Enable Travis CI container-mode", "A_clean_title": ["enabl", "travi", "ci", "contain", "mode"], "B_title": "Try out the new Docker queue", "B_clean_title": ["tri", "out", "new", "docker", "queue"], "A_body": "http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/\n", "A_clean_body": ["http", "12", "17", "faster", "build", "contain", "base", "travi", "ci", "infrastructur", "blog", "com", "2014"], "B_body": "Also a little .travis.yml cleanup\n\nPlease don't merge yet\n", "B_clean_body": ["also", "littl", "travi", "yml", "cleanup", "pleas", "n't", "merg", "yet"], "title_sim": [-0.04325072661242551], "body_sim": [0.06228525719894071], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.9354838709677419, 0.9354838709677419], "pattern": 0, "time": 118}, {"A_title": "Raise an error if loading pg structure file fails", "A_clean_title": ["rais", "error", "load", "pg", "structur", "file", "fail"], "B_title": "Add method to run command-line db apps", "B_clean_title": ["add", "method", "run", "command", "line", "db", "app"], "A_body": "Hi all. When dumping the db structure file for PG we raise an error if the shelled out command fails, but we don't raise an error when loading the file. I added a consistent exception for this case.\n\nI was pulling my hair out trying to figure out why my tables were not loaded despite a 0 exit code from the task. Turns out I didn't have the postgresql client tools installed.\n\nxoxo Nick\n", "A_clean_body": ["hi", "all", "when", "dump", "db", "structur", "file", "pg", "we", "rais", "error", "shell", "out", "command", "fail", "but", "we", "n't", "rais", "error", "when", "load", "file", "ad", "consist", "except", "thi", "case", "wa", "pull", "my", "hair", "out", "tri", "figur", "out", "whi", "my", "tabl", "were", "not", "load", "despit", "exit", "code", "task", "turn", "out", "did", "n't", "have", "postgresql", "client", "tool", "instal", "xoxo", "nick"], "B_body": "raise error unless Kernel.system returns true in structure_load()\n", "B_clean_body": ["rais", "error", "unless", "kernel", "system", "return", "true", "structur", "load"], "title_sim": [-0.02588413647235593], "body_sim": [0.36637392972182437], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.27102803738317754, 0.90625], "pattern": 0, "time": 134}, {"A_title": "Duplicate the through_reflection's scope_chain before changing it. Fixes issue #12004", "A_clean_title": ["duplic", "through", "reflect", "'s", "scope", "chain", "befor", "chang", "it", "fix", "issu", "12004"], "B_title": "scope_chain should not be mutated for other reflections", "B_clean_title": ["scope", "chain", "not", "mutat", "other", "reflect"], "A_body": "Duplicate the through_reflection's scope_chain before changing it, otherwise it messes up future queries in certain edge-cases.\nFixes issue [#12004](https://github.com/rails/rails/issues/12004)\n\nThe scenario is:\nA model has 2 has_many double through polymorphic associations (Inventory has_many Orders, Inventory has_many OrderItems through Orders, Inventory has_many [Plans, Items] through OrderItem polymorphic).\nCalling Inventory.first.items messes up the later call to Inventory.first.plans, and vice-versa.\n\nDidn't think a test-case is needed for such a far-fetched edge case. What do you think?\n", "A_clean_body": ["duplic", "through", "reflect", "'s", "scope", "chain", "befor", "chang", "it", "otherwis", "it", "mess", "up", "futur", "queri", "certain", "edg", "case", "fix", "issu", "12004", "http", "github", "com", "rail", "rail", "issu", "12004", "scenario", "model", "ha", "ha", "mani", "doubl", "through", "polymorph", "associ", "inventori", "ha", "mani", "order", "inventori", "ha", "mani", "orderitem", "order", "item", "through", "order", "inventori", "ha", "mani", "plan", "item", "through", "orderitem", "order", "item", "polymorph", "call", "inventori", "first", "item", "mess", "up", "later", "call", "inventori", "first", "plan", "vice", "versa", "did", "n't", "think", "test", "case", "need", "such", "far", "fetch", "edg", "case", "what", "you", "think"], "B_body": "Currently `scope_chain` uses same array for building different\n`scope_chain` for different associations. During processing\nthese arrays are sometimes mutated and because of in-place\nmutation the changed `scope_chain` impacts other reflections.\n\nFix is to dup the value before adding to the `scope_chain`.\n\nFixes #3882.\n", "B_clean_body": ["current", "scope", "chain", "use", "same", "array", "build", "differ", "scope", "chain", "differ", "associ", "dure", "process", "these", "array", "are", "sometim", "mutat", "becaus", "place", "mutat", "chang", "scope", "chain", "impact", "other", "reflect", "fix", "dup", "valu", "befor", "ad", "scope", "chain", "fix", "3882"], "title_sim": [0.7250901989614295], "body_sim": [0.22995881409008867], "file_list_sim": 0.15, "overlap_files_len": 3, "code_sim": [0.22660851989180164, 0.5251086042517462], "location_sim": [0.3229166666666667, 0.7045454545454546], "pattern": -1, "time": 118}, {"A_title": "updated documentation to be consistant with strong parameters", "A_clean_title": ["updat", "document", "consist", "strong", "paramet"], "B_title": "Improve Getting Started Guide", "B_clean_title": ["improv", "get", "start", "guid"], "A_body": "getting_started.md said that we will \"Almost be able to create a post\" because we had not setup the strong parameters. The strong parameters had been setup previously as required in rails as of 4.0 so this error does not happen.\n", "A_clean_body": ["md", "get", "start", "said", "that", "we", "will", "almost", "abl", "creat", "post", "becaus", "we", "had", "not", "setup", "strong", "paramet", "strong", "paramet", "had", "been", "setup", "previous", "as", "requir", "rail", "as", "so", "thi", "error", "not", "happen"], "B_body": "Connected with #11182\n\nRemoved permitting of the `params` in the section 5.6, because it's will be added only in 5.7.\n", "B_clean_body": ["connect", "11182", "remov", "permit", "param", "section", "becaus", "it", "'s", "will", "ad", "onli"], "title_sim": [-0.01744099664377516], "body_sim": [0.08497081326235542], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.6545454545454545, 0.6545454545454545], "pattern": -1, "time": 0}, {"A_title": "remove calls to sql_type on pg columns", "A_clean_title": ["remov", "call", "sql", "type", "pg", "column"], "B_title": "fix for #10613 . This PR is still WIP.", "B_clean_title": ["fix", "10613", "thi", "pr", "still", "wip"], "A_body": "This fixes #10613 (for me at least).\n\nI've never dug into this code before, but what I ended up with looks very similar to @tenderlove's commit 4b4c8bdc776e2d42cd070d9cb1b3cc22f82469b1, which makes me think I'm on the right track.\n\nIf there's anything else I should be doing, please let me know. I'm really looking forward to getting this bug fixed. Thanks!\n", "A_clean_body": ["thi", "fix", "10613", "me", "at", "least", "'ve", "never", "dug", "into", "thi", "code", "befor", "but", "what", "end", "up", "look", "veri", "similar", "tenderlov", "'s", "commit", "4b4c8bdc776e2d42cd070d9cb1b3cc22f82469b1", "which", "make", "me", "think", "'m", "right", "track", "there", "'s", "anyth", "do", "pleas", "let", "me", "know", "'m", "realli", "look", "forward", "get", "thi", "bug", "fix", "thank"], "B_body": "I'm sending this PR in response to this comment. https://github.com/rails/rails/issues/10613#issuecomment-26210557\n\nI'm not sure if this is the best fix. And it does not have any test yet.\n\nI guess PR will get more scrutiny and comments compared to a branch lying in my repo.\n", "B_clean_body": ["'m", "send", "thi", "pr", "respons", "thi", "comment", "http", "github", "com", "rail", "rail", "issu", "10613", "issuecom", "26210557", "'m", "not", "sure", "thi", "best", "fix", "it", "not", "have", "ani", "test", "yet", "guess", "pr", "will", "get", "more", "scrutini", "comment", "compar", "branch", "lie", "my", "repo"], "title_sim": [-0.02658552369889522], "body_sim": [0.23931833838097663], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.03519739625847686, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 165}, {"A_title": "Fix collection= on hm:t join models when unsaved", "A_clean_title": ["fix", "collection=", "hm", "join", "model", "when", "unsav"], "B_title": "Save join data with has_many :through.", "B_clean_title": ["save", "join", "data", "ha", "mani", "through"], "A_body": "If assigning to a has_many :through collection against an unsaved\nobject using the collection=[<array_of_items>] syntax, the join models\nwere not properly created, previously.\n\nThis bug is present in the current 3.2.8 release, as well.\n", "A_clean_body": ["assign", "ha", "mani", "through", "collect", "against", "unsav", "object", "collection=", "array", "item", "syntax", "join", "model", "were", "not", "properli", "creat", "previous", "thi", "bug", "present", "current", "releas", "as", "well"], "B_body": "Fixes #5057.\n\nIf you have :conditions on a has_many :through, it does not\nsave the data. This patch fixes that by generating the\ncorrect SQL.\n\nThis is based on work done by @clarkgr on #5057.\n\nI don't have a test written, because I'm an AR noob, but you have to start somewhere...\n\nAll the existing tests pass.\n", "B_clean_body": ["fix", "5057", "you", "have", "condit", "ha", "mani", "through", "it", "not", "save", "data", "thi", "patch", "fix", "that", "by", "gener", "correct", "sql", "thi", "base", "work", "done", "by", "clarkgr", "5057", "n't", "have", "test", "written", "becaus", "'m", "ar", "noob", "but", "you", "have", "start", "somewher", "all", "exist", "test", "pass"], "title_sim": [0.303087976689726], "body_sim": [0.21158242479943593], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.18603946594097473, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 0}, {"A_title": "Use any? for better readability", "A_clean_title": ["use", "ani", "better", "readabl"], "B_title": "Modified usage of if ! .empty? to if .any? which reads better", "B_clean_title": ["modifi", "usag", "empti", "ani", "which", "read", "better"], "A_body": "Remove the double negative\n", "A_clean_body": ["remov", "doubl", "neg"], "B_body": "cc @NZKoz\n\nThanks!\n", "B_clean_body": ["cc", "nzkoz", "nz", "koz", "thank"], "title_sim": [0.21457212667382797], "body_sim": [-0.006283129221580027], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Setting an ill-formatted Time-ish String into a TimeZone aware column raises an ArgumentError", "A_clean_title": ["set", "ill", "format", "time", "ish", "string", "into", "timezon", "time", "zone", "awar", "column", "rais", "argumenterror", "argument", "error"], "B_title": "Don't raise when writing an attribute with and out of range time", "B_clean_title": ["n't", "rais", "when", "write", "attribut", "out", "rang", "time"], "A_body": "Giving a `Date._parse`able but invalid DateTime-ish String value into a TimeZone aware AR column immediately raises since 4.0.x.\n\nThis regression was caused by 41ff6a10216f48f43605a1f9cd6094765cab750f which stopped rescuing errors when parsing.\n\nThis patch brings back the AR3 behaviour that sets nil in such case instead of raising.\n/cc @pixeltrix\n", "A_clean_body": ["give", "date", "pars", "abl", "but", "invalid", "datetim", "ish", "date", "time", "string", "valu", "into", "timezon", "time", "zone", "awar", "ar", "column", "immedi", "rais", "sinc", "thi", "regress", "wa", "caus", "by", "41ff6a10216f48f43605a1f9cd6094765cab750f", "which", "stop", "rescu", "error", "when", "pars", "thi", "patch", "bring", "back", "ar3", "behaviour", "that", "set", "nil", "such", "case", "instead", "rais", "cc", "pixeltrix"], "B_body": "The following code will raise an `ArgumentError` because of an out of range time:\n\n``` ruby\nModel.new(:created_at => '2010-33-22T09:30:25Z')\n```\n\nHowever, this won't raise, this will set `created_at` to nil instead :\n\n``` ruby\nModel.new(:created_at => 'Foobar')\n```\n\nI think the first example should act as the second one, hence this PR.\n\nWhat do you think ?\n", "B_clean_body": ["follow", "code", "will", "rais", "argumenterror", "argument", "error", "becaus", "out", "rang", "time", "rubi", "model", "new", "creat", "at", "'2010", "33", "22t09:30:25z", "howev", "thi", "wo", "n't", "rais", "thi", "will", "set", "creat", "at", "nil", "instead", "rubi", "model", "new", "creat", "at", "'foobar", "think", "first", "exampl", "act", "as", "second", "one", "henc", "thi", "pr", "what", "you", "think"], "title_sim": [0.3526458971941738], "body_sim": [0.34931259601187636], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.22357867690992045, 0.5338845543115562], "location_sim": [0.375, 1.0], "pattern": 0, "time": 201}, {"A_title": "Incorrect SQL generated for .last when ordering uses an SQL function", "A_clean_title": ["incorrect", "sql", "gener", "last", "when", "order", "use", "sql", "function"], "B_title": "fix_for_reverse_order_with_functions", "B_clean_title": ["fix", "revers", "order", "function"], "A_body": "I bumped into a problem with using COALESCE in sorting but it's relevant to any function like min or max.\n\nWhen I have an order defined as `COALESCE(t.field1, t.field2)`, all works great until .last is used. ActiveRecord was generating invalid SQL `select whatever from t ORDER BY COALESCE(t.field1 DESC, t.field2 DESC) LIMIT 1`.\n", "A_clean_body": ["bump", "into", "problem", "coalesc", "sort", "but", "it", "'s", "relev", "ani", "function", "like", "min", "or", "max", "when", "have", "order", "defin", "as", "coalesc", "field1", "field2", "all", "work", "great", "until", "last", "use", "activerecord", "activ", "record", "wa", "gener", "invalid", "sql", "select", "whatev", "order", "by", "coalesc", "field1", "desc", "field2", "desc", "limit"], "B_body": "fix for reverse_sql_order using regexp (for details of bug see pull request #8225)\n", "B_clean_body": ["fix", "revers", "sql", "order", "regexp", "detail", "bug", "see", "pull", "request", "8225"], "title_sim": [0.5452856492086714], "body_sim": [0.36192564874663413], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.40004048151989263, 0.0], "location_sim": [0.16666666666666666, 0.3888888888888889], "pattern": 0, "time": 8}, {"A_title": "Test #11675 for polymorphic has_many no longer passes the relation.where(args) to first_or_initialize", "A_clean_title": ["test", "11675", "polymorph", "ha", "mani", "no", "longer", "pass", "relat", "where", "arg", "first", "or", "initi"], "B_title": "Removed where_values_hash from AR::NullRelation", "B_clean_title": ["remov", "where", "valu", "hash", "ar", ":nullrel", ":null", "relat"], "A_body": "Here are the tests for isolating and verifying Issue #11675\n", "A_clean_body": ["here", "are", "test", "isol", "verifi", "issu", "11675"], "B_body": "In order to build associated records for owners which has not been saved\nneed to get where values to use as default attributes.\nBut for new record owner uses `ActiveRecord::NullRelation` which\noverride `where_values_hash` to return empty hash stub.\n\n`where_values_hash` is not used to invoke any sql query, but good to\nbuild others chains (even will be never executed) like:\n\n``` ruby\n  post          = Post.new\n  admin_comment = post.admin_comments.build\n\n  assert_equal 'Admin', admin_comment.author\n```\n\nCloses #11376, #11676 and #11675\n", "B_clean_body": ["order", "build", "associ", "record", "owner", "which", "ha", "not", "been", "save", "need", "get", "where", "valu", "use", "as", "default", "attribut", "but", "new", "record", "owner", "use", "activerecord", "activ", "record", ":nullrel", ":null", "relat", "which", "overrid", "where", "valu", "hash", "return", "empti", "hash", "stub", "where", "valu", "hash", "not", "use", "invok", "ani", "sql", "queri", "but", "good", "build", "other", "chain", "even", "will", "never", "execut", "like", "rubi", "post", "post", "new", "admin", "comment", "post", "build", "admin", "comment", "assert", "equal", "'admin", "author", "admin", "comment", "close", "11376", "11676", "11675"], "title_sim": [0.2645973285482122], "body_sim": [0.005089220161350139], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.6624010352832715, 0.729452518690105], "location_sim": [0.0, 0.0], "pattern": 1, "time": 12}, {"A_title": "Add method to run command-line db apps", "A_clean_title": ["add", "method", "run", "command", "line", "db", "app"], "B_title": "Error out if psql invocation fails while loading", "B_clean_title": ["error", "out", "psql", "invoc", "fail", "while", "load"], "A_body": "raise error unless Kernel.system returns true in structure_load()\n", "A_clean_body": ["rais", "error", "unless", "kernel", "system", "return", "true", "structur", "load"], "B_body": "This used to just silently succeed, which led to all sorts of weird behavior when running on a machine on which one had forgotten to install the Postgres command-line tools.\n", "B_clean_body": ["thi", "use", "just", "silent", "succeed", "which", "led", "all", "sort", "weird", "behavior", "when", "run", "machin", "which", "one", "had", "forgotten", "instal", "postgr", "command", "line", "tool"], "title_sim": [-0.036076927854493394], "body_sim": [-0.008778228932178792], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.278049409700812, 0.3048278630073228], "location_sim": [0.8012048192771084, 0.9779411764705882], "pattern": 0, "time": 13}, {"A_title": "Fixed behaviour, when block wasn't passed to link_to from link_to_if(condition = true) method", "A_clean_title": ["fix", "behaviour", "when", "block", "wa", "n't", "pass", "link", "link", "condit", "true", "method"], "B_title": "Update url_helper.rb", "B_clean_title": ["updat", "rb", "url", "helper"], "A_body": "Seems like `&block` was missing in argument list, so `link_to_if` didn't pass `&block'  to`link_to` method\n", "A_clean_body": ["seem", "like", "block", "wa", "miss", "argument", "list", "so", "link", "did", "n't", "pass", "block", "link", "method"], "B_body": "add block to link_to_if when condition is true\n", "B_clean_body": ["add", "block", "link", "when", "condit", "true"], "title_sim": [-0.03545321116905216], "body_sim": [0.606127555300237], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 6}, {"A_title": "Find mail part recursively", "A_clean_title": ["find", "mail", "part", "recurs"], "B_title": "Issue/14435 multipart mail preview", "B_clean_title": ["issu", "14435", "multipart", "mail", "preview"], "A_body": "I'm getting a `NoMethodError in Rails::Mailers#preview` when I try to preview an email view that has a attachment. \n\nMore precisely:\n\n``` ruby\nundefined method `mime_type' for #<Array:0x007f6469451cd8>\n```\n\n ActionMailer  generate a `multipart/alternative` email when use `attachments`.  It is necessary to look for mail part recursively.\n", "A_clean_body": ["'m", "get", "nomethoderror", "no", "method", "error", "rail", ":mailer", "preview", "when", "tri", "preview", "email", "view", "that", "ha", "attach", "more", "precis", "rubi", "undefin", "method", "mime", "type", "array:0x007f6469451cd8", "actionmail", "action", "mailer", "gener", "multipart", "altern", "email", "when", "use", "attach", "it", "necessari", "look", "mail", "part", "recurs"], "B_body": "MailPreviews with inline attachments error out. They try to render an HTML or\nplain text part, but it only sees the attachment part (`image/png` for\nexample) and a `multipart/relative`, returning an unexpected array when views\nexpect a `Message::Part`.\n\nIf email is of type 'multipart/relative', then we render the `text/html` part\ncontained in it.\n\nWe'd like to render the image using a URL like `http://localhost:3000/rails/mailers/dog_mailer/dog_view?part=image/png`, anyway submitting for review.\n\nFix for issue: https://github.com/rails/rails/issues/14435.\n\nPairing with @masonforest. cc @pixeltrix @sikachu.\n", "B_clean_body": ["mailpreview", "mail", "preview", "inlin", "attach", "error", "out", "they", "tri", "render", "html", "or", "plain", "text", "part", "but", "it", "onli", "see", "attach", "part", "imag", "png", "exampl", "multipart", "rel", "return", "unexpect", "array", "when", "view", "expect", "messag", ":part", "email", "type", "'multipart", "rel", "then", "we", "render", "text", "html", "part", "contain", "it", "we", "'d", "like", "render", "imag", "url", "like", "http", "view", "localhost:3000", "rail", "mailer", "dog", "mailer", "dog", "part=imag", "png", "anyway", "submit", "review", "fix", "issu", "http", "github", "com", "rail", "rail", "issu", "14435", "pair", "masonforest", "cc", "pixeltrix", "sikachu"], "title_sim": [0.5373384114187028], "body_sim": [0.5461587492785672], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.5745431929628698, 0.5745431929628698], "location_sim": [0.9297297297297298, 0.9297297297297298], "pattern": 0, "time": 71}, {"A_title": "Fix channel generator test for all random seeds", "A_clean_title": ["fix", "channel", "gener", "test", "all", "random", "seed"], "B_title": "Ensure that assets are enabled back after the test that tests assets are disabled", "B_clean_title": ["ensur", "that", "asset", "are", "enabl", "back", "after", "test", "that", "test", "asset", "are", "disabl"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.24296936264783991], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.8788680647741001, 0.8788680647741001], "location_sim": [0.5333333333333333, 0.5333333333333333], "pattern": 0, "time": 0}, {"A_title": "Fix brittle tests which were relying on the error message text from mysql2 gem", "A_clean_title": ["fix", "brittl", "test", "which", "were", "reli", "error", "messag", "text", "mysql2", "gem"], "B_title": "4-2-backport: activerecord/mysql2: Avoid setting @connection to nil, just close it", "B_clean_title": ["backport", "activerecord", "mysql2", "avoid", "set", "connect", "nil", "just", "close", "it"], "A_body": "### Summary\n- These tests were fixed earlier on master in https://github.com/rails/rails/commit/f13ec72664fd13d33d617103ca964a7592295854.\n- They started failing in first place due to change in https://github.com/brianmario/mysql2/commit/f14023fcfee9e85e6fc1b0e568048811518f8c23.\n- They will fail again when the message is changed in mysql2 so let's\n  not rely on the error message.\n", "A_clean_body": ["summari", "these", "test", "were", "fix", "earlier", "master", "http", "github", "com", "rail", "rail", "commit", "f13ec72664fd13d33d617103ca964a7592295854", "they", "start", "fail", "first", "place", "due", "chang", "http", "github", "com", "brianmario", "mysql2", "commit", "f14023fcfee9e85e6fc1b0e568048811518f8c23", "they", "will", "fail", "again", "when", "messag", "chang", "mysql2", "so", "let'", "not", "reli", "error", "messag"], "B_body": "@rafaelfranca, @arthurnn please review\ncc @Sirupsen\n\nBackport #26434 for the 4-2-stable branch\n", "B_clean_body": ["rafaelfranca", "arthurnn", "pleas", "review", "cc", "sirupsen", "backport", "26434", "stabl", "branch"], "title_sim": [0.30406077367411943], "body_sim": [0.02244138997800308], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.5945945945945946, 1.0], "pattern": 0, "time": 25}, {"A_title": "Changing gitignore template to ignore files with sensitive data by default", "A_clean_title": ["chang", "gitignor", "templat", "ignor", "file", "sensit", "data", "by", "default"], "B_title": "database.yml.example created in app generator", "B_clean_title": ["databas", "yml", "exampl", "creat", "app", "gener"], "A_body": "Not sure if is valid but I'm opening this PR to discuss it. I think it could be useful to avoid security issues by default.\n", "A_clean_body": ["not", "sure", "valid", "but", "'m", "open", "thi", "pr", "discuss", "it", "think", "it", "could", "use", "avoid", "secur", "issu", "by", "default"], "B_body": "database.yml.example is created with project along with database.yml\n\ndatabase.yml has also been gitignored.\n", "B_clean_body": ["databas", "yml", "exampl", "creat", "project", "along", "databas", "yml", "databas", "yml", "ha", "also", "been", "gitignor"], "title_sim": [0.00405223295907414], "body_sim": [0.011533960832301572], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.3783783783783784, 1.0], "pattern": 0, "time": 6}, {"A_title": " more changes related to @bb43784 ' Removing use of subclassed applicati...", "A_clean_title": ["more", "chang", "relat", "bb43784", "remov", "use", "subclass", "applicati"], "B_title": "Some more changes on the issue @bb43784", "B_clean_title": ["some", "more", "chang", "issu", "bb43784"], "A_body": "...on constant and instead using the'\n", "A_clean_body": ["constant", "instead"], "B_body": "Some more changes on the issue @bb43784\n", "B_clean_body": ["some", "more", "chang", "issu", "bb43784"], "title_sim": [0.2167744617255279], "body_sim": [0.012069623637201541], "file_list_sim": 0.9, "overlap_files_len": 9, "code_sim": [0.9995465411188518, 1.0000000000000002], "location_sim": [0.8827586206896552, 0.9014084507042254], "pattern": 1, "time": 5}, {"A_title": "Typo: Siantra -> Sinatra", "A_clean_title": ["typo", "siantra", "sinatra"], "B_title": "Small typo fix", "B_clean_title": ["small", "typo", "fix"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.0], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Handle and scrub ending _controller gracefully in controller generator", "A_clean_title": ["handl", "scrub", "end", "control", "grace", "control", "gener"], "B_title": "Strip extra \"controller\" from a generated controller name", "B_clean_title": ["strip", "extra", "control", "gener", "control", "name"], "A_body": "Handle and scrub ending `_controller` gracefully in controller generator\n", "A_clean_body": ["handl", "scrub", "end", "control", "grace", "control", "gener"], "B_body": "This happens to me all the time:\n\n`rails generate controller Admin::FoosController`\n\nand so I end up with crap called `FoosControllerController`. This strips the extra `controller` at the end. I'm not sure about the implementation though, I'd never overridden a protected method before... feedback?\n\n/cc. @mperham @vipulnsward\n", "B_clean_body": ["thi", "happen", "me", "all", "time", "rail", "gener", "control", "admin", ":fooscontrol", ":foo", "control", "so", "end", "up", "crap", "call", "fooscontrollercontrol", "foo", "control", "control", "thi", "strip", "extra", "control", "at", "end", "'m", "not", "sure", "about", "implement", "though", "'d", "never", "overridden", "protect", "method", "befor", "feedback", "cc", "mperham", "vipulnsward"], "title_sim": [0.5973021306808964], "body_sim": [0.5482261078415714], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.45257632892158045, 0.26239428886908167], "location_sim": [0.4383561643835616, 0.8205128205128205], "pattern": 0, "time": 0}, {"A_title": "Fix a bug affecting validations of enum attributes", "A_clean_title": ["fix", "bug", "affect", "valid", "enum", "attribut"], "B_title": "Fix for failing uniqueness validation on enum. #14172", "B_clean_title": ["fix", "fail", "uniqu", "valid", "enum", "14172"], "A_body": "This fixes a bug where any enum attribute of a model\nwould be evaluated always as 0 when calling the\ndatabase on validations.\n\nThis fix overrides the read_attribute_for_validation\nmethod for enum attributes to make it return the\ninteger representing the value rather than the\nvalue itself.\nFixes #14172\n", "A_clean_body": ["thi", "fix", "bug", "where", "ani", "enum", "attribut", "model", "would", "evalu", "alway", "as", "when", "call", "databas", "valid", "thi", "fix", "overrid", "read", "attribut", "valid", "method", "enum", "attribut", "make", "it", "return", "integ", "repres", "valu", "rather", "than", "valu", "itself", "fix", "14172"], "B_body": "Adding test case and fix for the issue described in here: #14172\n", "B_clean_body": ["ad", "test", "case", "fix", "issu", "describ", "here", "14172"], "title_sim": [0.6288388998551053], "body_sim": [0.19058970071780454], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.7149944405613802, 0.9178360028420094], "location_sim": [0.0, 0.0], "pattern": 1, "time": 0}, {"A_title": "Add additional documentation on Headers#[] [ci skip]", "A_clean_title": ["add", "addit", "document", "header", "ci", "skip"], "B_title": "not be able to match HTTP header with underscore.", "B_clean_title": ["not", "abl", "match", "http", "header", "underscor"], "A_body": "Issue #16519 covers confusion potentially caused by how HTTP\nheaders, that contain underscores in their names, are retrieved\nthrough `ActionDispatch::Http::Headers#[]`.\n\nThis confusion has its origin in how a CGI maps HTTP header names\nto variable names. Even though underscores in header names\nare rarely encountered, they are valid according to RFC822 [1].\nNonetheless CGI like variable names, as requested by the Rack\nspecfication, will only contain underscores and therefore the\noriginal header name cannot be recovered after the Rack server passed\non the environemnt hash. Please, see also the disscussion on\nStackOverflow [2], which also links to an explaination in the\nnginx documentation [3].\n\n[1] http://www.ietf.org/rfc/rfc822.txt\n[2] http://stackoverflow.com/questions/22856136/why-underscores-are-forbidden-in-http-header-names\n[3] https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#missing-disappearing-http-headers\n", "A_clean_body": ["issu", "16519", "cover", "confus", "potenti", "caus", "by", "how", "http", "header", "that", "contain", "underscor", "their", "name", "are", "retriev", "through", "actiondispatch", "action", "dispatch", ":http", ":header", "thi", "confus", "ha", "it", "origin", "how", "cgi", "map", "http", "header", "name", "variabl", "name", "even", "though", "underscor", "header", "name", "are", "rare", "encount", "they", "are", "valid", "accord", "rfc822", "nonetheless", "cgi", "like", "variabl", "name", "as", "request", "by", "rack", "specfic", "will", "onli", "contain", "underscor", "therefor", "origin", "header", "name", "not", "recov", "after", "rack", "server", "pass", "environemnt", "hash", "pleas", "see", "also", "disscuss", "stackoverflow", "stack", "overflow", "which", "also", "link", "explain", "nginx", "document", "http", "ietf", "txt", "www", "org", "rfc", "rfc822", "http", "underscor", "are", "forbidden", "http", "header", "name", "stackoverflow", "com", "question", "22856136", "whi", "http", "nginx", "www", "com", "resourc", "wiki", "start", "topic", "tutori", "config", "pitfal", "miss", "disappear", "http", "header"], "B_body": "#16519\n", "B_clean_body": ["16519"], "title_sim": [0.3001265001348512], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 528}, {"A_title": "Clean up quotes in the Gemfile", "A_clean_title": ["clean", "up", "quot", "gemfil"], "B_title": "Gemfile is even more cleaner now.", "B_clean_title": ["gemfil", "even", "more", "cleaner", "now"], "A_body": "Use single quotes in the Gemfile.\n", "A_clean_body": ["use", "singl", "quot", "gemfil"], "B_body": "cleaned\n", "B_clean_body": ["clean"], "title_sim": [0.16204070498006456], "body_sim": [0.01226404130624995], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 13}, {"A_title": "Set attributes from where clause on null relationship", "A_clean_title": ["set", "attribut", "where", "claus", "null", "relationship"], "B_title": "Removed where_values_hash from AR::NullRelation", "B_clean_title": ["remov", "where", "valu", "hash", "ar", ":nullrel", ":null", "relat"], "A_body": "When an association is created based on a null relationship, the\nattributes from the where clause are lost. This fixes that behavior by\nremoving the overridden where_values_hash method and using the one on\nthe ActiveRecord::Relation class.\n\nFixes #11676 and #11675\n", "A_clean_body": ["when", "associ", "creat", "base", "null", "relationship", "attribut", "where", "claus", "are", "lost", "thi", "fix", "that", "behavior", "by", "remov", "overridden", "where", "valu", "hash", "method", "one", "activerecord", "activ", "record", ":relat", "class", "fix", "11676", "11675"], "B_body": "In order to build associated records for owners which has not been saved\nneed to get where values to use as default attributes.\nBut for new record owner uses `ActiveRecord::NullRelation` which\noverride `where_values_hash` to return empty hash stub.\n\n`where_values_hash` is not used to invoke any sql query, but good to\nbuild others chains (even will be never executed) like:\n\n``` ruby\n  post          = Post.new\n  admin_comment = post.admin_comments.build\n\n  assert_equal 'Admin', admin_comment.author\n```\n\nCloses #11376, #11676 and #11675\n", "B_clean_body": ["order", "build", "associ", "record", "owner", "which", "ha", "not", "been", "save", "need", "get", "where", "valu", "use", "as", "default", "attribut", "but", "new", "record", "owner", "use", "activerecord", "activ", "record", ":nullrel", ":null", "relat", "which", "overrid", "where", "valu", "hash", "return", "empti", "hash", "stub", "where", "valu", "hash", "not", "use", "invok", "ani", "sql", "queri", "but", "good", "build", "other", "chain", "even", "will", "never", "execut", "like", "rubi", "post", "post", "new", "admin", "comment", "post", "build", "admin", "comment", "assert", "equal", "'admin", "author", "admin", "comment", "close", "11376", "11676", "11675"], "title_sim": [0.13864563441484465], "body_sim": [0.3601407286120455], "file_list_sim": 1.0, "overlap_files_len": 4, "code_sim": [0.9150124107192413, 0.9150124107192413], "location_sim": [0.2857142857142857, 0.2857142857142857], "pattern": 1, "time": 25}, {"A_title": "Make sure the parameter parsers register API work with overidden mime types.", "A_clean_title": ["make", "sure", "paramet", "parser", "regist", "api", "work", "overidden", "mime", "type"], "B_title": "Use symbol of mime type instead of object to get correct parser", "B_clean_title": ["use", "symbol", "mime", "type", "instead", "object", "get", "correct", "parser"], "A_body": "Currently if you want to add a new mime type to an existing type like `application/vnd.api+json` it will not use the JSON parameter parser.\n\nThe reason is that we use the `Mime::Type` object as the key of the parameter parser hash.\n\nHere is an example of how an application use this behavior.\n\n``` ruby\nMime::Type.unregister :json\nMime::Type.register \"application/json\", :json, %w(text/x-json application/jsonrequest application/vnd.api+json)\n```\n\nTo fix it we changed the parameter parsers internal representation to use the `Mime::Type`'s `symbol` method.\n\nTo not break the existing API, when instantiating the `ActionDispatch::ParamsParser` we accept `Mime::Type` instances but we change them to symbols.\n", "A_clean_body": ["current", "you", "want", "add", "new", "mime", "type", "exist", "type", "like", "api+json", "applic", "vnd", "it", "will", "not", "use", "json", "paramet", "parser", "reason", "that", "we", "use", "mime", ":type", "object", "as", "key", "paramet", "parser", "hash", "here", "exampl", "how", "applic", "use", "thi", "behavior", "rubi", "mime", ":type", "unregist", "json", "mime", ":type", "regist", "applic", "json", "json", "json", "text", "applic", "jsonrequest", "api+json", "applic", "vnd", "fix", "it", "we", "chang", "paramet", "parser", "intern", "represent", "use", "mime", ":type", "'s", "symbol", "method", "not", "break", "exist", "api", "when", "instanti", "actiondispatch", "action", "dispatch", ":paramspars", ":param", "parser", "we", "accept", "mime", ":type", "instanc", "but", "we", "chang", "them", "symbol"], "B_body": "After registering new `:json` mime type `parsers.fetch` can't find the mime type because new mime type is not equal to old one. Using symbol of the mime type as key on parsers hash solves the problem.\n\nCloses #23766.\n", "B_clean_body": ["after", "regist", "new", "json", "mime", "type", "parser", "fetch", "ca", "n't", "find", "mime", "type", "becaus", "new", "mime", "type", "not", "equal", "old", "one", "symbol", "mime", "type", "as", "key", "parser", "hash", "solv", "problem", "close", "23766"], "title_sim": [0.21823797762949346], "body_sim": [0.5721974779408516], "file_list_sim": 0.8, "overlap_files_len": 4, "code_sim": [0.8537787638151313, 0.861345246955811], "location_sim": [0.8292682926829268, 0.8662420382165605], "pattern": 0, "time": 2}, {"A_title": "Generate proper SQL when table-prefixed hash key is used in order", "A_clean_title": ["gener", "proper", "sql", "when", "tabl", "prefix", "hash", "key", "use", "order"], "B_title": "`ActiveRecord::QueryMethods#order` support for nested hashes", "B_clean_title": ["activerecord", "activ", "record", ":querymethod", ":queri", "method", "order", "support", "nest", "hash"], "A_body": "`where` method accepts several notation formats, such as `foo: :bar`, `'foo = bar'`, `'foo' => 'bar'` and also `'foo_items.foo' => 'bar'`. Each of them is widely used in RoR apps, and it seems normal to use the same approach in `order`, which in turn supports all except the last one.\n\nHere's what we have now:\n\n```\nTopic.order('topics.id' => 'asc').to_sql\n# => \"SELECT \\\"topics\\\".* FROM \\\"topics\\\"   ORDER BY \\\"topics\\\".\\\"topics.id\\\" ASC\"\n```\n\nSo this PR is my attempt to implement the desired behavior. Likely this can be done more efficiently.\n", "A_clean_body": ["where", "method", "accept", "sever", "notat", "format", "such", "as", "foo", "bar", "'foo", "bar", "'foo", "'bar", "also", "foo", "'foo", "item", "'bar", "each", "them", "wide", "use", "ror", "ro", "app", "it", "seem", "normal", "use", "same", "approach", "order", "which", "turn", "support", "all", "except", "last", "one", "here", "'s", "what", "we", "have", "now", "topic", "order", "'topic", "id", "'asc", "sql", "select", "topic", "topic", "order", "by", "topic", "topic", "id", "asc", "so", "thi", "pr", "my", "attempt", "implement", "desir", "behavior", "like", "thi", "done", "more", "effici"], "B_body": "Quite often we have to order the query by attribute of the related table. We can\nuse a String to do this:\n\n```\nPost.order(\"comments.body ASC\")\n```\n\nI really like the `#where` syntax when dealing with related\ntables/associations.\n\nThis commit adds support to `#order` for nested hashes as arguments.\nUsing the new syntax the query above looks like this:\n\n```\nPost.order(comments: {body: :asc})\n```\n", "B_clean_body": ["quit", "often", "we", "have", "order", "queri", "by", "attribut", "relat", "tabl", "we", "use", "string", "thi", "post", "order", "comment", "bodi", "asc", "realli", "like", "where", "syntax", "when", "deal", "relat", "tabl", "associ", "thi", "commit", "add", "support", "order", "nest", "hash", "as", "argument", "new", "syntax", "queri", "abov", "look", "like", "thi", "post", "order", "comment", "bodi", "asc"], "title_sim": [0.45422311244311875], "body_sim": [0.38435791624468996], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.6595936884508155, 0.458093581938588], "location_sim": [0.569060773480663, 0.8512396694214877], "pattern": 0, "time": 138}, {"A_title": "Make BigDecimal casting consistent on different platforms", "A_clean_title": ["make", "bigdecim", "big", "decim", "cast", "consist", "differ", "platform"], "B_title": "Set default precision for `ActiveModel::Type::Decimal` to 18", "B_clean_title": ["set", "default", "precis", "activemodel", "activ", "model", ":type", ":decim", "18"], "A_body": "Right now it behaves differently on JRuby:\r\n\r\n```\r\n--- expected\r\n+++ actual\r\n@@ -1 +1 @@\r\n-#<BigDecimal:5f3c866c,'0.333333333333333333',18(20)>\r\n+#<BigDecimal:16e0afab,'0.3333333333333333',16(20)>\r\n```\r\n\r\nMy initial PR (https://github.com/rails/rails/pull/27324) offered to let the precision to be decided by the platform and change the test expectation, but other contributors suggested that we should change the default precision in Rails to be consistent of all platforms instead.\r\n\r\nI got the value of `18` from the max default precision that comes from casting `Rational(1/3)` to `BigDecimal`.\r\n\r\n@sgrif @matthewd @guilleiguaran ", "A_clean_body": ["right", "now", "it", "behav", "differ", "jrubi", "rubi", "expect", "actual", "+1", "bigdecimal:5f3c866c", "big", "decimal:5f3c866c", "333333333333333333',18", "20", "bigdecimal:16e0afab", "big", "decimal:16e0afab", "3333333333333333',16", "20", "my", "initi", "pr", "http", "github", "com", "rail", "rail", "pull", "27324", "offer", "let", "precis", "decid", "by", "platform", "chang", "test", "expect", "but", "other", "contributor", "suggest", "that", "we", "chang", "default", "precis", "rail", "consist", "all", "platform", "instead", "got", "valu", "18", "max", "default", "precis", "that", "come", "cast", "ration", "bigdecim", "big", "decim", "sgrif", "matthewd", "guilleiguaran"], "B_body": "### Summary\r\n\r\nActive Model expects the default precision to be 18. If `precision` is 0\r\n(which it is by default), MRI will autocorrect this to be 18, but JRuby\r\ndoes not. In order to prevent an error being raised, we have to manually\r\ndefault the precision to be 18.\r\n\r\nThere is no need for a regression test, the test suite already [has one](https://github.com/rails/rails/blob/master/activemodel/test/cases/type/decimal_test.rb#L34-L37).", "B_clean_body": ["summari", "activ", "model", "expect", "default", "precis", "18", "precis", "which", "it", "by", "default", "mri", "will", "autocorrect", "thi", "18", "but", "jrubi", "rubi", "not", "order", "prevent", "error", "be", "rais", "we", "have", "manual", "default", "precis", "18", "there", "no", "need", "regress", "test", "test", "suit", "alreadi", "ha", "one", "http", "rb", "github", "test", "com", "rail", "rail", "blob", "master", "activemodel", "test", "case", "type", "decim", "l34", "l37"], "title_sim": [0.0018237573134986323], "body_sim": [0.5520460945933603], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.6704217800012839, 0.6704217800012839], "location_sim": [0.75, 0.75], "pattern": 0, "time": 62}, {"A_title": "Update README.md [ci skip]", "A_clean_title": ["updat", "readm", "md", "ci", "skip"], "B_title": "Fix README heading according to Markdown conventions", "B_clean_title": ["fix", "readm", "head", "accord", "markdown", "convent"], "A_body": "", "A_clean_body": [], "B_body": "In this patch I changed the heading of the main `README` and the automatically generated README by Railties. In my opinion the title of the README is of incorrect structure, because it uses a second level heading instead of a first level heading.\n", "B_clean_body": ["thi", "patch", "chang", "head", "main", "readm", "automat", "gener", "readm", "by", "railti", "my", "opinion", "titl", "readm", "incorrect", "structur", "becaus", "it", "use", "second", "level", "head", "instead", "first", "level", "head"], "title_sim": [-0.00244741582843476], "body_sim": [0.0], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.4, 1.0], "pattern": 0, "time": 0}, {"A_title": "Fix issue with mail previewer and attachments", "A_clean_title": ["fix", "issu", "mail", "preview", "attach"], "B_title": "Find mail part recursively", "B_clean_title": ["find", "mail", "part", "recurs"], "A_body": "Hello,\n\nwhen using the previewer with mailers using attachments, we found the following issue: \nthe MailersController cannot find the html/text parts, because they are themselves contained inside of the first mail part.\n\nThis patch makes the search for part recursive.\n", "A_clean_body": ["hello", "when", "preview", "mailer", "attach", "we", "found", "follow", "issu", "mailerscontrol", "mailer", "control", "not", "find", "html", "text", "part", "becaus", "they", "are", "themselv", "contain", "insid", "first", "mail", "part", "thi", "patch", "make", "search", "part", "recurs"], "B_body": "I'm getting a `NoMethodError in Rails::Mailers#preview` when I try to preview an email view that has a attachment. \n\nMore precisely:\n\n``` ruby\nundefined method `mime_type' for #<Array:0x007f6469451cd8>\n```\n\n ActionMailer  generate a `multipart/alternative` email when use `attachments`.  It is necessary to look for mail part recursively.\n", "B_clean_body": ["'m", "get", "nomethoderror", "no", "method", "error", "rail", ":mailer", "preview", "when", "tri", "preview", "email", "view", "that", "ha", "attach", "more", "precis", "rubi", "undefin", "method", "mime", "type", "array:0x007f6469451cd8", "actionmail", "action", "mailer", "gener", "multipart", "altern", "email", "when", "use", "attach", "it", "necessari", "look", "mail", "part", "recurs"], "title_sim": [0.4358256320864265], "body_sim": [0.48981426007926465], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.11974811232027302, 0.2671413879185824], "location_sim": [0.4845360824742268, 0.8703703703703703], "pattern": 0, "time": 299}, {"A_title": "Implements an evented file system monitor", "A_clean_title": ["implement", "event", "file", "system", "monitor"], "B_title": "Gsoc - Evented File system Monitoring", "B_clean_title": ["gsoc", "event", "file", "system", "monitor"], "A_body": "Implements an evented file system monitor to asynchronously detect changes in the application source code, routes, locales, etc.\n\nTo opt-in load the [listen](https://github.com/guard/listen) gem in `Gemfile`:\n\n``` ruby\ngroup :development do\n  gem 'listen', '~> 3.0.4'\nend\n```\n\n[Original work](https://github.com/rails/rails/pull/20785) by @puneet24 for [GSoC 2015](http://weblog.rubyonrails.org/2015/9/25/gsoc-2015-wrapping-up/), later iterated by yours truly.\n", "A_clean_body": ["implement", "event", "file", "system", "monitor", "asynchron", "detect", "chang", "applic", "sourc", "code", "rout", "local", "etc", "opt", "load", "listen", "http", "github", "com", "guard", "listen", "gem", "gemfil", "rubi", "group", "develop", "gem", "'listen", "4'", "end", "origin", "work", "http", "github", "com", "rail", "rail", "pull", "20785", "by", "puneet24", "gsoc", "so", "2015", "http", "2015", "wrap", "rubyonrail", "up", "weblog", "org", "2015", "25", "gsoc", "later", "iter", "by", "your", "truli"], "B_body": "Used old implementation in case Listen fallback to Polling\n\nUsed only feature of listen gem - completely different implementation\n\nchanges\n", "B_clean_body": ["use", "old", "implement", "case", "listen", "fallback", "poll", "use", "onli", "featur", "listen", "gem", "complet", "differ", "implement", "chang"], "title_sim": [0.8344742006781541], "body_sim": [0.23283823616850294], "file_list_sim": 0.5714285714285714, "overlap_files_len": 8, "code_sim": [0.36937402414206094, 0.25151980607834684], "location_sim": [0.48938321536905965, 0.8287671232876712], "pattern": 0, "time": 46}, {"A_title": "Check structure command response for errors", "A_clean_title": ["check", "structur", "command", "respons", "error"], "B_title": "Add method to run command-line db apps", "B_clean_title": ["add", "method", "run", "command", "line", "db", "app"], "A_body": "If `psql` is not installed on the system, `rake db:structure:load` gives no output, implying success.\nThis commit will raise sensible error messages in the case that `psql` does not exist or the process\nreturns an exit status other than 0.\n", "A_clean_body": ["psql", "not", "instal", "system", "rake", "db", "structur", "load", "give", "no", "output", "impli", "success", "thi", "commit", "will", "rais", "sensibl", "error", "messag", "case", "that", "psql", "not", "exist", "or", "process", "return", "exit", "statu", "other", "than"], "B_body": "raise error unless Kernel.system returns true in structure_load()\n", "B_clean_body": ["rais", "error", "unless", "kernel", "system", "return", "true", "structur", "load"], "title_sim": [0.31256763651081226], "body_sim": [0.4269815054800046], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.005939199482622852, 0.00017654538684687532], "location_sim": [0.30357142857142855, 0.918918918918919], "pattern": 0, "time": 187}, {"A_title": "prevent `TypeError` for `LogSubscriber#sql`", "A_clean_title": ["prevent", "typeerror", "type", "error", "logsubscrib", "log", "subscrib", "sql"], "B_title": "Use log method instead of `ActiveSupport::Notifications.instrument`", "B_clean_title": ["use", "log", "method", "instead", "activesupport", "activ", "support", ":notif", "instrument"], "A_body": "### Summary\n\nThe #26584 changed to preserve cached queries name and output cached\nqueries to log. But `QueryCache#cache_sql` don't set `type_casted_binds` payload.\nTherefore, following errors occur when output the log.\n\n``` ruby\nCould not log \"sql.active_record\" event. TypeError: wrong argument type NilClass (must respond to :each) [\"rails/activerecord/lib/active_record/log_subscriber.rb:42\"]\n```\n\nThis fixes the above error.\n", "A_clean_body": ["summari", "26584", "chang", "preserv", "cach", "queri", "name", "output", "cach", "queri", "log", "but", "querycach", "queri", "cach", "cach", "sql", "n't", "set", "type", "cast", "bind", "payload", "therefor", "follow", "error", "occur", "when", "output", "log", "rubi", "could", "not", "log", "sql", "activ", "record", "event", "typeerror", "type", "error", "wrong", "argument", "type", "nilclass", "nil", "class", "must", "respond", "each", "rb:42", "subscrib", "rail", "activerecord", "lib", "activ", "record", "log", "thi", "fix", "abov", "error"], "B_body": "### Summary\n\nI encountered the following error.\n\n```\nCould not log \"sql.active_record\" event. TypeError: wrong argument type NilClass (must respond to :each) [\"/home/mtsmfm/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/rails-0ca595ea6e3a/activerecord/l\nib/active_record/log_subscriber.rb:42:in `zip'\"\n```\n\nIt seems that we forgot to care about `#cache_sql` in https://github.com/rails/rails/pull/25886\n", "B_clean_body": ["summari", "encount", "follow", "error", "could", "not", "log", "sql", "activ", "record", "event", "typeerror", "type", "error", "wrong", "argument", "type", "nilclass", "nil", "class", "must", "respond", "each", "0ca595ea6e3a", "activerecord", "home", "mtsmfm", "rbenv", "version", "lib", "rubi", "gem", "bundler", "gem", "rail", "rb:42", "subscrib", "ib", "activ", "record", "log", "zip", "it", "seem", "that", "we", "forgot", "care", "about", "cach", "sql", "http", "github", "com", "rail", "rail", "pull", "25886"], "title_sim": [0.38657046362513436], "body_sim": [0.6769733140968811], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.21341114071151498, 0.0], "location_sim": [0.45161290322580644, 1.0], "pattern": -1, "time": 44}, {"A_title": "Use built-in #transform_values when available.", "A_clean_title": ["use", "built", "transform", "valu", "when", "avail"], "B_title": "Define Hash#transform_values and #transform_values! on only Ruby 2.2 and Ruby 2.3", "B_clean_title": ["defin", "hash", "transform", "valu", "transform", "valu", "onli", "rubi", "rubi"], "A_body": "The methods Hash#transform_values and Hash#transform_values! have been\nimplemented in Ruby and they'll be available as part of the standard\nlibrary.\n\nHere's the link to the discussion in Ruby's issue tracker:\nhttps://bugs.ruby-lang.org/issues/12512\n\nThese methods are implemented in C so they're expected to perform\nbetter.\n", "A_clean_body": ["method", "hash", "transform", "valu", "hash", "transform", "valu", "have", "been", "implement", "rubi", "they", "'ll", "avail", "as", "part", "standard", "librari", "here", "'s", "link", "discuss", "rubi", "'s", "issu", "tracker", "http", "rubi", "lang", "bug", "org", "issu", "12512", "these", "method", "are", "implement", "so", "they", "'re", "expect", "perform", "better"], "B_body": "### Summary\n\n`Hash#transform_values` and `Hash#transform_values` is implemented on ruby 2.4 (https://github.com/ruby/ruby/blob/trunk/hash.c#L1801-L1829), so it should define these methods only on ruby 2.2 and 2.3.\n", "B_clean_body": ["summari", "hash", "transform", "valu", "hash", "transform", "valu", "implement", "rubi", "http", "github", "com", "rubi", "rubi", "blob", "trunk", "hash", "l1801", "l1829", "so", "it", "defin", "these", "method", "onli", "rubi"], "title_sim": [0.7441329031574752], "body_sim": [0.7556504309556772], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.3107815635136934, 0.3107815635136934], "location_sim": [0.45, 0.45], "pattern": -1, "time": 27}, {"A_title": "[close #22917] Don't output to `STDOUT` twice", "A_clean_title": ["close", "22917", "n't", "output", "stdout", "twice"], "B_title": "Remove log message broadcast flag", "B_clean_title": ["remov", "log", "messag", "broadcast", "flag"], "A_body": "When `rails console` or `rails server` are used along with a logger set to output to `STDOUT` then the contents will show up twice. This happens because the logger is extended with `ActiveSupportLogger.broadcast` with a destination of STDOUT even if it is already outputting to `STDOUT`.\n\nPreviously PR #22592 attempted to fix this issue, but it ended up causing NoMethodErrors. A better approach than relying on adding a method and flow control is to inspect the log destination directly. For this `ActiveSupport::Logger.logger_outputs_to?` was introduced\n\n``` ruby\nlogger = Logger.new(STDOUT)\nActiveSupport::Logger.logger_outputs_to?(logger, STDOUT)\n# => true\n```\n\nTo accomplish this we must look inside of an instance variable of standard lib's Logger `@logdev`. There is a related Ruby proposal to expose this method in a standard way: https://bugs.ruby-lang.org/issues/11955\n", "A_clean_body": ["when", "rail", "consol", "or", "rail", "server", "are", "use", "along", "logger", "set", "output", "stdout", "then", "content", "will", "show", "up", "twice", "thi", "happen", "becaus", "logger", "extend", "activesupportlogg", "broadcast", "activ", "support", "logger", "destin", "stdout", "even", "it", "alreadi", "output", "stdout", "previous", "pr", "22592", "attempt", "fix", "thi", "issu", "but", "it", "end", "up", "caus", "nomethoderror", "no", "method", "error", "better", "approach", "than", "reli", "ad", "method", "flow", "control", "inspect", "log", "destin", "directli", "thi", "activesupport", "activ", "support", ":logger", "logger", "output", "wa", "introduc", "rubi", "logger", "logger", "new", "stdout", "activesupport", "activ", "support", ":logger", "logger", "output", "logger", "stdout", "true", "accomplish", "thi", "we", "must", "look", "insid", "instanc", "variabl", "standard", "lib", "'s", "logger", "logdev", "there", "relat", "rubi", "propos", "expos", "thi", "method", "standard", "way", "http", "rubi", "lang", "bug", "org", "issu", "11955"], "B_body": "This change forces non-`AS::Logger` objects to support the\n`broadcast_messages` flag, which means loggers such as the one in Ruby's\nstandard library cannot be used.\n\nFixes #22917 \n\n/cc @schneems \n", "B_clean_body": ["thi", "chang", "forc", "non", "as", ":logger", "object", "support", "broadcast", "messag", "flag", "which", "mean", "logger", "such", "as", "one", "ruby'", "standard", "librari", "not", "use", "fix", "22917", "cc", "schneem"], "title_sim": [-0.007031183820480753], "body_sim": [0.45327055767451896], "file_list_sim": 0.3333333333333333, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.6598984771573604, 0.9154929577464789], "pattern": 1, "time": 0}, {"A_title": "Replace `ActiveSupport::Concurrency::Latch` with `Concurrent::CountDownLatch` from concurrent-ruby.", "A_clean_title": ["replac", "activesupport", "activ", "support", ":concurr", ":latch", "concurr", ":countdownlatch", ":count", "down", "latch", "concurr", "rubi"], "B_title": "Replaced Latch with CountDownLatch in concurrent-ruby gem", "B_clean_title": ["replac", "latch", "countdownlatch", "count", "down", "latch", "concurr", "rubi", "gem"], "A_body": "This update was suggested by @tenderlove in a discussion on one of [his PRs to concurrent-ruby](https://github.com/ruby-concurrency/concurrent-ruby/pull/251).\n# \n\nThe concurrent-ruby gem is a toolset containing many concurrency utilities. Many of these utilities include runtime-specific optimizations when possible. Rather than clutter the Rails codebase with concurrency utilities separate from the core task, such tools can be superseded by similar tools in the more specialized gem. This commit replaces `ActiveSupport::Concurrency::Latch` with `Concurrent::CountDownLatch`, which is functionally equivalent.\n", "A_clean_body": ["thi", "updat", "wa", "suggest", "by", "tenderlov", "discuss", "one", "hi", "pr", "rs", "concurr", "rubi", "http", "concurr", "concurr", "rubi", "pull", "251", "github", "com", "rubi", "concurr", "rubi", "gem", "toolset", "contain", "mani", "concurr", "util", "mani", "these", "util", "includ", "runtim", "specif", "optim", "when", "possibl", "rather", "than", "clutter", "rail", "codebas", "concurr", "util", "separ", "core", "task", "such", "tool", "supersed", "by", "similar", "tool", "more", "special", "gem", "thi", "commit", "replac", "activesupport", "activ", "support", ":concurr", ":latch", "concurr", ":countdownlatch", ":count", "down", "latch", "which", "function", "equival"], "B_body": "Replaced the usage of Latch in actionpack/test/dispatch/live_response_test.rb, actionpack/test/controller/live_stream_test.rb, activerecord/test/cases/connection_pool_test.rb, and activerecord/test/cases/base_test.rb with CountDownLatch in concurrent-ruby gem. Also changed Gemfile to add the gem, and deleted the latch.rb file because it is not needed any more.\n", "B_clean_body": ["replac", "usag", "latch", "rb", "respons", "test", "actionpack", "test", "dispatch", "live", "rb", "stream", "test", "actionpack", "test", "control", "live", "rb", "pool", "test", "activerecord", "test", "case", "connect", "rb", "test", "activerecord", "test", "case", "base", "countdownlatch", "count", "down", "latch", "concurr", "rubi", "gem", "also", "chang", "gemfil", "add", "gem", "delet", "latch", "rb", "file", "becaus", "it", "not", "need", "ani", "more"], "title_sim": [0.6913016728650319], "body_sim": [0.23120387360238912], "file_list_sim": 0.5, "overlap_files_len": 6, "code_sim": [0.9881728765931554, 0.9933421607640645], "location_sim": [0.6184419713831478, 0.6638225255972696], "pattern": 0, "time": 69}, {"A_title": "Fix ActiveModel, ActiveRecord, ActiveJob README links", "A_clean_title": ["fix", "activemodel", "activ", "model", "activerecord", "activ", "record", "activejob", "activ", "job", "readm", "link"], "B_title": "Fix broken link to ActiveJob documentation", "B_clean_title": ["fix", "broken", "link", "activejob", "activ", "job", "document"], "A_body": "The 'Learn More' links in the READMEs for `ActiveModel` and `ActiveRecord` that previously pointed to non-existent `.html` files have been updated to point to the corresponding `.rb` files in the source. In addition, a dead link to the Rails API for `ActiveJob::QueueAdapters` has been replaced with a link to the queue adapters directory in the source and a link to the Edge Rails API for `ActiveJob::QueueAdapters` for convenience.\n", "A_clean_body": ["'learn", "more", "link", "readm", "readm", "es", "activemodel", "activ", "model", "activerecord", "activ", "record", "that", "previous", "point", "non", "exist", "html", "file", "have", "been", "updat", "point", "correspond", "rb", "file", "sourc", "addit", "dead", "link", "rail", "api", "activejob", "activ", "job", ":queueadapt", ":queue", "adapt", "ha", "been", "replac", "link", "queue", "adapt", "directori", "sourc", "link", "edg", "rail", "api", "activejob", "activ", "job", ":queueadapt", ":queue", "adapt", "conveni"], "B_body": "Since ActiveJob is in a beta release, the current link returns 404:\n\nhttp://api.rubyonrails.org/classes/ActiveJob/QueueAdapters.html\n\nIn order to have a valid link, the URL must be:\n\nhttp://edgeapi.rubyonrails.org/classes/ActiveJob/QueueAdapters.html\n\nI think it's better to point at edgeapi than to a broken link.\nThe original URL can be restored as soon as 4.2.0 is officially released.\n\n[ci skip]\n", "B_clean_body": ["sinc", "activejob", "activ", "job", "beta", "releas", "current", "link", "return", "404", "http", "rubyonrail", "html", "api", "org", "class", "activejob", "queueadapt", "activ", "job", "queue", "adapt", "order", "have", "valid", "link", "url", "must", "http", "rubyonrail", "html", "edgeapi", "org", "class", "activejob", "queueadapt", "activ", "job", "queue", "adapt", "think", "it", "'s", "better", "point", "at", "edgeapi", "than", "broken", "link", "origin", "url", "restor", "as", "soon", "as", "offici", "releas", "ci", "skip"], "title_sim": [0.7329362336152174], "body_sim": [0.6775847451449968], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.11688311688311688, 1.0], "pattern": 0, "time": 3}, {"A_title": "Custom flash should be defined only for the class that defines it and it's subclasses", "A_clean_title": ["custom", "flash", "defin", "onli", "class", "that", "defin", "it", "it", "'s", "subclass"], "B_title": "Rails 4 Custom Flash Type Undefined After Error", "B_clean_title": ["rail", "custom", "flash", "type", "undefin", "after", "error"], "A_body": "This fixes https://github.com/rails/rails/issues/12057\n", "A_clean_body": ["thi", "fix", "http", "github", "com", "rail", "rail", "issu", "12057"], "B_body": "A suggested fix to https://github.com/rails/rails/issues/12057\n\nAfter an error is raised the custom flash methods are unavailable, it seems that they disappear from the scope of from where they were defined.\n\nThe class instance variable which holds the name of the custom flash types persists but it does not redefine the method upon a new request (perhaps exceptions clear out the scope of the dynamically inserted methods of a controller?).\n\nThe suggested fix checks whether the controller has the new method and if it doesn't it define_method it.\n\nI was not able to reproduce the error in the integration test while imitating a route that raises an exception so I added a unit test.\n", "B_clean_body": ["suggest", "fix", "http", "github", "com", "rail", "rail", "issu", "12057", "after", "error", "rais", "custom", "flash", "method", "are", "unavail", "it", "seem", "that", "they", "disappear", "scope", "where", "they", "were", "defin", "class", "instanc", "variabl", "which", "hold", "name", "custom", "flash", "type", "persist", "but", "it", "not", "redefin", "method", "upon", "new", "request", "perhap", "except", "clear", "out", "scope", "dynam", "insert", "method", "control", "suggest", "fix", "check", "whether", "control", "ha", "new", "method", "it", "n't", "it", "defin", "method", "it", "wa", "not", "abl", "reproduc", "error", "integr", "test", "while", "imit", "rout", "that", "rais", "except", "so", "ad", "unit", "test"], "title_sim": [0.21501282156054002], "body_sim": [0.20646219993942225], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.5640429385569866, 0.5989794109805368], "location_sim": [0.3055555555555556, 0.3548387096774194], "pattern": 1, "time": 14}, {"A_title": "fix simple_format escapes own output when sanitize is set to true", "A_clean_title": ["fix", "simpl", "format", "escap", "own", "output", "when", "sanit", "set", "true"], "B_title": "Closes #12115. Fix `simple_format` with sanitizing option when the text contains single line feed.", "B_clean_title": ["close", "12115", "fix", "simpl", "format", "sanit", "option", "when", "text", "contain", "singl", "line", "feed"], "A_body": "this fixes #12757\n", "A_clean_body": ["thi", "fix", "12757"], "B_body": "If we call `simple_format` method with sanitizing option, a single line feed (\\n) is replaced with unexpected characters .\n\n```\n&lt;br /&gt;\n```\n\nI think we should backport  to 4-0-stable.\n", "B_clean_body": ["we", "call", "simpl", "format", "method", "sanit", "option", "singl", "line", "feed", "replac", "unexpect", "charact", "lt", "br", "gt", "think", "we", "backport", "stabl"], "title_sim": [0.6254500386878697], "body_sim": [0.032101573675301975], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.5782683449940419, 0.5782683449940419], "location_sim": [0.5915492957746479, 0.5915492957746479], "pattern": -1, "time": 62}, {"A_title": "Show an \"unmatched constraints\" error when params fail to match constraints", "A_clean_title": ["show", "unmatch", "constraint", "error", "when", "param", "fail", "match", "constraint"], "B_title": "make UrlGenerationError message more generic (fixes #26470).", "B_clean_title": ["make", "urlgenerationerror", "url", "gener", "error", "messag", "more", "gener", "fix", "26470"], "A_body": "### Summary\n\nCurrently a misleading \"missing required keys\" error is thrown when a param\nfails to match the constraints of a particular route. This PR ensures that\nthese params are recognised as unmatching rather than missing.\n\nFixes #26470.\n### Other Information\n\nNote: this means that a different error message will be provided between\noptimized and non-optimized path helpers, due to the fact that the former does\nnot check constraints when matching routes.\n", "A_clean_body": ["summari", "current", "mislead", "miss", "requir", "key", "error", "thrown", "when", "param", "fail", "match", "constraint", "particular", "rout", "thi", "pr", "ensur", "that", "these", "param", "are", "recognis", "as", "unmatch", "rather", "than", "miss", "fix", "26470", "other", "inform", "note", "thi", "mean", "that", "differ", "error", "messag", "will", "provid", "between", "optim", "non", "optim", "path", "helper", "due", "fact", "that", "former", "not", "check", "constraint", "when", "match", "rout"], "B_body": "This is the minimal solution. Would be nice to distinguish between missing keys and values that do not match constraints some day.\n", "B_clean_body": ["thi", "minim", "solut", "would", "nice", "distinguish", "between", "miss", "key", "valu", "that", "not", "match", "constraint", "some", "day"], "title_sim": [0.0564540163343971], "body_sim": [0.512276454897641], "file_list_sim": 0.8, "overlap_files_len": 4, "code_sim": [0.4542933990570275, 0.3824683276987049], "location_sim": [0.5950413223140496, 0.6486486486486487], "pattern": 1, "time": 0}, {"A_title": "Updated expected Ruby / Rails versions", "A_clean_title": ["updat", "expect", "rubi", "rail", "version"], "B_title": "changing ruby version in getting started[ci skip]", "B_clean_title": ["chang", "rubi", "version", "get", "start", "ci", "skip"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.39897722361986043], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.6666666666666666, 0.6666666666666666], "pattern": 0, "time": 6}, {"A_title": "SSL should not be disabled by default in any environment.", "A_clean_title": ["ssl", "not", "disabl", "by", "default", "ani", "environ"], "B_title": "config.ignore_force_ssl_filter so filter can be ignored in any desired ", "B_clean_title": ["config", "ignor", "forc", "ssl", "filter", "so", "filter", "ignor", "ani", "desir"], "A_body": "Disabling SSL in any environment should be a decision made by each individual developer/team - really not keen on Rails forcing this. Also, I think it's far better to have a consistent environment as much as possible across all environments. So, this patch removes the `Rails.env.development?` check in `force_ssl`.\n\nAs a related aside, I've just been working on a gem that makes it far easier to use SSL in development and (Capybara-driven) test environments. It's built with bartt's version of ssl_requirement in mind, but I'm keen to have it work with `force_ssl` as well (I didn't realise it existed until just now).\nhttps://github.com/freelancing-god/thin-glazed\n", "A_clean_body": ["disabl", "ssl", "ani", "environ", "decis", "made", "by", "each", "individu", "develop", "team", "realli", "not", "keen", "rail", "forc", "thi", "also", "think", "it", "'s", "far", "better", "have", "consist", "environ", "as", "much", "as", "possibl", "across", "all", "environ", "so", "thi", "patch", "remov", "rail", "env", "develop", "check", "forc", "ssl", "as", "relat", "asid", "'ve", "just", "been", "work", "gem", "that", "make", "it", "far", "easier", "use", "ssl", "develop", "capybara", "driven", "test", "environ", "it", "'s", "built", "bartt", "'s", "version", "ssl", "requir", "mind", "but", "'m", "keen", "have", "it", "work", "forc", "ssl", "as", "well", "did", "n't", "realis", "it", "exist", "until", "just", "now", "http", "glaze", "god", "thin", "github", "com", "freelanc"], "B_body": "This is  revised request of:  https://github.com/rails/rails/pull/2617 (which simply hard-coded the production environment). Not sure about grabbing Rails.configuration from force_ssl, works, but nothing else seems to be doing that...\n\nconfig.force_ssl (the name which was suggested) already exists (for globally forcing ssl).\n", "B_clean_body": ["thi", "revis", "request", "http", "github", "com", "rail", "rail", "pull", "2617", "which", "simpli", "hard", "code", "product", "environ", "not", "sure", "about", "grab", "rail", "configur", "forc", "ssl", "work", "but", "noth", "seem", "do", "that", "config", "forc", "ssl", "name", "which", "wa", "suggest", "alreadi", "exist", "global", "forc", "ssl"], "title_sim": [0.12242603365289192], "body_sim": [0.5570451292350221], "file_list_sim": 0.3333333333333333, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.14, 0.5185185185185185], "pattern": 0, "time": 174}, {"A_title": "Insert missing underscore in CookieStore docs", "A_clean_title": ["insert", "miss", "underscor", "cookiestor", "cooki", "store", "doc"], "B_title": "Corrected secret_key_base", "B_clean_title": ["correct", "secret", "key", "base"], "A_body": "### Summary\n\nThis PR updates the documentation for the `CookieStore` class so that it properly references the `secret_key_base` config option instead of `secret_key base`.\n", "A_clean_body": ["summari", "thi", "pr", "updat", "document", "cookiestor", "cooki", "store", "class", "so", "that", "it", "properli", "refer", "secret", "key", "base", "config", "option", "instead", "secret", "key", "base"], "B_body": "", "B_clean_body": [], "title_sim": [0.01641574079569031], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 14}, {"A_title": "Add `data: { disable_with: Submitting... }` to forms", "A_clean_title": ["add", "data", "disabl", "submit", "form"], "B_title": "make disable_with default in submit_tag", "B_clean_title": ["make", "disabl", "default", "submit", "tag"], "A_body": "Seems like the best way to prevent users from double/triple/etc clicking on forms.\n\ncc @derekprior @sgrif :bike: \n", "A_clean_body": ["seem", "like", "best", "way", "prevent", "user", "doubl", "tripl", "etc", "click", "form", "cc", "derekprior", "sgrif", "bike"], "B_body": "I heard on the \"Bike Shed\" podcast that the idea of possibly making disable_with a default for submit_tag to prevent double submission by default, thought I would draft up a pull request for it and take a stab at it.\n", "B_clean_body": ["heard", "bike", "shed", "podcast", "that", "idea", "possibl", "make", "disabl", "default", "submit", "tag", "prevent", "doubl", "submiss", "by", "default", "thought", "would", "draft", "up", "pull", "request", "it", "take", "stab", "at", "it"], "title_sim": [0.2702340919127186], "body_sim": [0.23854915528684256], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.4079857694868802, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 1}, {"A_title": "Fixing issue with activerecord serialization not being able to dump a record after loading it from YAML - fixes #13861", "A_clean_title": ["fix", "issu", "activerecord", "serial", "not", "be", "abl", "dump", "record", "after", "load", "it", "yaml", "fix", "13861"], "B_title": "Fix incorrect serialization state after loading", "B_clean_title": ["fix", "incorrect", "serial", "state", "after", "load"], "A_body": "This is a backwards incompatible change for people using `store/serialization`.\n\nThis PR fixes the issue raised at https://github.com/rails/rails/issues/13861\n\nThe main issue is that [encode_with](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/core.rb#L277) says that the attributes value that is set to the `coder` object is the same that gets set at [init_with](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/core.rb#L205) and while this is true, `init_with` calls `self.class.initialize_attributes(coder['attributes'])` without setting the `:serialized` option and creates the `Serialization::Attibute` object with the `serialized` field set to true as can be seen [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods/serialization.rb#L105), but the YAML produced by a `YAML.dump` call is like this:\n\n``` yaml\n--- !ruby/object:Admin::User\nattributes:\n  id: 721854607\n  name: John Doe\n  settings: !ruby/hash:ActiveSupport::HashWithIndifferentAccess\n    color: black\n  preferences: !ruby/hash:ActiveSupport::HashWithIndifferentAccess\n    remember_login: true\n  json_data: !ruby/hash:ActiveSupport::HashWithIndifferentAccess\n    height: tall\n  json_data_empty: !ruby/hash:ActiveSupport::HashWithIndifferentAccess\n    is_a_good_guy: true\n  params: !ruby/hash:ActiveSupport::HashWithIndifferentAccess {}\n  account_id: \n```\n\nThe `json_data` field that should have been a JSON string, since it's store `:coder` turns it into JSON before saving it, was saved just like any YAML field. Now, when you `YAML.load` the content above you will get the following error:\n\n```\nTypeError: no implicit conversion of ActiveSupport::HashWithIndifferentAccess into String\n```\n\nAnd it happens because the `init_with` method expected to receive a JSON string at the `json_data` field and not the `ActiveSupport::HashWithIndifferentAccess`, since `:serialized` will be set to true. That's why at the original issue description @hundredwatt says that calling `record.reload` works, because when you call `reload` at the object `init_with` is called with the data as it comes from the database column, that will be a JSON string and not a real hash object.\n\nThe solution here was creating a separate `attributes_for_coder` method that the serialization code can override when needed to generate the encoded value for the field so it can be safely dumped and then loaded back again through the correct process.\n", "A_clean_body": ["thi", "backward", "incompat", "chang", "peopl", "store", "serial", "thi", "pr", "fix", "issu", "rais", "at", "http", "github", "com", "rail", "rail", "issu", "13861", "main", "issu", "that", "encod", "http", "rb", "github", "com", "rail", "rail", "blob", "master", "activerecord", "lib", "activ", "record", "core", "l277", "say", "that", "attribut", "valu", "that", "set", "coder", "object", "same", "that", "get", "set", "at", "init", "http", "rb", "github", "com", "rail", "rail", "blob", "master", "activerecord", "lib", "activ", "record", "core", "l205", "while", "thi", "true", "init", "call", "self", "class", "initi", "attribut", "coder", "'attribut", "without", "set", "serial", "option", "creat", "serial", ":attibut", "object", "serial", "field", "set", "true", "as", "seen", "here", "http", "rb", "github", "com", "rail", "rail", "blob", "master", "activerecord", "lib", "activ", "record", "attribut", "method", "serial", "l105", "but", "yaml", "produc", "by", "yaml", "dump", "call", "like", "thi", "yaml", "rubi", "object", "admin", ":user", "attribut", "id", "721854607", "name", "john", "set", "rubi", "hash", "activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "color", "black", "prefer", "rubi", "hash", "activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "rememb", "login", "true", "json", "data", "rubi", "hash", "activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "height", "tall", "json", "data", "empti", "rubi", "hash", "activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "good", "guy", "true", "param", "rubi", "hash", "activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "account", "id", "json", "data", "field", "that", "have", "been", "json", "string", "sinc", "it", "'s", "store", "coder", "turn", "it", "into", "json", "befor", "save", "it", "wa", "save", "just", "like", "ani", "yaml", "field", "now", "when", "you", "yaml", "load", "content", "abov", "you", "will", "get", "follow", "error", "typeerror", "type", "error", "no", "implicit", "convers", "activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "into", "string", "it", "happen", "becaus", "init", "method", "expect", "receiv", "json", "string", "at", "json", "data", "field", "not", "activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "sinc", "serial", "will", "set", "true", "that", "'s", "whi", "at", "origin", "issu", "descript", "hundredwatt", "say", "that", "call", "record", "reload", "work", "becaus", "when", "you", "call", "reload", "at", "object", "init", "call", "data", "as", "it", "come", "databas", "column", "that", "will", "json", "string", "not", "real", "hash", "object", "solut", "here", "wa", "creat", "separ", "attribut", "coder", "method", "that", "serial", "code", "overrid", "when", "need", "gener", "encod", "valu", "field", "so", "it", "safe", "dump", "then", "load", "back", "again", "through", "correct", "process"], "B_body": "Fixes #13861 \n\nSelf-contained gist (tested on ruby 2.0.0-p353): https://gist.github.com/hundredwatt/8668163\n\nException:  `TypeError: no implicit conversion of ActiveSupport::HashWithIndifferentAccess into String`\n", "B_clean_body": ["fix", "13861", "self", "contain", "gist", "test", "rubi", "p353", "http", "github", "gist", "com", "hundredwatt", "8668163", "except", "typeerror", "type", "error", "no", "implicit", "convers", "activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "into", "string"], "title_sim": [0.6361598082467782], "body_sim": [0.34423924388006005], "file_list_sim": 0.6, "overlap_files_len": 3, "code_sim": [0.7229901948742931, 0.7396926485556551], "location_sim": [0.6616541353383458, 0.7652173913043478], "pattern": 1, "time": 0}, {"A_title": "ActionView::LookupContext js/html fallback (#10525 redo)", "A_clean_title": ["actionview", "action", "view", ":lookupcontext", ":lookup", "context", "js", "html", "fallback", "10525", "redo"], "B_title": "Don't fall back to HTML if requested :js format exists anywhere in path set", "B_clean_title": ["n't", "fall", "back", "html", "request", "js", "format", "exist", "anywher", "path", "set"], "A_body": "I made pull request #10525 about a year ago and received comments recently. I messed up that merge from rails/rails master so that pull request somehow has an extra 100 commits or so.\n\n`ActionView::LookupContext` is hardcoded to append the :html format whenever :js is set as the format.  A user may want to extend this behavior to their own custom defined formats (for example a :mobile format could fallback to :html as well).  \n\nThis is what it was for:\n\n---\n\nThis current behavior is the magic behind allowing you to render an html partial within a javascript response.\n\n``` ruby\n# in new.js.erb\n# will render the _form.html.erb partial\nrender partial: 'form', locals: {object: @object}\n```\n\nThis change allows you to specify your own fallbacks easily.  In somewhere like `config/initializers/mime_types.rb`:\n\n``` ruby\nMimeTypes.register_alias \"text/html\", :mobile\nActionView::LookupContext.format_fallbacks[:mobile] = [:html]\n```\n\nNow, if you have a request where the format is :mobile, it will try to render a mobile template first, and fallback to the html template.  Additionally, you could render an html partial within a mobile template.\n\nThis behavior is already being tested in `actionpack/test/template/lookup_context_test.rb`.\n", "A_clean_body": ["made", "pull", "request", "10525", "about", "year", "ago", "receiv", "comment", "recent", "mess", "up", "that", "merg", "rail", "rail", "master", "so", "that", "pull", "request", "somehow", "ha", "extra", "100", "commit", "or", "so", "actionview", "action", "view", ":lookupcontext", ":lookup", "context", "hardcod", "append", "html", "format", "whenev", "js", "set", "as", "format", "user", "may", "want", "extend", "thi", "behavior", "their", "own", "custom", "defin", "format", "exampl", "mobil", "format", "could", "fallback", "html", "as", "well", "thi", "what", "it", "wa", "thi", "current", "behavior", "magic", "behind", "allow", "you", "render", "html", "partial", "within", "javascript", "respons", "rubi", "new", "js", "erb", "will", "render", "html", "erb", "form", "partial", "render", "partial", "'form", "local", "object", "object", "thi", "chang", "allow", "you", "specifi", "your", "own", "fallback", "easili", "somewher", "like", "rb", "type", "config", "initi", "mime", "rubi", "mimetyp", "mime", "type", "regist", "alia", "text", "html", "mobil", "actionview", "action", "view", ":lookupcontext", ":lookup", "context", "format", "fallback", "mobil", "html", "now", "you", "have", "request", "where", "format", "mobil", "it", "will", "tri", "render", "mobil", "templat", "first", "fallback", "html", "templat", "addit", "you", "could", "render", "html", "partial", "within", "mobil", "templat", "thi", "behavior", "alreadi", "be", "test", "rb", "context", "test", "actionpack", "test", "templat", "lookup"], "B_body": "ActionView has a fallback feature to render an `:html` format template as a \"template of last resort\" even when `:js` is the only format specified, to support rendering HTML-formatted responses to XHR requests.\n\nI believe this fallback is broken when using multiple view paths. LookupContext treats a requested `:js` format as `[:js, :html]` when rendering anything except a layout. So the first view path will be matched against formats of `[:js, :html]` before the second view path is considered. Thus an \"index.html.erb\" in the first path will prevent an \"index.js.erb\" in any subsequent view paths from being rendered, even though the only format requested was JS.\n\nMy fix pushes down the fallback to lookup time; it attempts to look up the JS template in the PathSet, rescues any MissingTemplate, and retries with :html. I was conflicted about using exceptions for flow control here, but I wanted to do as little violence to the PathSet API as possible, and it currently raises MissingTemplate on missing templates.\n\nSome care had to be taken to ensure that layouts still only render their first format (so, for example, a JS request never renders an HTML template). That motivated the introduction of the `@layout_format` ivar.\n\nMajor props to the Rails team, especially @josevalim, for how accessible this code is. I went from \"hmm, that's weird\" to a failing test case in about 30 minutes. Thanks!\n", "B_clean_body": ["actionview", "action", "view", "ha", "fallback", "featur", "render", "html", "format", "templat", "as", "templat", "last", "resort", "even", "when", "js", "onli", "format", "specifi", "support", "render", "html", "format", "respons", "xhr", "request", "believ", "thi", "fallback", "broken", "when", "multipl", "view", "path", "lookupcontext", "lookup", "context", "treat", "request", "js", "format", "as", "js", "html", "when", "render", "anyth", "except", "layout", "so", "first", "view", "path", "will", "match", "against", "format", "js", "html", "befor", "second", "view", "path", "consid", "thu", "index", "html", "erb", "first", "path", "will", "prevent", "index", "js", "erb", "ani", "subsequ", "view", "path", "be", "render", "even", "though", "onli", "format", "request", "wa", "js", "my", "fix", "push", "down", "fallback", "lookup", "time", "it", "attempt", "look", "up", "js", "templat", "pathset", "path", "set", "rescu", "ani", "missingtempl", "miss", "templat", "retri", "html", "wa", "conflict", "about", "except", "flow", "control", "here", "but", "want", "as", "littl", "violenc", "pathset", "path", "set", "api", "as", "possibl", "it", "current", "rais", "missingtempl", "miss", "templat", "miss", "templat", "some", "care", "had", "taken", "ensur", "that", "layout", "still", "onli", "render", "their", "first", "format", "so", "exampl", "js", "request", "never", "render", "html", "templat", "that", "motiv", "introduct", "layout", "format", "ivar", "major", "prop", "rail", "team", "especi", "josevalim", "how", "access", "thi", "code", "went", "hmm", "that", "'s", "weird", "fail", "test", "case", "about", "30", "minut", "thank"], "title_sim": [0.42464011804977453], "body_sim": [0.7045547624117531], "file_list_sim": 0.16666666666666666, "overlap_files_len": 1, "code_sim": [0.289209448273377, 0.39861909924240424], "location_sim": [0.46794871794871795, 0.6239316239316239], "pattern": 0, "time": 763}, {"A_title": "ActionCable action params passed in as hash with indifferent access", "A_clean_title": ["actionc", "action", "cabl", "action", "param", "pass", "as", "hash", "indiffer", "access"], "B_title": "Accept channel identifiers with no backslashes/escaping", "B_clean_title": ["accept", "channel", "identifi", "no", "backslash", "escap"], "A_body": "### Summary\n\nThis pull request makes two changes:\n1. Calls `with_indifferent_access` on any `Hash` that is passed back to the target action on an ActionCable channel. This makes it fall in line with what is expected from `params` in an `ActionController`.\n2. Does not attempt to JSON decode an object that is not a `String`. This means that the incoming JSON can be `{... \"data\": {\"hello\": \"world\"}}` as well as working with what it had to be before: `{... \"data\": \"{\\\"hello\\\": \\\"world\\\"}\"}`. The result is the same, but the protocol between server and client is changed (is this documented anywhere?)\n### Other Information\n\nAdded a test to make sure the second point above has an associated test with the changed behavior.\n", "A_clean_body": ["summari", "thi", "pull", "request", "make", "two", "chang", "call", "indiffer", "access", "ani", "hash", "that", "pass", "back", "target", "action", "actionc", "action", "cabl", "channel", "thi", "make", "it", "fall", "line", "what", "expect", "param", "actioncontrol", "action", "control", "not", "attempt", "json", "decod", "object", "that", "not", "string", "thi", "mean", "that", "incom", "json", "data", "hello", "world", "as", "well", "as", "work", "what", "it", "had", "befor", "data", "hello", "world", "result", "same", "but", "protocol", "between", "server", "client", "chang", "thi", "document", "anywher", "other", "inform", "ad", "test", "make", "sure", "second", "point", "abov", "ha", "associ", "test", "chang", "behavior"], "B_body": "Fixes #22675\n\nAllow channel identifiers with no backslahes/escaping to be accepted by\nthe subscription storer. Also, subscriptions are now identified by their\n_escaped_ JSON keys. For example, `\"{\\\"channel\\\":\\\"RoomChannel\\\"}\"` is\nnow identified by `{\"channel\"=>\"RoomChannel\"}` in the global\nsubscriptions hash.\n", "B_clean_body": ["fix", "22675", "allow", "channel", "identifi", "no", "backslah", "escap", "accept", "by", "subscript", "storer", "also", "subscript", "are", "now", "identifi", "by", "their", "escap", "json", "key", "exampl", "channel", "roomchannel", "room", "channel", "now", "identifi", "by", "channel", "roomchannel", "room", "channel", "global", "subscript", "hash"], "title_sim": [0.024347341257751683], "body_sim": [0.08671738477104522], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.3010832490319698, 0.2599887641376048], "location_sim": [0.4818181818181818, 0.5578947368421052], "pattern": 0, "time": 16}, {"A_title": "Define sqlite3_version only when current_adapter is SQLite3Adapter.", "A_clean_title": ["defin", "sqlite3", "version", "onli", "when", "current", "adapt", "sqlite3adapt", "sq", "lite3adapt"], "B_title": "fix test error when running with postgresql.", "B_clean_title": ["fix", "test", "error", "when", "run", "postgresql"], "A_body": "rake test fails when mysql, mysql2 and postgresql tested. It finishes successfully for sqlite.\nbecause SQLite3::VERSION value cannot be get unless current adapter is SQLite3Adapter.\n\n``` ruby\n\n$ cd activerecord\n$ rake test\n... snip ...\nUsing mysql with Identity Map off\n\n  1) Error:\ntest_cache_does_not_wrap_string_results_in_arrays(QueryCacheTest):\nNameError: uninitialized constant QueryCacheTest::SQLite3\n    /home/yahonda/Dropbox/git/rails/activerecord/test/cases/query_cache_test.rb:151:in `test_cache_does_not_wrap_string_results_in_arrays'\n    /home/yahonda/.rvm/gems/ruby-1.9.2-p290@rails_master/gems/mocha-0.10.0/lib/mocha/integration/mini_test/version_142_to_172.rb:27:in `run'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_setup_callbacks'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n\n3150 tests, 9670 assertions, 0 failures, 1 errors, 0 skips\n\n... snip ...\nUsing mysql2 with Identity Map off\n\n  1) Error:\ntest_cache_does_not_wrap_string_results_in_arrays(QueryCacheTest):\nNameError: uninitialized constant QueryCacheTest::SQLite3\n    /home/yahonda/Dropbox/git/rails/activerecord/test/cases/query_cache_test.rb:151:in `test_cache_does_not_wrap_string_results_in_arrays'\n    /home/yahonda/.rvm/gems/ruby-1.9.2-p290@rails_master/gems/mocha-0.10.0/lib/mocha/integration/mini_test/version_142_to_172.rb:27:in `run'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_setup_callbacks'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n\n3134 tests, 9638 assertions, 0 failures, 1 errors, 0 skips\n\n... snip ...\nUsing postgresql with Identity Map off\n\n  1) Error:\ntest_cache_does_not_wrap_string_results_in_arrays(QueryCacheTest):\nNameError: uninitialized constant QueryCacheTest::SQLite3\n    /home/yahonda/Dropbox/git/rails/activerecord/test/cases/query_cache_test.rb:151:in `test_cache_does_not_wrap_string_results_in_arrays'\n    /home/yahonda/.rvm/gems/ruby-1.9.2-p290@rails_master/gems/mocha-0.10.0/lib/mocha/integration/mini_test/version_142_to_172.rb:27:in `run'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_setup_callbacks'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /home/yahonda/Dropbox/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n\n3218 tests, 9959 assertions, 0 failures, 1 errors, 0 skips\n\nTest run options: --seed 3894\nErrors running test_mysql, test_mysql2, test_postgresql\n```\n", "A_clean_body": ["rake", "test", "fail", "when", "mysql", "mysql2", "postgresql", "test", "it", "finish", "success", "sqlite", "becaus", "sqlite3", "sq", "lite3", ":version", "valu", "not", "get", "unless", "current", "adapt", "sqlite3adapt", "sq", "lite3adapt", "rubi", "cd", "activerecord", "rake", "test", "snip", "mysql", "ident", "map", "off", "error", "test", "cach", "not", "wrap", "string", "result", "array", "querycachetest", "queri", "cach", "test", "nameerror", "name", "error", "uniniti", "constant", "querycachetest", "queri", "cach", "test", ":sqlite3", ":sq", "lite3", "rb:151", "cach", "test", "home", "yahonda", "dropbox", "git", "rail", "activerecord", "test", "case", "queri", "test", "cach", "not", "wrap", "string", "result", "arrays'", "p290", "home", "yahonda", "rvm", "gem", "rubi", "rail", "10", "rb:27", "master", "gem", "mocha", "142", "172", "lib", "mocha", "integr", "mini", "test", "version", "run'", "rb:35", "teardown", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "test", "setup", "block", "run'", "rb:408", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "setup", "callbacks'", "rb:81", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "callbacks'", "rb:34", "teardown", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "test", "setup", "run'", "3150", "test", "9670", "assert", "failur", "error", "skip", "snip", "mysql2", "ident", "map", "off", "error", "test", "cach", "not", "wrap", "string", "result", "array", "querycachetest", "queri", "cach", "test", "nameerror", "name", "error", "uniniti", "constant", "querycachetest", "queri", "cach", "test", ":sqlite3", ":sq", "lite3", "rb:151", "cach", "test", "home", "yahonda", "dropbox", "git", "rail", "activerecord", "test", "case", "queri", "test", "cach", "not", "wrap", "string", "result", "arrays'", "p290", "home", "yahonda", "rvm", "gem", "rubi", "rail", "10", "rb:27", "master", "gem", "mocha", "142", "172", "lib", "mocha", "integr", "mini", "test", "version", "run'", "rb:35", "teardown", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "test", "setup", "block", "run'", "rb:408", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "setup", "callbacks'", "rb:81", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "callbacks'", "rb:34", "teardown", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "test", "setup", "run'", "3134", "test", "9638", "assert", "failur", "error", "skip", "snip", "postgresql", "ident", "map", "off", "error", "test", "cach", "not", "wrap", "string", "result", "array", "querycachetest", "queri", "cach", "test", "nameerror", "name", "error", "uniniti", "constant", "querycachetest", "queri", "cach", "test", ":sqlite3", ":sq", "lite3", "rb:151", "cach", "test", "home", "yahonda", "dropbox", "git", "rail", "activerecord", "test", "case", "queri", "test", "cach", "not", "wrap", "string", "result", "arrays'", "p290", "home", "yahonda", "rvm", "gem", "rubi", "rail", "10", "rb:27", "master", "gem", "mocha", "142", "172", "lib", "mocha", "integr", "mini", "test", "version", "run'", "rb:35", "teardown", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "test", "setup", "block", "run'", "rb:408", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "setup", "callbacks'", "rb:81", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "callbacks'", "rb:34", "teardown", "home", "yahonda", "dropbox", "git", "rail", "activesupport", "lib", "activ", "support", "test", "setup", "run'", "3218", "test", "9959", "assert", "failur", "error", "skip", "test", "run", "option", "seed", "3894", "error", "run", "test", "mysql", "test", "mysql2", "test", "postgresql"], "B_body": "This Sqlite3 should be in if block.\nWas giving error because sqlite3 is not loaded\n", "B_clean_body": ["thi", "sqlite3", "block", "wa", "give", "error", "becaus", "sqlite3", "not", "load"], "title_sim": [0.08965184545433984], "body_sim": [0.1233186776230031], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Allow passing record being validated to error message generator", "A_clean_title": ["allow", "pass", "record", "be", "valid", "error", "messag", "gener"], "B_title": "Pass instance to I18n when translating error", "B_clean_title": ["pass", "instanc", "i18n", "when", "translat", "error"], "A_body": "- Pass object to I18n helper so that when calling message proc, it will\n  pass that object as argument to the proc and we can generate custom\n  error messages based on current record being validated.\n- Based on https://github.com/rails/rails/issues/856.\n\nr? @rafaelfranca \n\nI used different approach from #856 by passing required object to I18n so that it can call proc with correct argument.  Let me know if this is right approach or not. I will add CHANGELOG and documentation after getting some ideas about this approach.\n", "A_clean_body": ["pass", "object", "i18n", "helper", "so", "that", "when", "call", "messag", "proc", "it", "will", "pass", "that", "object", "as", "argument", "proc", "we", "gener", "custom", "error", "messag", "base", "current", "record", "be", "valid", "base", "http", "github", "com", "rail", "rail", "issu", "856", "rafaelfranca", "use", "differ", "approach", "856", "by", "pass", "requir", "object", "i18n", "so", "that", "it", "call", "proc", "correct", "argument", "let", "me", "know", "thi", "right", "approach", "or", "not", "will", "add", "changelog", "document", "after", "get", "some", "idea", "about", "thi", "approach"], "B_body": "It'll allow to do like this:\n\n``` ruby\n# inside model that has .title\nvalidates_numericality_of :quantity, greater_then: 0,\n  title: ->(h) { h[:instance].title }\n```\n\nwith translations\n\n``` yaml\nerrors:\n  models:\n    my_model:\n      greater_then: of %{title} must be greater than %{count}\n```\n", "B_clean_body": ["it", "'ll", "allow", "like", "thi", "rubi", "insid", "model", "that", "ha", "titl", "valid", "numer", "quantiti", "greater", "then", "titl", "instanc", "titl", "translat", "yaml", "error", "model", "my", "model", "greater", "then", "titl", "must", "greater", "than", "count"], "title_sim": [0.31596798789817837], "body_sim": [0.11200754508457156], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.07202467839326371, 0.6102865448975066], "location_sim": [0.0, 0.0], "pattern": 0, "time": 746}, {"A_title": "Lock down new `ImplicitRender` behavior for 5.0 RC", "A_clean_title": ["lock", "down", "new", "implicitrend", "implicit", "render", "behavior", "rc"], "B_title": "Default rendering behavior if respond_to collector doesn't have a block.", "B_clean_title": ["default", "render", "behavior", "respond", "collector", "n't", "have", "block"], "A_body": "1. Conceptually revert #20276\n   \n   The feature was implemented for the `responders` gem. In the end,\n   they did not need that feature, and have found a better fix (see\n   plataformatec/responders#131).\n   \n   `ImplicitRender` is the place where Rails specifies our default\n   policies for the case where the user did not explicitly tell us\n   what to render, essentially describing a set of heuristics. If\n   the gem (or the user) knows exactly what they want, they could\n   just perform the correct `render` to avoid falling through to\n   here, as `responders` did (the user called `respond_with`).\n   \n   Reverting the patch allows us to avoid exploding the complexity\n   and defining \u201cthe fallback for a fallback\u201d policies.\n2. `respond_to` and templates are considered exhaustive enumerations\n   \n   If the user specified a list of formats/variants in a `respond_to`\n   block, anything that is not explicitly included should result\n   in an `UnknownFormat` error (which is then caught upstream to\n   mean \u201c406 Not Acceptable\u201d by default). This is already how it\n   works before this commit.\n   \n   Same goes for templates \u2013 if the user defined a set of templates\n   (usually in the file system), that set is now considered exhaustive,\n   which means that \u201cmissing\u201d templates are considered `UnknownFormat`\n   errors (406).\n3. To keep API endpoints simple, the implicit render behavior for\n   actions with no templates defined at all (regardless of formats,\n   locales, variants, etc) are defaulted to \u201c204 No Content\u201d. This\n   is a strictly narrower version of the feature landed in #19036 and\n   #19377.\n4. To avoid confusion when interacting in the browser, these actions\n   will raise a `TemplateMissing` error for \u201cinteractive\u201d requests\n   instead. (The precise definition of \u201cinteractive\u201d requests might\n   change \u2013 the spirit here is to give helpful messages and avoid\n   confusions.)\n\nCloses #20666, #23062, #23077, #23564\n\n[Godfrey Chan, Jon Moss, Mike Clark, Matthew Draper, Kasper Timm Hansen]\n\n---\n\nTODO:\n- [x] Finish porting the new tests in the other PRs\n- [x] Write helpful error messages for the two \"no templates\" scenario\n", "A_clean_body": ["conceptu", "revert", "20276", "featur", "wa", "implement", "respond", "gem", "end", "they", "did", "not", "need", "that", "featur", "have", "found", "better", "fix", "see", "plataformatec", "respond", "131", "implicitrend", "implicit", "render", "place", "where", "rail", "specifi", "our", "default", "polici", "case", "where", "user", "did", "not", "explicitli", "tell", "us", "what", "render", "essenti", "describ", "set", "heurist", "gem", "or", "user", "know", "exactli", "what", "they", "want", "they", "could", "just", "perform", "correct", "render", "avoid", "fall", "through", "here", "as", "respond", "did", "user", "call", "respond", "revert", "patch", "allow", "us", "avoid", "explod", "complex", "defin", "fallback", "fallback", "polici", "respond", "templat", "are", "consid", "exhaust", "enumer", "user", "specifi", "list", "format", "variant", "respond", "block", "anyth", "that", "not", "explicitli", "includ", "result", "unknownformat", "unknown", "format", "error", "which", "then", "caught", "upstream", "mean", "406", "not", "accept", "by", "default", "thi", "alreadi", "how", "it", "work", "befor", "thi", "commit", "same", "goe", "templat", "user", "defin", "set", "templat", "usual", "file", "system", "that", "set", "now", "consid", "exhaust", "which", "mean", "that", "miss", "templat", "are", "consid", "unknownformat", "unknown", "format", "error", "406", "keep", "api", "endpoint", "simpl", "implicit", "render", "behavior", "action", "no", "templat", "defin", "at", "all", "regardless", "format", "local", "variant", "etc", "are", "default", "204", "no", "content", "thi", "strictli", "narrow", "version", "featur", "land", "19036", "19377", "avoid", "confus", "when", "interact", "browser", "these", "action", "will", "rais", "templatemiss", "templat", "miss", "error", "interact", "request", "instead", "precis", "definit", "interact", "request", "might", "chang", "spirit", "here", "give", "help", "messag", "avoid", "confus", "close", "20666", "23062", "23077", "23564", "godfrey", "chan", "jon", "moss", "mike", "clark", "matthew", "draper", "kasper", "timm", "hansen", "todo", "finish", "port", "new", "test", "other", "pr", "rs", "write", "help", "error", "messag", "two", "no", "templat", "scenario"], "B_body": "When a `respond_to` collector doesn't have a response, then a `:no_content` response should be rendered. This brings the default rendering behavior introduced by rails#19036 to controller methods\nemploying `respond_to`\n", "B_clean_body": ["when", "respond", "collector", "n't", "have", "respons", "then", "no", "content", "respons", "render", "thi", "bring", "default", "render", "behavior", "introduc", "by", "rail", "19036", "control", "method", "employ", "respond"], "title_sim": [0.15516578226552125], "body_sim": [0.3678424116188561], "file_list_sim": 0.14285714285714285, "overlap_files_len": 2, "code_sim": [0.323495610928746, 0.2928166845032788], "location_sim": [0.3155216284987277, 0.7607361963190185], "pattern": 1, "time": 54}, {"A_title": "Fixes: Missing URL helper for namespaced `root` route", "A_clean_title": ["fix", "miss", "url", "helper", "namespac", "root", "rout"], "B_title": "Fix generated root path inside namespaces", "B_clean_title": ["fix", "gener", "root", "path", "insid", "namespac"], "A_body": "### Summary\n\nFixes: Missing URL helper for namespaced `root` route #26148\n\n`match_root_route` was unnecessarily preventing the definition of additional namespaced URL helpers with the name `:root`.\n### Other Information\n\nAdds spec to validate change\n", "A_clean_body": ["summari", "fix", "miss", "url", "helper", "namespac", "root", "rout", "26148", "match", "root", "rout", "wa", "unnecessarili", "prevent", "definit", "addit", "namespac", "url", "helper", "name", "root", "other", "inform", "add", "spec", "valid", "chang"], "B_body": "In Rails 4.2, we can generate root path inside a namespace like this\n\n``` ruby\nroot to: \"welcome#index\"\n\nnamespace :admin do\n  root to: \"home#index\" # => admin_root_path\nend\n```\n\nBut in the master branch, admin_root_path is not generated because of the previous definition of root_path.\nSo I fixed the `match_root_route` method in order to handle root path inside namescapes correctly.\n", "B_clean_body": ["rail", "we", "gener", "root", "path", "insid", "namespac", "like", "thi", "rubi", "root", "welcom", "index", "namespac", "admin", "root", "home", "index", "admin", "root", "path", "end", "but", "master", "branch", "admin", "root", "path", "not", "gener", "becaus", "previou", "definit", "root", "path", "so", "fix", "match", "root", "rout", "method", "order", "handl", "root", "path", "insid", "namescap", "correctli"], "title_sim": [0.5693645584851976], "body_sim": [0.620547693815656], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.608919158688286, 0.608919158688286], "location_sim": [0.0, 0.0], "pattern": -1, "time": 202}, {"A_title": "`eager_load` doesn't play nicely with a custom `select`", "A_clean_title": ["eager", "load", "n't", "play", "nice", "custom", "select"], "B_title": "Fixes #12423 - Additional select columns are removed when using includes", "B_clean_title": ["fix", "12423", "addit", "select", "column", "are", "remov", "when", "includ"], "A_body": "[Do not merge]\n\nAR is too mysterious for me to find the cause, but I've written a failing test case. I'd be happy to work on fix, though (with some help).\n\nBTW, switching to `preload` makes the assertions pass.\n", "A_clean_body": ["not", "merg", "ar", "too", "mysteri", "me", "find", "caus", "but", "'ve", "written", "fail", "test", "case", "'d", "happi", "work", "fix", "though", "some", "help", "btw", "switch", "preload", "make", "assert", "pass"], "B_body": "", "B_clean_body": [], "title_sim": [0.1550527025444065], "body_sim": [0.0], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.32752246450629974, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 261}, {"A_title": "Improve Test Runner's Minitest integration.", "A_clean_title": ["improv", "test", "runner", "'s", "minitest", "integr"], "B_title": "Do not run rake test tasks with `at_exit`", "B_clean_title": ["not", "run", "rake", "test", "task", "at", "exit"], "A_body": "I've tried to improve the Rails new test running system to take better advantage of Minitest's extension system.\n\nThe build will break as I haven't ported over the Runner tests yet. But the tests running the tests commands should pass.\n\n@zenspider, was this more inline with your comments on the original pull request?\n\ncc @senny @arthurnn\n", "A_clean_body": ["'ve", "tri", "improv", "rail", "new", "test", "run", "system", "take", "better", "advantag", "minitest", "'s", "extens", "system", "build", "will", "break", "as", "have", "n't", "port", "over", "runner", "test", "yet", "but", "test", "run", "test", "command", "pass", "zenspid", "wa", "thi", "more", "inlin", "your", "comment", "origin", "pull", "request", "cc", "senni", "arthurnn"], "B_body": "For rake test tasks, call `Minitest.run` explicitly instead of using the `at_exit` hook. This executes test tasks at their specified position and not only at the end of the rake run.\n\nE.g.\n\n```\nrake test:models other:task test:controllers\n```\n\nThis first runs the model tests, then other:task and finally the controller tests. Before this change, other:task was run first, then the model and controller tests were run in one go.\n\nIf a test task fails, rake exits with exit code 1 (same as before) without running the remaining tasks. \n\nFixes #17708.\n", "B_clean_body": ["rake", "test", "task", "call", "minitest", "run", "explicitli", "instead", "at", "exit", "hook", "thi", "execut", "test", "task", "at", "their", "specifi", "posit", "not", "onli", "at", "end", "rake", "run", "rake", "test", "model", "other", "task", "test", "control", "thi", "first", "run", "model", "test", "then", "other", "task", "final", "control", "test", "befor", "thi", "chang", "other", "task", "wa", "run", "first", "then", "model", "control", "test", "were", "run", "one", "go", "test", "task", "fail", "rake", "exit", "exit", "code", "same", "as", "befor", "without", "run", "remain", "task", "fix", "17708"], "title_sim": [0.23203848647940764], "body_sim": [0.5317772213554084], "file_list_sim": 0.23076923076923078, "overlap_files_len": 3, "code_sim": [0.36517499135410214, 0.4340412353508445], "location_sim": [0.41398865784499056, 0.7227722772277227], "pattern": 0, "time": 8}, {"A_title": "Fix binstop -> binstub typo in railties changelog.", "A_clean_title": ["fix", "binstop", "binstub", "typo", "railti", "changelog"], "B_title": "Use sh instead of Ruby script for yarn binstub", "B_clean_title": ["use", "sh", "instead", "rubi", "script", "yarn", "binstub"], "A_body": "", "A_clean_body": [], "B_body": "Seeing as yarn already uses `sh` for their binstub (https://github.com/yarnpkg/yarn/blob/master/bin/yarn), we opt to use `sh` as well. The main reason for this being that boot times for some interpreters (i.e. jruby) are rather slow. This makes for a much better UX for these users.\r\n\r\nSee: https://github.com/rails/rails/pull/27245", "B_clean_body": ["see", "as", "yarn", "alreadi", "use", "sh", "their", "binstub", "http", "github", "com", "yarnpkg", "yarn", "blob", "master", "bin", "yarn", "we", "opt", "use", "sh", "as", "well", "main", "reason", "thi", "be", "that", "boot", "time", "some", "interpret", "jrubi", "are", "rather", "slow", "thi", "make", "much", "better", "ux", "these", "user", "see", "http", "github", "com", "rail", "rail", "pull", "27245"], "title_sim": [0.00815056323026218], "body_sim": [0.0], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.17707783289930942, 1.0], "location_sim": [0.2682926829268293, 1.0], "pattern": 0, "time": 0}, {"A_title": "Change Default Primary Keys to BIGINT", "A_clean_title": ["chang", "default", "primari", "key", "bigint"], "B_title": "Make pg adapter use bigserial for pk by default", "B_clean_title": ["make", "pg", "adapt", "use", "bigseri", "pk", "by", "default"], "A_body": "<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Friends don&#39;t let friends use INT as a primary key. </p>&mdash; Schneems (@schneems) <a href=\"https://twitter.com/schneems/status/731167572096253952\">May 13, 2016</a></blockquote>\r\n\r\n### Summary\r\n\r\nPer a conversation with @sgrif: changes default primary keys from Integer to BIGINT for both Postgresql and MySQL.  Leaves behavior alone for SQLite since this database does not provide support for BIGINT primary keys.\r\n### Other Information\r\n\r\nFor obvious reasons, this also requires foreign keys to change from integer to bigints. As a result the test suite's `schema.rb` has been change in the necessary places.\r\n\r\nI'll squash and add a CHANGELOG entry once the rest looks ok...\r\n", "A_clean_body": ["blockquot", "class=", "twitter", "tweet", "data", "lang=", "en", "lang=", "en", "dir=", "ltr", "friend", "don", "39", "let", "friend", "use", "int", "as", "primari", "key", "mdash", "schneem", "schneem", "href=", "http", "twitter", "com", "schneem", "statu", "731167572096253952", "may", "13", "2016", "blockquot", "summari", "per", "convers", "sgrif", "chang", "default", "primari", "key", "integ", "bigint", "both", "postgresql", "mysql", "my", "sql", "leav", "behavior", "alon", "sqlite", "sq", "lite", "sinc", "thi", "databas", "not", "provid", "support", "bigint", "primari", "key", "other", "inform", "obviou", "reason", "thi", "also", "requir", "foreign", "key", "chang", "integ", "bigint", "as", "result", "test", "suit", "'s", "schema", "rb", "ha", "been", "chang", "necessari", "place", "'ll", "squash", "add", "changelog", "entri", "onc", "rest", "look", "ok"], "B_body": "This PR makes postgres adapter generate tables using bigserial type for primary keys. There are no performance implications by doing this and it should be fully backwards compatible.\n\nAlso, see https://twitter.com/pvh/status/730141012048281600\n\n/cc @tenderlove @pvh @schneems @hone \n", "B_clean_body": ["thi", "pr", "make", "postgr", "adapt", "gener", "tabl", "bigseri", "type", "primari", "key", "there", "are", "no", "perform", "implic", "by", "do", "thi", "it", "fulli", "backward", "compat", "also", "see", "http", "twitter", "com", "pvh", "statu", "730141012048281600", "cc", "tenderlov", "pvh", "schneem", "hone"], "title_sim": [0.12352421042136913], "body_sim": [0.4446174901278341], "file_list_sim": 0.2727272727272727, "overlap_files_len": 6, "code_sim": [0.7684846468807536, 0.6455932723270235], "location_sim": [0.4036979969183359, 0.9458483754512635], "pattern": 0, "time": 105}, {"A_title": "Suppress `DISTINCT` clause outside aggregate function", "A_clean_title": ["suppress", "distinct", "claus", "outsid", "aggreg", "function"], "B_title": "Remove distinct from relation when doing a relation count", "B_clean_title": ["remov", "distinct", "relat", "when", "do", "relat", "count"], "A_body": "`DISTINCT` clause is applied inside aggregate function by\r\n`operation_over_aggregate_column` if needed. Unneeded outside aggregate\r\nfunction.\r\n\r\n```ruby\r\n  # Before\r\n  author.unique_categorized_posts.count\r\n  # => SELECT DISTINCT COUNT(DISTINCT \"posts\".\"id\") FROM \"posts\" INNER JOIN \"categorizations\" ON \"posts\".\"id\" = \"categorizations\".\"post_id\" WHERE \"categorizations\".\"author_id\" = ?  [[\"author_id\", 2]]\r\n\r\n  # After\r\n  author.unique_categorized_posts.count\r\n  # => SELECT COUNT(DISTINCT \"posts\".\"id\") FROM \"posts\" INNER JOIN \"categorizations\" ON \"posts\".\"id\" = \"categorizations\".\"post_id\" WHERE \"categorizations\".\"author_id\" = ?  [[\"author_id\", 2]]\r\n```", "A_clean_body": ["distinct", "claus", "appli", "insid", "aggreg", "function", "by", "oper", "over", "aggreg", "column", "need", "unneed", "outsid", "aggreg", "function", "rubi", "befor", "author", "count", "uniqu", "categor", "post", "select", "distinct", "count", "distinct", "post", "id", "post", "inner", "join", "categor", "post", "id", "categor", "post", "id", "where", "categor", "author", "id", "author", "id", "after", "author", "count", "uniqu", "categor", "post", "select", "count", "distinct", "post", "id", "post", "inner", "join", "categor", "post", "id", "categor", "post", "id", "where", "categor", "author", "id", "author", "id"], "B_body": "Remove distinct from relation when doing a relation count, since it gets added on subquery part when selecting a distinct count.\n\nFixes #18694\n", "B_clean_body": ["remov", "distinct", "relat", "when", "do", "relat", "count", "sinc", "it", "get", "ad", "subqueri", "part", "when", "select", "distinct", "count", "fix", "18694"], "title_sim": [0.12232970639186273], "body_sim": [0.3808490340392534], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.8603326795760923, 0.8603326795760923], "location_sim": [0.29411764705882354, 0.29411764705882354], "pattern": 0, "time": 705}, {"A_title": "Detect in-place changes on mutable AR attributes", "A_clean_title": ["detect", "place", "chang", "mutabl", "ar", "attribut"], "B_title": "Compare unserialized value when assigning serialized attributes to changed_attributes", "B_clean_title": ["compar", "unseri", "valu", "when", "assign", "serial", "attribut", "chang", "attribut"], "A_body": "We have several mutable types on Active Record now. (Serialized, JSON,\nHStore). We need to be able to detect if these have been modified in\nplace.\n\nSerialized attributes now \"just work\" and no longer need to be saved 100% of the time.\n\nFixes #8328\n", "A_clean_body": ["we", "have", "sever", "mutabl", "type", "activ", "record", "now", "serial", "json", "hstore", "store", "we", "need", "abl", "detect", "these", "have", "been", "modifi", "place", "serial", "attribut", "now", "just", "work", "no", "longer", "need", "save", "100", "time", "fix", "8328"], "B_body": "This is my attempt at a fix for #12505.  Not certain that I put the test in the proper location, but it seemed like a logical spot.\n", "B_clean_body": ["thi", "my", "attempt", "at", "fix", "12505", "not", "certain", "that", "put", "test", "proper", "locat", "but", "it", "seem", "like", "logic", "spot"], "title_sim": [0.32525676871311826], "body_sim": [0.08597597444300364], "file_list_sim": 0.07142857142857142, "overlap_files_len": 1, "code_sim": [0.31546192084593994, 0.32425477592101526], "location_sim": [0.11224489795918367, 1.0], "pattern": -1, "time": 224}, {"A_title": "Init result to nil, to avoid warning", "A_clean_title": ["init", "result", "nil", "avoid", "warn"], "B_title": "Fix NameError: undefined local variable or method `result`", "B_clean_title": ["fix", "nameerror", "name", "error", "undefin", "local", "variabl", "or", "method", "result"], "A_body": "cc @matthewd ", "A_clean_body": ["cc", "matthewd"], "B_body": "Caused by 007e50d8e5a900547471b6c4ec79d9d217682c5d.\r\n\r\n#26925 was closed in favor of dcb364e.\r\nBut dcb364e is only fixed sqlite3 adapter and still broken mysql2\r\nadapter with `prepared_statements: true` (`exec_stmt_and_free`).\r\n\r\n``` diff\r\ndiff --git a/activerecord/test/config.example.yml b/activerecord/test/config.example.yml\r\nindex 58e2d45..7b3c1a6 100644\r\n--- a/activerecord/test/config.example.yml\r\n+++ b/activerecord/test/config.example.yml\r\n@@ -56,9 +56,11 @@ connections:\r\n       username: rails\r\n       encoding: utf8\r\n       collation: utf8_unicode_ci\r\n+      prepared_statements: true\r\n     arunit2:\r\n       username: rails\r\n       encoding: utf8\r\n+      prepared_statements: true\r\n\r\n   oracle:\r\n      arunit:\r\n```\r\n\r\n```\r\n% be rake test_mysql2 --verbose\r\n...\r\nUsing mysql2\r\n/Users/kamipo/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/mysql/database_statements.rb:90: warning: assigned but unused variable - result\r\n/Users/kamipo/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/mysql/database_statements.rb:101:in `block in exec_stmt_and_free': NameError: undefined local variable or method `result' for #<ActiveRecord::ConnectionAdapters::Mysql2Adapter:0x007fe2c50eb140>: SELECT  `ar_internal_metadata`.* FROM `ar_internal_metadata` WHERE `ar_internal_metadata`.`key` = ? LIMIT ? (ActiveRecord::StatementInvalid)\r\n        from /Users/kamipo/src/github.com/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:586:in `block in log'\r\n...\r\n```\r\n", "B_clean_body": ["caus", "by", "007e50d8e5a900547471b6c4ec79d9d217682c5d", "26925", "wa", "close", "favor", "dcb364e", "but", "dcb364e", "onli", "fix", "sqlite3", "adapt", "still", "broken", "mysql2", "adapt", "prepar", "statement", "true", "exec", "stmt", "free", "diff", "diff", "git", "exampl", "yml", "activerecord", "test", "config", "exampl", "yml", "activerecord", "test", "config", "index", "58e2d45", "7b3c1a6", "100644", "exampl", "yml", "activerecord", "test", "config", "exampl", "yml", "activerecord", "test", "config", "56,9", "+56,11", "connect", "usernam", "rail", "encod", "utf8", "collat", "utf8", "unicod", "ci", "prepar", "statement", "true", "arunit2", "usernam", "rail", "encod", "utf8", "prepar", "statement", "true", "oracl", "arunit", "rake", "test", "mysql2", "verbos", "mysql2", "rb:90", "user", "kamipo", "src", "github", "statement", "com", "rail", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "mysql", "databas", "warn", "assign", "but", "unus", "variabl", "result", "rb:101", "user", "kamipo", "src", "github", "statement", "com", "rail", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "mysql", "databas", "block", "exec", "stmt", "free", "nameerror", "name", "error", "undefin", "local", "variabl", "or", "method", "result", "activerecord", "activ", "record", ":connectionadapt", ":connect", "adapt", ":mysql2adapter:0x007fe2c50eb140", "select", "ar", "intern", "metadata", "ar", "intern", "metadata", "where", "ar", "intern", "metadata", "key", "limit", "activerecord", "activ", "record", ":statementinvalid", ":statement", "invalid", "rb:586", "user", "kamipo", "src", "github", "adapt", "com", "rail", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "abstract", "block", "log'"], "title_sim": [0.10154337398499048], "body_sim": [0.0002649599766733034], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 15}, {"A_title": "Properly support reloading for Action Cable channels", "A_clean_title": ["properli", "support", "reload", "action", "cabl", "channel"], "B_title": "Actioncable deadlock with multiple channels", "B_clean_title": ["actionc", "deadlock", "multipl", "channel"], "A_body": "Basically: eliminate places that ActionCable was holding long-term references to channel classes (and ApplicationCable::Connection).\n", "A_clean_body": ["basic", "elimin", "place", "that", "actionc", "action", "cabl", "wa", "hold", "long", "term", "refer", "channel", "class", "applicationc", "applic", "cabl", ":connect"], "B_body": "I ran into an issue with my ActionCable enabled app where the server was locking up constantly using the current master branch from the rails repository. I was able to recreate the issue in my own fork of the ActionCable examples repo.\n\nI modified the ActionCable example to mount ActionCable at the '/ws' endpoint in the routes.rb file and I also created a second channel which the client subscribes to at the same time as the first: https://github.com/rails/actioncable-examples/compare/master...eacaps:2channel-rails5-master.\n\nTo take it one step further, I created a test case in the actioncable examples to demonstrate the issue. The issue wasn't always manifesting itself, so I monkeypatched the ActionCable::Server::Base channel_classes method to put a small delay in: https://github.com/eacaps/actioncable-examples/commit/300de61fae59121ec7fb58b4df6bc00d9b8ef08b.\n### Steps to reproduce\n\n```\nOpen a terminal\n$ git clone https://github.com/eacaps/actioncable-examples.git\n$ cd actioncable-examples\n$ git checkout deadlock-test-case-failure\n$ ./bin/setup\n$ rake\nRun options: --seed 54861\n\n# Running:\n\n=> Booting Puma\n=> Rails 5.0.0.beta3 application starting in test on http://0.0.0.0:3000\n=> Run `rails server -h` for more startup options\nDEPRECATION WARNING: `config.serve_static_files` is deprecated and will be removed in Rails 5.1.\nPlease use `config.public_file_server.enabled = true` instead.\n (called from block in <top (required)> at /Users/eacaps/workspace/rails5/deadlock/config/environments/test.rb:16)\nDEPRECATION WARNING: `config.static_cache_control` is deprecated and will be removed in Rails 5.1.\nPlease use\n`config.public_file_server.headers = { 'Cache-Control' => 'public, max-age=3600' }`\ninstead.\n (called from block in <top (required)> at /Users/eacaps/workspace/rails5/deadlock/config/environments/test.rb:17)\nPuma starting in single mode...\n* Version 3.4.0 (ruby 2.2.2-p95), codename: Owl Bowl Brawl\n* Min threads: 0, max threads: 16\n* Environment: development\n* Listening on tcp://0.0.0.0:3000\nUse Ctrl-C to stop\nstarting deadlock test\nStarted GET \"/ws\" for 127.0.0.1 at 2016-04-26 15:09:57 -0400\nStarted GET \"/ws/\" [WebSocket] for 127.0.0.1 at 2016-04-26 15:09:57 -0400\nSuccessfully upgraded to WebSocket (REQUEST_METHOD: GET, HTTP_CONNECTION: Upgrade, HTTP_UPGRADE: websocket)\n  User Load (0.2ms)  SELECT  \"users\".* FROM \"users\" WHERE \"users\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\n[ActionCable] [The Notorious B.I.G.] Registered connection (Z2lkOi8vYWN0aW9uY2FibGUtZXhhbXBsZXMvVXNlci8x)\n70139809484260 - entering channel_classes\n70139814496000 - entering channel_classes\n70139809484260 - channel_classes at each\nExiting\nE\n\nError:\nQuickTest#test_deadlock_situation:\nThreadError: queue empty\n    test/deadlock_test.rb:79:in `pop'\n    test/deadlock_test.rb:79:in `read_message'\n    test/deadlock_test.rb:135:in `test_deadlock_situation'\n\n\nbin/rails test test/deadlock_test.rb:128\n\n\n\nFinished in 13.344337s, 0.0749 runs/s, 0.0749 assertions/s.\n\n1 runs, 1 assertions, 0 failures, 1 errors, 0 skips\n```\n\nThe test will hang when attempting to load the channel_classes and will eventually error out from failing to read from the websocket.\n### Expected behavior\n\nAttempting to subscribe to 2 branches at the same time should not deadlock the server. After digging into the issue it seems like it has something to do with active_support and dependencies.rb which are used by the require statement in the ActionCable::Server::Base channel_classes method. I'm not an expert in rails, but it seemed that both threads were trying to grab the Dependencies.load_interlock and having issues resolving that situation. The simplest solution I could think up was to load the channel classes when the server is initialized. I decided to put it in the ActionCable::Server::Base call method because that seems like the most reasonable place for it. I created a separate branch called `deadlock-test-case` that uses my proposed fixed rails5 branch `actioncable/server-base-channel-classes`.\n\n```\n$ git checkout deadlock-test-case\n$ bundle install\n$ rake\nRun options: --seed 58815\n\n# Running:\n\n=> Booting Puma\n=> Rails 5.0.0.beta3 application starting in test on http://0.0.0.0:3000\n=> Run `rails server -h` for more startup options\nDEPRECATION WARNING: `serve_static_files` is deprecated and will be removed in Rails 5.1.\nPlease use `config.public_file_server.enabled = true` instead.\n (called from block in <top (required)> at /Users/eacaps/workspace/rails5/deadlock/config/environments/test.rb:16)\nDEPRECATION WARNING: `static_cache_control` is deprecated and will be removed in Rails 5.1.\nPlease use\n`config.public_file_server.headers = { 'Cache-Control' => 'public, max-age=3600' }`\ninstead.\n (called from block in <top (required)> at /Users/eacaps/workspace/rails5/deadlock/config/environments/test.rb:17)\n70180801995260 - entering channel_classes\n70180801995260 - channel_classes at each\n70180801995260 - channel_classes past each\n70180801995260 - channel_classes return each_with_object\nPuma starting in single mode...\n* Version 3.4.0 (ruby 2.2.2-p95), codename: Owl Bowl Brawl\n* Min threads: 0, max threads: 16\n* Environment: development\n* Listening on tcp://0.0.0.0:3000\nUse Ctrl-C to stop\nstarting deadlock test\nStarted GET \"/ws\" for 127.0.0.1 at 2016-04-26 15:21:51 -0400\nStarted GET \"/ws/\" [WebSocket] for 127.0.0.1 at 2016-04-26 15:21:51 -0400\nSuccessfully upgraded to WebSocket (REQUEST_METHOD: GET, HTTP_CONNECTION: Upgrade, HTTP_UPGRADE: websocket)\n  User Load (0.1ms)  SELECT  \"users\".* FROM \"users\" WHERE \"users\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\n[ActionCable] [The Notorious B.I.G.] Registered connection (Z2lkOi8vYWN0aW9uY2FibGUtZXhhbXBsZXMvVXNlci8x)\n70180815623020 - entering channel_classes\n[ActionCable] [The Notorious B.I.G.] CommentsChannel is transmitting the subscription confirmation\n70180848652000 - entering channel_classes\ni subscribed\n[ActionCable] [The Notorious B.I.G.] OtherChannel transmitting {:data=>\"some data\"}\n[ActionCable] [The Notorious B.I.G.] OtherChannel is transmitting the subscription confirmation\n[ActionCable] [The Notorious B.I.G.] Finished \"/ws/\" [WebSocket] for 127.0.0.1 at 2016-04-26 15:21:52 -0400\nExiting\n.\n\nFinished in 5.972153s, 0.1674 runs/s, 1.0047 assertions/s.\n\n1 runs, 6 assertions, 0 failures, 0 errors, 0 skips\n```\n### System configuration\n\nUsing latest rails master branch from:\n`gem 'rails', git: 'https://github.com/rails/rails.git', branch: 'master'`\n\nRuby version info:\n\n```\nruby -v\nruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-darwin15]\n```\n### Additional info\n\nI closed my previous stale issue(https://github.com/rails/rails/issues/24094) since this one has a pull request attached to it.\n", "B_clean_body": ["ran", "into", "issu", "my", "actionc", "action", "cabl", "enabl", "app", "where", "server", "wa", "lock", "up", "constantli", "current", "master", "branch", "rail", "repositori", "wa", "abl", "recreat", "issu", "my", "own", "fork", "actionc", "action", "cabl", "exampl", "repo", "modifi", "actionc", "action", "cabl", "exampl", "mount", "actionc", "action", "cabl", "at", "ws", "endpoint", "rout", "rb", "file", "also", "creat", "second", "channel", "which", "client", "subscrib", "at", "same", "time", "as", "first", "http", "exampl", "compar", "master", "github", "com", "rail", "actionc", "eacaps:2channel", "rails5", "master", "take", "it", "one", "step", "further", "creat", "test", "case", "actionc", "exampl", "demonstr", "issu", "issu", "wa", "n't", "alway", "manifest", "itself", "so", "monkeypatch", "actionc", "action", "cabl", ":server", ":base", "channel", "class", "method", "put", "small", "delay", "http", "exampl", "commit", "300de61fae59121ec7fb58b4df6bc00d9b8ef08b", "github", "com", "eacap", "actionc", "step", "reproduc", "open", "termin", "git", "clone", "http", "exampl", "git", "github", "com", "eacap", "actionc", "cd", "actionc", "exampl", "git", "checkout", "deadlock", "test", "case", "failur", "bin", "setup", "rake", "run", "option", "seed", "54861", "run", "boot", "puma", "rail", "beta3", "applic", "start", "test", "http", "0:3000", "run", "rail", "server", "more", "startup", "option", "deprec", "warn", "config", "serv", "static", "file", "deprec", "will", "remov", "rail", "pleas", "use", "config", "enabl", "public", "file", "server", "true", "instead", "call", "block", "top", "requir", "at", "rb:16", "user", "eacap", "workspac", "rails5", "deadlock", "config", "environ", "test", "deprec", "warn", "config", "static", "cach", "control", "deprec", "will", "remov", "rail", "pleas", "use", "config", "header", "public", "file", "server", "'cach", "control", "'public", "max", "age=3600", "instead", "call", "block", "top", "requir", "at", "rb:17", "user", "eacap", "workspac", "rails5", "deadlock", "config", "environ", "test", "puma", "start", "singl", "mode", "version", "rubi", "p95", "codenam", "owl", "bowl", "brawl", "min", "thread", "max", "thread", "16", "environ", "develop", "listen", "tcp", "0:3000", "use", "ctrl", "stop", "start", "deadlock", "test", "start", "get", "ws", "127", "at", "2016", "04", "26", "15:09:57", "0400", "start", "get", "ws", "websocket", "web", "socket", "127", "at", "2016", "04", "26", "15:09:57", "0400", "success", "upgrad", "websocket", "web", "socket", "request", "method", "get", "http", "connect", "upgrad", "http", "upgrad", "websocket", "user", "load", "2m", "select", "user", "user", "where", "user", "id", "limit", "id", "limit", "actionc", "action", "cabl", "notori", "regist", "connect", "z2lkoi8vywn0aw9uy2fibgutzxhhbxbszxmvvxnlci8x", "z2lk", "oi8v", "ywn0a", "w9u", "y2fib", "ut", "xhhb", "bs", "zx", "mv", "vx", "nlci8x", "70139809484260", "enter", "channel", "class", "70139814496000", "enter", "channel", "class", "70139809484260", "channel", "class", "at", "each", "exit", "error", "quicktest", "quick", "test", "test", "deadlock", "situat", "threaderror", "thread", "error", "queue", "empti", "rb:79", "test", "test", "deadlock", "pop'", "rb:79", "test", "test", "deadlock", "read", "message'", "rb:135", "test", "test", "deadlock", "test", "deadlock", "situation'", "bin", "rail", "test", "rb:128", "test", "test", "deadlock", "finish", "13", "344337", "0749", "run", "0749", "assert", "run", "assert", "failur", "error", "skip", "test", "will", "hang", "when", "attempt", "load", "channel", "class", "will", "eventu", "error", "out", "fail", "read", "websocket", "expect", "behavior", "attempt", "subscrib", "branch", "at", "same", "time", "not", "deadlock", "server", "after", "dig", "into", "issu", "it", "seem", "like", "it", "ha", "someth", "activ", "support", "depend", "rb", "which", "are", "use", "by", "requir", "statement", "actionc", "action", "cabl", ":server", ":base", "channel", "class", "method", "'m", "not", "expert", "rail", "but", "it", "seem", "that", "both", "thread", "were", "tri", "grab", "depend", "load", "interlock", "have", "issu", "resolv", "that", "situat", "simplest", "solut", "could", "think", "up", "wa", "load", "channel", "class", "when", "server", "initi", "decid", "put", "it", "actionc", "action", "cabl", ":server", ":base", "call", "method", "becaus", "that", "seem", "like", "most", "reason", "place", "it", "creat", "separ", "branch", "call", "deadlock", "test", "case", "that", "use", "my", "propos", "fix", "rails5", "branch", "base", "channel", "class", "actionc", "server", "git", "checkout", "deadlock", "test", "case", "bundl", "instal", "rake", "run", "option", "seed", "58815", "run", "boot", "puma", "rail", "beta3", "applic", "start", "test", "http", "0:3000", "run", "rail", "server", "more", "startup", "option", "deprec", "warn", "serv", "static", "file", "deprec", "will", "remov", "rail", "pleas", "use", "config", "enabl", "public", "file", "server", "true", "instead", "call", "block", "top", "requir", "at", "rb:16", "user", "eacap", "workspac", "rails5", "deadlock", "config", "environ", "test", "deprec", "warn", "static", "cach", "control", "deprec", "will", "remov", "rail", "pleas", "use", "config", "header", "public", "file", "server", "'cach", "control", "'public", "max", "age=3600", "instead", "call", "block", "top", "requir", "at", "rb:17", "user", "eacap", "workspac", "rails5", "deadlock", "config", "environ", "test", "70180801995260", "enter", "channel", "class", "70180801995260", "channel", "class", "at", "each", "70180801995260", "channel", "class", "past", "each", "70180801995260", "channel", "class", "return", "each", "object", "puma", "start", "singl", "mode", "version", "rubi", "p95", "codenam", "owl", "bowl", "brawl", "min", "thread", "max", "thread", "16", "environ", "develop", "listen", "tcp", "0:3000", "use", "ctrl", "stop", "start", "deadlock", "test", "start", "get", "ws", "127", "at", "2016", "04", "26", "15:21:51", "0400", "start", "get", "ws", "websocket", "web", "socket", "127", "at", "2016", "04", "26", "15:21:51", "0400", "success", "upgrad", "websocket", "web", "socket", "request", "method", "get", "http", "connect", "upgrad", "http", "upgrad", "websocket", "user", "load", "1m", "select", "user", "user", "where", "user", "id", "limit", "id", "limit", "actionc", "action", "cabl", "notori", "regist", "connect", "z2lkoi8vywn0aw9uy2fibgutzxhhbxbszxmvvxnlci8x", "z2lk", "oi8v", "ywn0a", "w9u", "y2fib", "ut", "xhhb", "bs", "zx", "mv", "vx", "nlci8x", "70180815623020", "enter", "channel", "class", "actionc", "action", "cabl", "notori", "commentschannel", "comment", "channel", "transmit", "subscript", "confirm", "70180848652000", "enter", "channel", "class", "subscrib", "actionc", "action", "cabl", "notori", "otherchannel", "other", "channel", "transmit", "data=", "some", "data", "actionc", "action", "cabl", "notori", "otherchannel", "other", "channel", "transmit", "subscript", "confirm", "actionc", "action", "cabl", "notori", "finish", "ws", "websocket", "web", "socket", "127", "at", "2016", "04", "26", "15:21:52", "0400", "exit", "finish", "972153", "1674", "run", "0047", "assert", "run", "assert", "failur", "error", "skip", "system", "configur", "latest", "rail", "master", "branch", "gem", "'rail", "git", "'http", "git", "github", "com", "rail", "rail", "branch", "'master", "rubi", "version", "info", "rubi", "rubi", "2p95", "2015", "04", "13", "revis", "50295", "darwin15", "x86", "64", "addit", "info", "close", "my", "previou", "stale", "issu", "http", "github", "com", "rail", "rail", "issu", "24094", "sinc", "thi", "one", "ha", "pull", "request", "attach", "it"], "title_sim": [0.14482630305555244], "body_sim": [0.5410795016601386], "file_list_sim": 0.1, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.10416666666666667, 0.5882352941176471], "pattern": 0, "time": 35}, {"A_title": "Fix for setting 0.0 to '0.0' being incorrectly marked as dirty.", "A_clean_title": ["fix", "set", "be", "incorrectli", "mark", "as", "dirti"], "B_title": "assigning '0.0' to a nullable numeric column does not make it dirty", "B_clean_title": ["assign", "nullabl", "numer", "column", "not", "make", "it", "dirti"], "A_body": "", "A_clean_body": [], "B_body": "This is a fix for the issue described in #9034\n\nIt treats `'0.0'` the same way as `'0'`. This makes sure that nullable numeric column don't get changed when you assign `'0.0'`.\n\nIf it's ok, I'll backport that change, since the behavior was reported from `3.2.x`\n", "B_clean_body": ["thi", "fix", "issu", "describ", "9034", "it", "treat", "same", "way", "as", "thi", "make", "sure", "that", "nullabl", "numer", "column", "n't", "get", "chang", "when", "you", "assign", "it", "'s", "ok", "'ll", "backport", "that", "chang", "sinc", "behavior", "wa", "report"], "title_sim": [-0.0036611984696281333], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.5312039044691942, 0.5312039044691942], "location_sim": [1.0, 1.0], "pattern": 1, "time": 0}, {"A_title": "Add support for ARIA attributes in tags", "A_clean_title": ["add", "support", "aria", "attribut", "tag"], "B_title": "We want to allow aria-* to pass like data-* in tag options", "B_clean_title": ["we", "want", "allow", "aria", "pass", "like", "data", "tag", "option"], "A_body": "As part of our work in Rails Girls Summer of Code we have added support for ARIA attributes in tag helpers, so the users can set the attributes in this way:\n\n``` ruby\n<%= f.text_field :name, aria: { required: \"true\", hidden: \"false\" } %>\n```\n\nAnd this will generate:\n\n``` html\n<input aria-hidden=\"false\" aria-required=\"true\" id=\"user_name\" name=\"user[name]\" type=\"text\">\n```\n\nWe used the implementation of the `data` attributes as base for this.\n", "A_clean_body": ["as", "part", "our", "work", "rail", "girl", "summer", "code", "we", "have", "ad", "support", "aria", "attribut", "tag", "helper", "so", "user", "set", "attribut", "thi", "way", "rubi", "text", "field", "name", "aria", "requir", "true", "hidden", "fals", "thi", "will", "gener", "html", "input", "aria", "hidden=", "fals", "aria", "required=", "true", "id=", "user", "name", "name=", "user", "name", "type=", "text", "we", "use", "implement", "data", "attribut", "as", "base", "thi"], "B_body": "Exactly like `data-*` attributes on HTML elements it is now common to\npass `aria-*` style attributes to tags (bootstrap for example). The\nspec is defined here\nhttp://rawgithub.com/w3c/aria-in-html/master/index.html\n\nIn this PR I\u2019ve cleaned up some of the previous tag option formatting\nto be a bit faster, smaller to reason, and opens up to future additions\nof similar hash-like options. If for instance we wanted to add the\n`rails-*` hash-like we\u2019d just change `HASHLIKE_ATTRIBUTE_KEYS` to\n`[\u2018data\u2019, \u2018aria\u2019, \u2018rails\u2019]`\n", "B_clean_body": ["exactli", "like", "data", "attribut", "html", "element", "it", "now", "common", "pass", "aria", "style", "attribut", "tag", "bootstrap", "exampl", "spec", "defin", "here", "http", "html", "rawgithub", "com", "w3c", "aria", "html", "master", "index", "thi", "pr", "ve", "clean", "up", "some", "previou", "tag", "option", "format", "bit", "faster", "smaller", "reason", "open", "up", "futur", "addit", "similar", "hash", "like", "option", "instanc", "we", "want", "add", "rail", "hash", "like", "we", "just", "chang", "hashlik", "attribut", "key", "data", "aria", "rail"], "title_sim": [0.2398766706493108], "body_sim": [0.3651449363307723], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.7989370990159408, 0.7989370990159408], "location_sim": [0.6440677966101694, 0.6440677966101694], "pattern": 0, "time": 247}, {"A_title": "Remove support for rails-deprecated_sanitizer.", "A_clean_title": ["remov", "support", "rail", "deprec", "sanit"], "B_title": "sanitiser helper may be remove in 5.1, update doc [ci skip]", "B_clean_title": ["sanitis", "helper", "may", "remov", "updat", "doc", "ci", "skip"], "A_body": "We publicly stated on the deprecated sanitizer README that it'll only be\nsupported upto Rails 5.\n\nSo we should be all good on removing it, and we should remove it.\n\nNot sure where or if to publicize that people should have upgraded to rails-html-sanitizer.\n\ncc @rafaelfranca \n", "A_clean_body": ["we", "publicli", "state", "deprec", "sanit", "readm", "that", "it", "'ll", "onli", "support", "upto", "rail", "so", "we", "all", "good", "remov", "it", "we", "remov", "it", "not", "sure", "where", "or", "public", "that", "peopl", "have", "upgrad", "rail", "html", "sanit", "cc", "rafaelfranca"], "B_body": "using `rails-html-sanitizer` gem still Rails providing `strip_tags`, `strip_links` features. May be it'll not remove in 5; according that updated doc\n\n@kaspth @rafaelfranca \n", "B_clean_body": ["rail", "html", "sanit", "gem", "still", "rail", "provid", "strip", "tag", "strip", "link", "featur", "may", "it", "'ll", "not", "remov", "accord", "that", "updat", "doc", "kaspth", "rafaelfranca"], "title_sim": [0.19212982827383562], "body_sim": [0.6207132050526776], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.475, 0.475], "pattern": 0, "time": 0}, {"A_title": "Detect in-place changes on mutable AR attributes", "A_clean_title": ["detect", "place", "chang", "mutabl", "ar", "attribut"], "B_title": "replacing dirty's changed_attributes with original_values", "B_clean_title": ["replac", "dirti", "'s", "chang", "attribut", "origin", "valu"], "A_body": "We have several mutable types on Active Record now. (Serialized, JSON,\nHStore). We need to be able to detect if these have been modified in\nplace.\n\nSerialized attributes now \"just work\" and no longer need to be saved 100% of the time.\n\nFixes #8328\n", "A_clean_body": ["we", "have", "sever", "mutabl", "type", "activ", "record", "now", "serial", "json", "hstore", "store", "we", "need", "abl", "detect", "these", "have", "been", "modifi", "place", "serial", "attribut", "now", "just", "work", "no", "longer", "need", "save", "100", "time", "fix", "8328"], "B_body": "I was curious what the code would look like without all the tracking of `@changed_attributes`, but instead just storing the `@original_values` for active model/record attributes.\n\nIt only stores the original_values upon `attribute_read` / `attribute_write`.\n\nI got it close. The last commit (that removes `@changed_attribtues`) breaks the test that detects when a numeric field is changing from `0` to 'foo', along with one of the date tests.\n\nrequesting comments\n", "B_clean_body": ["wa", "curiou", "what", "code", "would", "look", "like", "without", "all", "track", "chang", "attribut", "but", "instead", "just", "store", "origin", "valu", "activ", "model", "record", "attribut", "it", "onli", "store", "origin", "valu", "upon", "attribut", "read", "attribut", "write", "got", "it", "close", "last", "commit", "that", "remov", "chang", "attribtu", "break", "test", "that", "detect", "when", "numer", "field", "chang", "'foo", "along", "one", "date", "test", "request", "comment"], "title_sim": [0.34332154117615615], "body_sim": [0.3040025607534832], "file_list_sim": 0.14285714285714285, "overlap_files_len": 3, "code_sim": [0.33758406648105843, 0.2123287571024737], "location_sim": [0.23809523809523808, 0.5841121495327103], "pattern": 0, "time": 157}, {"A_title": "Use base model class when app is generated", "A_clean_title": ["use", "base", "model", "class", "when", "app", "gener"], "B_title": "Creating application model template", "B_clean_title": ["creat", "applic", "model", "templat"], "A_body": "I think there is a need to have a base model class just like `ApplicationController` for controllers\nto store code that is shared across all models.\n\nI end up doing it for every project I work on.\n\nSo, this patch adds `Model` to generated app uses it as base class when new model is generated.\n", "A_clean_body": ["think", "there", "need", "have", "base", "model", "class", "just", "like", "applicationcontrol", "applic", "control", "control", "store", "code", "that", "share", "across", "all", "model", "end", "up", "do", "it", "everi", "project", "work", "so", "thi", "patch", "add", "model", "gener", "app", "use", "it", "as", "base", "class", "when", "new", "model", "gener"], "B_body": "This PR creates the `ApplicationModel` class. This class will serve as an intermediate between a model and `ActiveRecord::Base`. Currently, to create a model, one follows the following procedure:\n\n``` ruby\nclass MyModelName < ActiveRecord::Base\nend\n```\n\nThis inherits directly from `ActiveRecord::Base` and means that all configurations on `ActiveRecord::Base` are global to all of its subclasses (unless the subclass redefines the configuration on its own).\n\nI'm introducing `ApplicationModel` so that models have an intermediary layer for inheritance like so:\n\n``` ruby\nclass MyModelName < ApplicationModel\nend\n```\n\nWhat the `ApplicationModel` class does is allow different sets of configurations to be defined on multiple applications. Each Rails application will have its own `ApplicationModel`. The `ApplicationModel` figures out which application it belongs when it is pulled in through the railtie and `configs_from` is specified.\n\n\\cc @spastorino, @josevalim Can you guys take a look? I'm sure there's something I forgot so please let me know.\n", "B_clean_body": ["thi", "pr", "creat", "applicationmodel", "applic", "model", "class", "thi", "class", "will", "serv", "as", "intermedi", "between", "model", "activerecord", "activ", "record", ":base", "current", "creat", "model", "one", "follow", "follow", "procedur", "rubi", "class", "mymodelnam", "my", "model", "name", "activerecord", "activ", "record", ":base", "end", "thi", "inherit", "directli", "activerecord", "activ", "record", ":base", "mean", "that", "all", "configur", "activerecord", "activ", "record", ":base", "are", "global", "all", "it", "subclass", "unless", "subclass", "redefin", "configur", "it", "own", "'m", "introduc", "applicationmodel", "applic", "model", "so", "that", "model", "have", "intermediari", "layer", "inherit", "like", "so", "rubi", "class", "mymodelnam", "my", "model", "name", "applicationmodel", "applic", "model", "end", "what", "applicationmodel", "applic", "model", "class", "allow", "differ", "set", "configur", "defin", "multipl", "applic", "each", "rail", "applic", "will", "have", "it", "own", "applicationmodel", "applic", "model", "applicationmodel", "applic", "model", "figur", "out", "which", "applic", "it", "belong", "when", "it", "pull", "through", "railti", "config", "specifi", "cc", "spastorino", "josevalim", "you", "guy", "take", "look", "'m", "sure", "there", "'s", "someth", "forgot", "so", "pleas", "let", "me", "know"], "title_sim": [0.21291760927174935], "body_sim": [0.5631329527940118], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 534}, {"A_title": "ignore other warnings in test assertion. Ruby 2.0", "A_clean_title": ["ignor", "other", "warn", "test", "assert", "rubi"], "B_title": "fix testcase: ruby-2.0.0 warned unused variables", "B_clean_title": ["fix", "testcas", "rubi", "warn", "unus", "variabl"], "A_body": "Using Ruby 2.0 we get a failing test in actionpack:\n\n```\n  1) Failure:\ntest_locals_option_to_assert_template_is_not_supported(RenderTest) [/Users/senny/Projects/rails/actionpack/test/controller/render_test.rb:1441]:\n--- expected\n+++ actual\n@@ -1,2 +1,3 @@\n-\"the :locals option to #assert_template is only supported in a ActionView::TestCase\n+\"/Users/senny/Projects/rails/actionpack/test/fixtures/test/_customer_greeting.erb:1: warning: assigned but unused variable - customer_greeting_counter\n+the :locals option to #assert_template is only supported in a ActionView::TestCase\n \"\n```\n\nThis is because there are tons of warnings emitted and the test makes a hard match against the warning buffer.\n\nI'm sure we will get rid of the warnings with Ruby 2.0 but there is no reason this test should fail.\n", "A_clean_body": ["rubi", "we", "get", "fail", "test", "actionpack", "failur", "test", "local", "option", "assert", "templat", "not", "support", "rendertest", "render", "test", "rb:1441", "test", "user", "senni", "project", "rail", "actionpack", "test", "control", "render", "expect", "actual", "1,2", "+1,3", "local", "option", "assert", "templat", "onli", "support", "actionview", "action", "view", ":testcas", ":test", "case", "erb:1", "custom", "greet", "user", "senni", "project", "rail", "actionpack", "test", "fixtur", "test", "warn", "assign", "but", "unus", "variabl", "custom", "greet", "counter", "+the", "local", "option", "assert", "templat", "onli", "support", "actionview", "action", "view", ":testcas", ":test", "case", "thi", "becaus", "there", "are", "ton", "warn", "emit", "test", "make", "hard", "match", "against", "warn", "buffer", "'m", "sure", "we", "will", "get", "rid", "warn", "rubi", "but", "there", "no", "reason", "thi", "test", "fail"], "B_body": "ruby 2.0.0 (r38432) later warned unused variables. if you run `rake test`, some testcase is fail. because this testcase read $stderr with 2.0.0 warning messages.\n\nI think this testcase is enough for confirmation of  display warning messages.\n", "B_clean_body": ["rubi", "r38432", "later", "warn", "unus", "variabl", "you", "run", "rake", "test", "some", "testcas", "fail", "becaus", "thi", "testcas", "read", "stderr", "warn", "messag", "think", "thi", "testcas", "enough", "confirm", "display", "warn", "messag"], "title_sim": [0.3316995510933257], "body_sim": [0.4066991152302847], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": -1, "time": 10}, {"A_title": "Bump globalid version", "A_clean_title": ["bump", "globalid", "version"], "B_title": "globalid method name change from 'global_id' to 'to_global_id' breaks activejob", "B_clean_title": ["globalid", "method", "name", "chang", "'global", "id", "'to", "global", "id", "break", "activejob"], "A_body": "@jeremy : can you release version 0.3.0 of global_id ?\n", "A_clean_body": ["jeremi", "you", "releas", "version", "global", "id"], "B_body": "This is in reference to : \nhttps://github.com/rails/globalid/blob/master/lib/global_id/identification.rb#L7\n\nThis change should be merged in once whenever ActiveJob is updated to reference the latest globalid.\n", "B_clean_body": ["thi", "refer", "http", "rb", "github", "com", "rail", "globalid", "blob", "master", "lib", "global", "id", "identif", "l7", "thi", "chang", "merg", "onc", "whenev", "activejob", "activ", "job", "updat", "refer", "latest", "globalid"], "title_sim": [0.07073721838145111], "body_sim": [0.2357162403020947], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.7368421052631579, 1.0], "pattern": 0, "time": 0}, {"A_title": "Subclasses should inherit associations from parents", "A_clean_title": ["subclass", "inherit", "associ", "parent"], "B_title": "activerecord: Apply associations to base class' descendants", "B_clean_title": ["activerecord", "appli", "associ", "base", "class", "descend"], "A_body": "- Fixes #20678 (Subclass misses association defined on parent)\n\n---\n\nI can add a test to check on `SpecialUser._reflections['comments']`, but I wasn't sure if that was digging too deep into Active Record internals \ud83d\ude2c \n", "A_clean_body": ["fix", "20678", "subclass", "miss", "associ", "defin", "parent", "add", "test", "check", "specialus", "special", "user", "reflect", "'comment", "but", "wa", "n't", "sure", "that", "wa", "dig", "too", "deep", "into", "activ", "record", "intern"], "B_body": "currently, associations added later with freedom patching are not propagated into descendants.\n", "B_clean_body": ["current", "associ", "ad", "later", "freedom", "patch", "are", "not", "propag", "into", "descend"], "title_sim": [0.2881875503290537], "body_sim": [0.35102779522737326], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.0944595855629374, 0.6023104900913242], "location_sim": [0.25287356321839083, 1.0], "pattern": 0, "time": 199}, {"A_title": "Tests for case_sensitive in confirmation validation.", "A_clean_title": ["test", "case", "sensit", "confirm", "valid"], "B_title": "Add missing test for #17351", "B_clean_title": ["add", "miss", "test", "17351"], "A_body": "r? @carlosantoniodasilva \n", "A_clean_body": ["carlosantoniodasilva"], "B_body": "Adds missing test cases for #17351 \n", "B_clean_body": ["add", "miss", "test", "case", "17351"], "title_sim": [0.4125706085527511], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.8820839859303695, 0.8820839859303695], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": " Adding ability to override currency format REGEX in ActiveSupport number_to_currency helper ", "A_clean_title": ["ad", "abil", "overrid", "currenc", "format", "regex", "activesupport", "activ", "support", "number", "currenc", "helper"], "B_title": "Support for custom regular expression for number_to_delimeted", "B_clean_title": ["support", "custom", "regular", "express", "number", "delimet"], "A_body": "Currently `number_to_currency` has a hard coded REGEX to format currency string.\n\nThere are use cases where a different format mask is desired (for example in India, currency formatting is different).\n\nThis Pull request moves the hard coded REGEX into the options hash, so that it becomes possible to pass a different REGEX to override the default.\n", "A_clean_body": ["current", "number", "currenc", "ha", "hard", "code", "regex", "format", "currenc", "string", "there", "are", "use", "case", "where", "differ", "format", "mask", "desir", "exampl", "india", "currenc", "format", "differ", "thi", "pull", "request", "move", "hard", "code", "regex", "into", "option", "hash", "so", "that", "it", "becom", "possibl", "pass", "differ", "regex", "overrid", "default"], "B_body": "The format for placement of delimiter varies in currencies like INR, where instead of `123,345,455.00`, the number would  be `12,33,45,455.00`. This adds support to allow user to provide custom handling of how the placement of delimiter is derived.\n\nChanges :\n- Extracted `DELIMITED_REGEX` to `delimited_regex` method and made use of user passed `options[:delimited_regex]` if available. Changed `DELIMITED_REGEX` to `DEFAULT)DELIMITED_REGEX` to signify what it means.\n- Added tests for number to delimited and number to currency in both actionview and activesupport.\n", "B_clean_body": ["format", "placement", "delimit", "vari", "currenc", "like", "inr", "where", "instead", "123,345,455", "00", "number", "would", "12,33,45,455", "00", "thi", "add", "support", "allow", "user", "provid", "custom", "handl", "how", "placement", "delimit", "deriv", "chang", "extract", "delimit", "regex", "delimit", "regex", "method", "made", "use", "user", "pass", "option", "delimit", "regex", "avail", "chang", "delimit", "regex", "default", "delimit", "regex", "signifi", "what", "it", "mean", "ad", "test", "number", "delimit", "number", "currenc", "both", "actionview", "activesupport"], "title_sim": [0.1302751710758271], "body_sim": [0.6996604823982917], "file_list_sim": 0.2222222222222222, "overlap_files_len": 2, "code_sim": [0.5550044594812423, 0.571680580142093], "location_sim": [0.42592592592592593, 1.0], "pattern": 0, "time": 296}, {"A_title": "Postgresql auto reconnect", "A_clean_title": ["postgresql", "auto", "reconnect"], "B_title": "Properly discover a connection is closed in postgresql_adapter", "B_clean_title": ["properli", "discov", "connect", "close", "postgresql", "adapt"], "A_body": "After a Rails process has opened a connection to a PostgreSQL server, if the PostgreSQL server is subsequently restarted, or the connection has been otherwise severed, the connection would fail with an exception the next time a query was attempted using that connection.\n\nWith these changes, the connection will automatically be repaired on the next query, assuming it is safe to do so (e.g. we were not in the middle of a transaction).\n\nSome of the commits on this branch are also to fix test failures or intermittent test failures/fragilities that are unrelated or only tangentially related to the auto-reconnect changes (2 failures on TC before I started, tests that fail only when run in certain combinations, etc.)\n", "A_clean_body": ["after", "rail", "process", "ha", "open", "connect", "postgresql", "postgr", "sql", "server", "postgresql", "postgr", "sql", "server", "subsequ", "restart", "or", "connect", "ha", "been", "otherwis", "sever", "connect", "would", "fail", "except", "next", "time", "queri", "wa", "attempt", "that", "connect", "these", "chang", "connect", "will", "automat", "repair", "next", "queri", "assum", "it", "safe", "so", "we", "were", "not", "middl", "transact", "some", "commit", "thi", "branch", "are", "also", "fix", "test", "failur", "or", "intermitt", "test", "failur", "fragil", "that", "are", "unrel", "or", "onli", "tangenti", "relat", "auto", "reconnect", "chang", "failur", "tc", "befor", "start", "test", "that", "fail", "onli", "when", "run", "certain", "combin", "etc"], "B_body": "PQstatus doesn't properly test if future operations will succeed. A\nPQping function is added to libpq in PostgreSQL 9.1, but if we rely\non it, everyone on earlier versions of Postgres is out of luck,\nand the pg gem wouldn't have the 'fix' until the next release.\n\nThanks to @cbrecabarren and @ged for handling all the dirty details.\n\nCloses #3392.\n\n/cc @tenderlove @jonleighton\n", "B_clean_body": ["pqstatu", "qstatu", "n't", "properli", "test", "futur", "oper", "will", "succeed", "pqping", "qping", "function", "ad", "libpq", "postgresql", "postgr", "sql", "but", "we", "reli", "it", "everyon", "earlier", "version", "postgr", "out", "luck", "pg", "gem", "would", "n't", "have", "'fix", "until", "next", "releas", "thank", "cbrecabarren", "ged", "handl", "all", "dirti", "detail", "close", "3392", "cc", "tenderlov", "jonleighton"], "title_sim": [0.3964567920586864], "body_sim": [0.3720107587555154], "file_list_sim": 0.14285714285714285, "overlap_files_len": 1, "code_sim": [0.02888109468890819, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 6}, {"A_title": "Match table names exactly on MySQL", "A_clean_title": ["match", "tabl", "name", "exactli", "mysql", "my", "sql"], "B_title": "Table exists fix", "B_clean_title": ["tabl", "exist", "fix"], "A_body": "The `SHOW TABLES LIKE` command accepts metacharacters `%` and `_` in potentially unexpected ways. This can be avoided by querying `information_schema.tables` directly.\n\nFixes #17897\n", "A_clean_body": ["show", "tabl", "like", "command", "accept", "metacharact", "potenti", "unexpect", "way", "thi", "avoid", "by", "queri", "tabl", "inform", "schema", "directli", "fix", "17897"], "B_body": "Added escape for underscore in SQL query LIKE clause used by ActiveRecord::Base.connection.table_exists?() when MySQL is used.\n\nFixes #17897\n", "B_clean_body": ["ad", "escap", "underscor", "sql", "queri", "like", "claus", "use", "by", "activerecord", "activ", "record", ":base", "connect", "tabl", "exist", "when", "mysql", "my", "sql", "use", "fix", "17897"], "title_sim": [0.24691641582818225], "body_sim": [0.26309500888645393], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.21611505292907043, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 6}, {"A_title": "Don't return a float for ActiveSupport's years", "A_clean_title": ["n't", "return", "float", "activesupport", "activ", "support", "'s", "year"], "B_title": "Change Integer#year to return a Fixnum instead of a Float to improve consistency", "B_clean_title": ["chang", "integ", "year", "return", "fixnum", "instead", "float", "improv", "consist"], "A_body": "Based on a suggestion in issue https://github.com/rails/rails/issues/19320\n\nActiveSupport's Integer patching for dates return an integer representation in almost every case, except for years. This change makes that consistent by returning an integer representation for years as well.\n", "A_clean_body": ["base", "suggest", "issu", "http", "github", "com", "rail", "rail", "issu", "19320", "activesupport", "activ", "support", "'s", "integ", "patch", "date", "return", "integ", "represent", "almost", "everi", "case", "except", "year", "thi", "chang", "make", "that", "consist", "by", "return", "integ", "represent", "year", "as", "well"], "B_body": "`Integer#years` returns a Float while the rest of the accompanying methods return a `Fixnum`.\n\nThis PR converts the constant `365.25.days` to an integer to ensure that `Integer#years` returns a `Fixnum` as well and improve the consistency of the API.\n\nCloses #19320.\n", "B_clean_body": ["integ", "year", "return", "float", "while", "rest", "accompani", "method", "return", "fixnum", "thi", "pr", "convert", "constant", "365", "25", "day", "integ", "ensur", "that", "integ", "year", "return", "fixnum", "as", "well", "improv", "consist", "api", "close", "19320"], "title_sim": [0.42177231174993424], "body_sim": [0.5189711300516503], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.30434782608695654, 1.0], "pattern": 1, "time": 153}, {"A_title": "Maximum wait_timeout on Windows is 2147483", "A_clean_title": ["maximum", "wait", "timeout", "window", "2147483"], "B_title": "Change mysql2 wait_timeout default value to avoid exceeding the max value allowed by MySQL", "B_clean_title": ["chang", "mysql2", "wait", "timeout", "default", "valu", "avoid", "exceed", "max", "valu", "allow", "by", "mysql", "my", "sql"], "A_body": "As documented on MySQL's site [1] this is the maximum value for Windows. We should use the least common denominator. Also done in the old branch (0.2.x) of mysql2 gem [2] and [3].\n\n[1] http://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html#sysvar_wait_timeout\n[2] https://github.com/brianmario/mysql2/blob/0.2.x/lib/active_record/connection_adapters/mysql2_adapter.rb#L577\n[3] https://github.com/brianmario/mysql2/commit/4f4909f4d654ac01c93b55a109cc12a6047c6726\n", "A_clean_body": ["as", "document", "mysql", "my", "sql", "'s", "site", "thi", "maximum", "valu", "window", "we", "use", "least", "common", "denomin", "also", "done", "old", "branch", "mysql2", "gem", "http", "system", "mysql", "variabl", "html", "dev", "com", "doc", "refman", "en", "server", "sysvar", "wait", "timeout", "http", "rb", "github", "com", "brianmario", "mysql2", "blob", "adapt", "lib", "activ", "record", "connect", "adapt", "mysql2", "l577", "http", "github", "com", "brianmario", "mysql2", "commit", "4f4909f4d654ac01c93b55a109cc12a6047c6726"], "B_body": "I had some trouble with the mysql2 gem and my remote database : it kept losing the connection (`Mysql2::Error: MySQL server has gone away`). I discovered that the default time_out value set by activerecord for mysql2 [2592000](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb#LC277) exceed the max value allowed by MySQL : [2147483](http://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html#sysvar_wait_timeout). Perhaps it should cap it to this max value...\n\nIt's my very first pull request so be indulgent if I don't respect some basic rules I may not know...\n\nEverything is explained here :\nhttp://stackoverflow.com/questions/8610426/rails-3-1-mysql2-error-mysql-server-has-gone-away/8617733#8617733\nhttps://github.com/brianmario/mysql2/issues/213\n\nJulien\n", "B_clean_body": ["had", "some", "troubl", "mysql2", "gem", "my", "remot", "databas", "it", "kept", "lose", "connect", "mysql2", ":error", "mysql", "my", "sql", "server", "ha", "gone", "away", "discov", "that", "default", "time", "out", "valu", "set", "by", "activerecord", "mysql2", "2592000", "http", "rb", "github", "adapt", "com", "rail", "rail", "blob", "master", "activerecord", "lib", "activ", "record", "connect", "adapt", "mysql2", "lc277", "exceed", "max", "valu", "allow", "by", "mysql", "my", "sql", "2147483", "http", "system", "mysql", "variabl", "html", "dev", "com", "doc", "refman", "en", "server", "sysvar", "wait", "timeout", "perhap", "it", "cap", "it", "thi", "max", "valu", "it", "'s", "my", "veri", "first", "pull", "request", "so", "indulg", "n't", "respect", "some", "basic", "rule", "may", "not", "know", "everyth", "explain", "here", "http", "mysql2", "error", "mysql", "server", "ha", "gone", "away", "8617733", "stackoverflow", "com", "question", "8610426", "rail", "8617733", "http", "github", "com", "brianmario", "mysql2", "issu", "213", "julien"], "title_sim": [0.11184387654875792], "body_sim": [0.8442096296835719], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 69}, {"A_title": "`cache_key` respects the limit in a relation even if a relation is not loaded", "A_clean_title": ["cach", "key", "respect", "limit", "relat", "even", "relat", "not", "load"], "B_title": "Properly calculate cache key for queries with offset", "B_clean_title": ["properli", "calcul", "cach", "key", "queri", "offset"], "A_body": "`cache_key` includes the size of a relation. But if a relation is not\r\nloadded, the size is not respected even if a relation has a limit. It\r\nshould be respected for consistency.", "A_clean_body": ["cach", "key", "includ", "size", "relat", "but", "relat", "not", "load", "size", "not", "respect", "even", "relat", "ha", "limit", "it", "respect", "consist"], "B_body": "### Summary\n\nFixes #25454\n\nSo far the queries with offset would always result in cache key without\ntimestamp (because the offset was applied to aggregation which basically\ndoes not work with aggregations - it always returns empty).\n\nThis commit fixes that, so the queries with offset have timestamp if\ntimestamp column is available.\n", "B_clean_body": ["summari", "fix", "25454", "so", "far", "queri", "offset", "would", "alway", "result", "cach", "key", "without", "timestamp", "becaus", "offset", "wa", "appli", "aggreg", "which", "basic", "not", "work", "aggreg", "it", "alway", "return", "empti", "thi", "commit", "fix", "that", "so", "queri", "offset", "have", "timestamp", "timestamp", "column", "avail"], "title_sim": [0.3276248470221546], "body_sim": [0.10189249489027224], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.24122701028686777, 0.24122701028686777], "location_sim": [0.44871794871794873, 0.44871794871794873], "pattern": 0, "time": 297}, {"A_title": "Fix type cast on group sum with custom expression", "A_clean_title": ["fix", "type", "cast", "group", "sum", "custom", "express"], "B_title": "fix Mysql sum return integer instead of float", "B_clean_title": ["fix", "mysql", "sum", "return", "integ", "instead", "float"], "A_body": "For PG adapters with custom expression and grouped result\nof aggregate functions have not found correct column type\nfor it. Extract column type from query result.\n\nCloses #13230\n", "A_clean_body": ["pg", "adapt", "custom", "express", "group", "result", "aggreg", "function", "have", "not", "found", "correct", "column", "type", "it", "extract", "column", "type", "queri", "result", "close", "13230"], "B_body": "This PR fix a wrong conversion to integer in sum\ncalculation when the table name is included in\nthe fied of sum.\n\nIt fixes two main bugs:\n- the wrong stripped column_name from an expression like\n  `table_name.column_name * 2.1`  in `column_name_from_field`\n- No `type_cast_using_column`of value in `sum` because\n  it could have an expression like  `table_name.column_name * 2.1`\n  where `column_name` type is integer but the result is no integer\n  \n  Before:\n  \n  ```\n  Account.sum(\"2.1 * accounts.credit_limit\") => 667\n  ```\n  \n  After:\n  \n  ```\n  Account.sum(\"2.1 * accounts.credit_limit\") => 667.8\n  ```\n\nFixes #12937\n", "B_clean_body": ["thi", "pr", "fix", "wrong", "convers", "integ", "sum", "calcul", "when", "tabl", "name", "includ", "fie", "sum", "it", "fix", "two", "main", "bug", "wrong", "strip", "column", "name", "express", "like", "tabl", "name", "column", "name", "column", "name", "field", "no", "type", "cast", "column", "valu", "sum", "becaus", "it", "could", "have", "express", "like", "tabl", "name", "column", "name", "where", "column", "name", "type", "integ", "but", "result", "no", "integ", "befor", "account", "sum", "account", "credit", "limit", "667", "after", "account", "sum", "account", "credit", "limit", "667", "fix", "12937"], "title_sim": [0.1338260005470776], "body_sim": [0.3935139308607702], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.5064914721295791, 0.5064914721295791], "location_sim": [0.3972602739726027, 0.3972602739726027], "pattern": -1, "time": 3}, {"A_title": "Refactored method `ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements#default_sequence_name`. Refactored test `HasManyAssociationsTest#test_do_not_call_callbacks_for_delete_all`.", "A_clean_title": ["refactor", "method", "activerecord", "activ", "record", ":connectionadapt", ":connect", "adapt", ":postgresql", ":postgr", "sql", ":schemastat", ":schema", "statement", "default", "sequenc", "name", "refactor", "test", "hasmanyassociationstest", "ha", "mani", "associ", "test", "test", "not", "call", "callback", "delet", "all"], "B_title": "Fixing the active record has many association test which is failing w\u2026", "B_clean_title": ["fix", "activ", "record", "ha", "mani", "associ", "test", "which", "fail", "w\u2026"], "A_body": "Refactored method `ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements#default_sequence_name`\nFixed confusing behavior:\n\n``` ruby\n@connection.default_sequence_name('accounts', false)\n```\n\n``` ruby\n@connection.default_sequence_name('accounts', nil)\n```\n## \n\nRefactored test `HasManyAssociationsTest#test_do_not_call_callbacks_for_delete_all`\n", "A_clean_body": ["refactor", "method", "activerecord", "activ", "record", ":connectionadapt", ":connect", "adapt", ":postgresql", ":postgr", "sql", ":schemastat", ":schema", "statement", "default", "sequenc", "name", "fix", "confus", "behavior", "rubi", "connect", "default", "sequenc", "name", "'account", "fals", "rubi", "connect", "default", "sequenc", "name", "'account", "nil", "refactor", "test", "hasmanyassociationstest", "ha", "mani", "associ", "test", "test", "not", "call", "callback", "delet", "all"], "B_body": "### Summary\n\nTest failed when run bundle exec rake test:sqlite3. So I thought just fix it.\n\nPlease let me know more information  on this\n### Other Information\n\nbut working fine when i ran single file\n", "B_clean_body": ["summari", "test", "fail", "when", "run", "bundl", "exec", "rake", "test", "sqlite3", "so", "thought", "just", "fix", "it", "pleas", "let", "me", "know", "more", "inform", "thi", "other", "inform", "but", "work", "fine", "when", "ran", "singl", "file"], "title_sim": [0.5173730556617161], "body_sim": [0.1667968451871038], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.9870997113125302, 0.9870997113125302], "location_sim": [0.5714285714285714, 1.0], "pattern": 0, "time": 33}, {"A_title": "Fixed error with 'rails generate new plugin' where the .gitignore was not", "A_clean_title": ["fix", "error", "'rail", "gener", "new", "plugin", "where", "gitignor", "wa", "not"], "B_title": "When running plugin new the generated .gitignore should include non-project files in test dummy", "B_clean_title": ["when", "run", "plugin", "new", "gener", "gitignor", "includ", "non", "project", "file", "test", "dummi"], "A_body": "Fixed error with 'rails generate new plugin' where the .gitignore was not properly generated if --dummy-path was used and added test case\n\nThis is in regards to Issue #3550\n", "A_clean_body": ["fix", "error", "'rail", "gener", "new", "plugin", "where", "gitignor", "wa", "not", "properli", "gener", "dummi", "path", "wa", "use", "ad", "test", "case", "thi", "regard", "issu", "3550"], "B_body": "The current behavior is that the ignored non-project files are hardcoded to test/dummy in the generated .gitignore. The patch makes .gitignore a template and ensures that the test dummy directory corresponds to the supplied path if the --dummy-path option is supplied (or not).\n\nI included a sanity check test that passes for the current behavior and one for the new behavior.\n\nMike\n\nP.s. First time committing, hope things look OK. Thanks!\n", "B_clean_body": ["current", "behavior", "that", "ignor", "non", "project", "file", "are", "hardcod", "test", "dummi", "gener", "gitignor", "patch", "make", "gitignor", "templat", "ensur", "that", "test", "dummi", "directori", "correspond", "suppli", "path", "dummi", "path", "option", "suppli", "or", "not", "includ", "saniti", "check", "test", "that", "pass", "current", "behavior", "one", "new", "behavior", "mike", "first", "time", "commit", "hope", "thing", "look", "ok", "thank"], "title_sim": [0.5945166886246437], "body_sim": [0.35024235771707135], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.7972065208261719, 0.7972065208261719], "location_sim": [1.0, 1.0], "pattern": 0, "time": 52}, {"A_title": "DRY up STI subclass logic", "A_clean_title": ["dri", "up", "sti", "subclass", "logic"], "B_title": "Sti class name", "B_clean_title": ["sti", "class", "name"], "A_body": "the newer method used for discriminating new records did not\nuse the older and more robust method used for instantiating\nexisting records, but did have a better post-check to ensure\nthe sublass was in the hierarchy. so move the descendants check\nto find_sti_class, and then simply call find_sti_class from\nsubclass_from_attributes\n\nnow with fixed specs\n", "A_clean_body": ["newer", "method", "use", "discrimin", "new", "record", "did", "not", "use", "older", "more", "robust", "method", "use", "instanti", "exist", "record", "but", "did", "have", "better", "post", "check", "ensur", "sublass", "wa", "hierarchi", "so", "move", "descend", "check", "find", "sti", "class", "then", "simpli", "call", "find", "sti", "class", "subclass", "attribut", "now", "fix", "spec"], "B_body": "I outlined what I'm trying to accomplish with this pull request here: https://groups.google.com/forum/#!topic/rubyonrails-core/QVjt2cs7NL4\n\nA brief summary of the link above:\n- I had a class 'Code' and a database table 'codes'.\n- 'Code' had an attribute 'units', which could be either '$' or '%'\n- I wanted the STI classes to be Code::Dollar or Code::Percent\n- I was able to get this by redefining find_sti_class and sti_name, but it didn't work with build or new on the parent class\n\nThese changes will attempt to get a class for inheritance from find_sti_class, and if that doesn't work, will fall through to the old way of doing things.\n\nThis allows you to match whatever string is in your inheritance column in your database with whatever class you want by redefining `find_sti_class` and `sti_name`.\n", "B_clean_body": ["outlin", "what", "'m", "tri", "accomplish", "thi", "pull", "request", "here", "http", "googl", "group", "com", "forum", "topic", "rubyonrail", "core", "qvjt2cs7nl4", "vjt2cs7nl4", "brief", "summari", "link", "abov", "had", "class", "'code", "databas", "tabl", "'code", "'code", "had", "attribut", "'unit", "which", "could", "either", "or", "want", "sti", "class", "code", ":dollar", "or", "code", ":percent", "wa", "abl", "get", "thi", "by", "redefin", "find", "sti", "class", "sti", "name", "but", "it", "did", "n't", "work", "build", "or", "new", "parent", "class", "these", "chang", "will", "attempt", "get", "class", "inherit", "find", "sti", "class", "that", "n't", "work", "will", "fall", "through", "old", "way", "do", "thing", "thi", "allow", "you", "match", "whatev", "string", "your", "inherit", "column", "your", "databas", "whatev", "class", "you", "want", "by", "redefin", "find", "sti", "class", "sti", "name"], "title_sim": [0.7168661639750366], "body_sim": [0.6672357764249526], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.16147424375436817, 0.6749959284741983], "location_sim": [0.0, 0.0], "pattern": 0, "time": 255}, {"A_title": " `travel/travel_to` travel time helpers, now raise on nested calls", "A_clean_title": ["travel", "travel", "travel", "time", "helper", "now", "rais", "nest", "call"], "B_title": "Add support for using nested travel method", "B_clean_title": ["add", "support", "nest", "travel", "method"], "A_body": "r? @rafaelfranca \n", "A_clean_body": ["rafaelfranca"], "B_body": "One of my friend saw that while working on an issue about rubygems, it would be great if we can use nested `travel` methods and asked me to implement this.\nBy this way we can use nested `travel` methods in our tests. For example;\n\n``` ruby\ntravel 1.day do\n  Foo.do_something #This method depends on Time.now and it has mock value lets say A\n\n  travel 1.day do\n    Bar.do_another_thing #This method depends on Time.now and it has mock value lets say B\n  end\n\n  Zoo.do_yet_another_thing #This method depends on Time.now and it has mock value as A\nend\n```\n\nIn current implementation we can't use nested `travel` methods because when the execution of deepest `travel` method finishes `Time.now` returns back to original `Time.now`.\nLets see this in an example like above;\n\n``` ruby\ntravel 1.day do\n  Foo.do_something #This method depends on Time.now and it has mock value lets say A\n\n  travel 1.day do\n    Bar.do_another_thing #This method depends on Time.now and it has mock value lets say B\n  end\n\n  Zoo.do_yet_another_thing #This method depends on Time.now and it returns the original Time.now\nend\n```\n\nAs you can see we've expected that `Time.now` will return `A` but it returns original `Time.now`.\n", "B_clean_body": ["one", "my", "friend", "saw", "that", "while", "work", "issu", "about", "rubygem", "it", "would", "great", "we", "use", "nest", "travel", "method", "ask", "me", "implement", "thi", "by", "thi", "way", "we", "use", "nest", "travel", "method", "our", "test", "exampl", "rubi", "travel", "day", "foo", "someth", "thi", "method", "depend", "time", "now", "it", "ha", "mock", "valu", "let", "say", "travel", "day", "bar", "anoth", "thing", "thi", "method", "depend", "time", "now", "it", "ha", "mock", "valu", "let", "say", "end", "zoo", "yet", "anoth", "thing", "thi", "method", "depend", "time", "now", "it", "ha", "mock", "valu", "as", "end", "current", "implement", "we", "ca", "n't", "use", "nest", "travel", "method", "becaus", "when", "execut", "deepest", "travel", "method", "finish", "time", "now", "return", "back", "origin", "time", "now", "let", "see", "thi", "exampl", "like", "abov", "rubi", "travel", "day", "foo", "someth", "thi", "method", "depend", "time", "now", "it", "ha", "mock", "valu", "let", "say", "travel", "day", "bar", "anoth", "thing", "thi", "method", "depend", "time", "now", "it", "ha", "mock", "valu", "let", "say", "end", "zoo", "yet", "anoth", "thing", "thi", "method", "depend", "time", "now", "it", "return", "origin", "time", "now", "end", "as", "you", "see", "we", "'ve", "expect", "that", "time", "now", "will", "return", "but", "it", "return", "origin", "time", "now"], "title_sim": [0.3883194685559884], "body_sim": [0.07402115697787594], "file_list_sim": 0.75, "overlap_files_len": 3, "code_sim": [0.682588738723463, 0.6825778264909224], "location_sim": [0.8741496598639455, 0.9113475177304965], "pattern": 0, "time": 185}, {"A_title": "wrapping i18n missing keys made optional", "A_clean_title": ["wrap", "i18n", "miss", "key", "made", "option"], "B_title": "Return a plaintext missing translation message for non-html keys", "B_clean_title": ["return", "plaintext", "miss", "translat", "messag", "non", "html", "key"], "A_body": "`I18n.translate` helper will wrap the missing translation keys\nin a <span> tag only if `wrap_missing_key` configuration.\nDefault value is `true`. For example in `application.rb`:\n\n``` ruby\n    # in order to turn off missing key wrapping\n    config.i18n.wrap_missing_key = false\n```\n", "A_clean_body": ["i18n", "translat", "helper", "will", "wrap", "miss", "translat", "key", "span", "tag", "onli", "wrap", "miss", "key", "configur", "default", "valu", "true", "exampl", "applic", "rb", "rubi", "order", "turn", "off", "miss", "key", "wrap", "config", "i18n", "wrap", "miss", "key", "fals"], "B_body": "`ActionView::Helpers::TranslationHelper#translate` returns an html error message regardless of whether the key ends with `_html` which completely breaks the convention for translations containing html and results invalid output.\n\nSeen as there's no way to configure this message globally without monkey-patching the helper, I think the default behaviour should be a little smarter.\n", "B_clean_body": ["actionview", "action", "view", ":helper", ":translationhelp", ":translat", "helper", "translat", "return", "html", "error", "messag", "regardless", "whether", "key", "end", "html", "which", "complet", "break", "convent", "translat", "contain", "html", "result", "invalid", "output", "seen", "as", "there", "'s", "no", "way", "configur", "thi", "messag", "global", "without", "monkey", "patch", "helper", "think", "default", "behaviour", "littl", "smarter"], "title_sim": [0.4031980634283956], "body_sim": [0.38748024383876156], "file_list_sim": 0.6, "overlap_files_len": 3, "code_sim": [0.5466643493348046, 0.5478325927684289], "location_sim": [0.7320261437908496, 0.8115942028985508], "pattern": 0, "time": 151}, {"A_title": "do not compute table names for abstract classes", "A_clean_title": ["not", "comput", "tabl", "name", "abstract", "class"], "B_title": "Fix inherited table_name from abstract class", "B_clean_title": ["fix", "inherit", "tabl", "name", "abstract", "class"], "A_body": "I found a trivial inconsistency on AR table_name computing behavior.\n\nWhile there are an abstract_class model and its child:\n\n``` ruby\nclass User < ActiveRecord::Base\n  self.abstract_class = true\nend\n\nclass Admin < User\nend\n```\n\nThe child's table_name changes depending on whether the abstract model's table_name were called or not.\n\n``` ruby\nUser.table_name\n=> \"users\"\nUser.scoped.to_sql\n=> SELECT \"users\".* FROM \"users\"\nAdmin.table_name\n=> \"users\"\nAdmin.scoped.to_sql\n=> SELECT \"users\".* FROM \"users\"\n\nAdmin.table_name\n=> \"admins\"\nAdmin.scoped.to_sql\n=> SELECT \"admins\".* FROM \"admins\"\n```\n\nThis doesn't matter for normal use, but sometimes causes weird errors, for example, when dealing with an AR extension plugin that scans through descendants of AR::Base on Railtie hook.\n\nHere's a patch that makes abstract models always skip compute_table_name.\n", "A_clean_body": ["found", "trivial", "inconsist", "ar", "tabl", "name", "comput", "behavior", "while", "there", "are", "abstract", "class", "model", "it", "child", "rubi", "class", "user", "activerecord", "activ", "record", ":base", "self", "abstract", "class", "true", "end", "class", "admin", "user", "end", "child", "'s", "tabl", "name", "chang", "depend", "whether", "abstract", "model", "'s", "tabl", "name", "were", "call", "or", "not", "rubi", "user", "tabl", "name", "user", "user", "scope", "sql", "select", "user", "user", "admin", "tabl", "name", "user", "admin", "scope", "sql", "select", "user", "user", "admin", "tabl", "name", "admin", "admin", "scope", "sql", "select", "admin", "admin", "thi", "n't", "matter", "normal", "use", "but", "sometim", "caus", "weird", "error", "exampl", "when", "deal", "ar", "extens", "plugin", "that", "scan", "through", "descend", "ar", ":base", "railti", "hook", "here", "'s", "patch", "that", "make", "abstract", "model", "alway", "skip", "comput", "tabl", "name"], "B_body": "Hi guys, I found this when I worked on my project. Let me explain situation.\nWhen \nclass Parent < ActiveRecord::Base\n  self.abstract_class = true\n  # in the end it call table_name method\n  default_scope where(...) # for example\nend\n\nclass Child < Parent\nend\nThen Child has an incorrect table_name method, because Parent is loaded first and already has overrided table_name method like this:\n\ndef table_name; \u201cparents\u201d; end;\n\nwhich inherits Child.\n", "B_clean_body": ["hi", "guy", "found", "thi", "when", "work", "my", "project", "let", "me", "explain", "situat", "when", "class", "parent", "activerecord", "activ", "record", ":base", "self", "abstract", "class", "true", "end", "it", "call", "tabl", "name", "method", "default", "scope", "where", "exampl", "end", "class", "child", "parent", "end", "then", "child", "ha", "incorrect", "tabl", "name", "method", "becaus", "parent", "load", "first", "alreadi", "ha", "overrid", "tabl", "name", "method", "like", "thi", "def", "tabl", "name", "parent", "end", "which", "inherit", "child"], "title_sim": [0.776961314693627], "body_sim": [0.5525206616044344], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.5192603966927605, 0.4585823486885503], "location_sim": [0.0, 0.0], "pattern": 0, "time": 90}, {"A_title": "Use `SchemaStatements#initialize_schema_migrations_table` instead of `ActiveRecord::SchemaMigration.create_table`.", "A_clean_title": ["use", "schemastat", "schema", "statement", "initi", "schema", "migrat", "tabl", "instead", "activerecord", "activ", "record", ":schemamigr", ":schema", "migrat", "creat", "tabl"], "B_title": "Fix AR::Migrator to create schema_migrations table for MySQL \"utf8mb4\" encoding", "B_clean_title": ["fix", "ar", ":migrat", "creat", "schema", "migrat", "tabl", "mysql", "my", "sql", "utf8mb4", "encod"], "A_body": "I think that should use `SchemaStatements#initialize_schema_migrations_table` instead of `ActiveRecord::SchemaMigration.create_table`.\n\nOtherwise, https://github.com/rails/rails/commit/8744632f is not called from `db:migrate`.\n", "A_clean_body": ["think", "that", "use", "schemastat", "schema", "statement", "initi", "schema", "migrat", "tabl", "instead", "activerecord", "activ", "record", ":schemamigr", ":schema", "migrat", "creat", "tabl", "otherwis", "http", "github", "com", "rail", "rail", "commit", "8744632f", "not", "call", "db", "migrat"], "B_body": "conditions:\n- Mysql2Adapter\n- encoding: \"utf8mb4\"\n\nsteps to reproduce:\n\n``` sh\nrake db:create\nrake db:migrate\n```\n\n>    Mysql2::Error: Specified key was too long; max key length is 767 bytes: CREATE UNIQUE INDEX `unique_schema_migrations`  ON `schema_migrations` (`version`)\n\nThis commit https://github.com/rails/rails/commit/8744632fb5649cf26cdcd1518a3554ece95a401b fixed `db:schema:load`, but didn't apply to `db:migrate`.\n\nrefs #9855\n", "B_clean_body": ["condit", "mysql2adapt", "encod", "utf8mb4", "step", "reproduc", "sh", "rake", "db", "creat", "rake", "db", "migrat", "mysql2", ":error", "specifi", "key", "wa", "too", "long", "max", "key", "length", "767", "byte", "creat", "uniqu", "index", "uniqu", "schema", "migrat", "schema", "migrat", "version", "thi", "commit", "http", "github", "com", "rail", "rail", "commit", "8744632fb5649cf26cdcd1518a3554ece95a401b", "fix", "db", "schema", "load", "but", "did", "n't", "appli", "db", "migrat", "ref", "9855"], "title_sim": [0.552150772201174], "body_sim": [0.637064547203547], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.1564133312449297, 0.3186118086173633], "location_sim": [0.2857142857142857, 1.0], "pattern": 1, "time": 64}, {"A_title": "On destroying do not touch destroyed belongs to association.", "A_clean_title": ["destroy", "not", "touch", "destroy", "belong", "associ"], "B_title": "Prevent unnecessary touch on belongs_to parent if marked for destruction", "B_clean_title": ["prevent", "unnecessari", "touch", "belong", "parent", "mark", "destruct"], "A_body": "Fixes: #13445\n", "A_clean_body": ["fix", "13445"], "B_body": "Currently destroying records with a belongs_to :touch => true will trigger a touch on the parent. If the parent is being destroyed then there is no need to do this.\n\nThis change also works around the problem of when the parent has optimistic locking, if being destroyed the children performing a touch on the parent will fail the parent destroy.\n\nI haven't included a test given if requires two more test models to work. Let me know if you would like a test with extra models.\n\nI also moved the tests for belongs_to :touch into the belongs_to test cases.\n", "B_clean_body": ["current", "destroy", "record", "belong", "touch", "true", "will", "trigger", "touch", "parent", "parent", "be", "destroy", "then", "there", "no", "need", "thi", "thi", "chang", "also", "work", "around", "problem", "when", "parent", "ha", "optimist", "lock", "be", "destroy", "children", "perform", "touch", "parent", "will", "fail", "parent", "destroy", "have", "n't", "includ", "test", "given", "requir", "two", "more", "test", "model", "work", "let", "me", "know", "you", "would", "like", "test", "extra", "model", "also", "move", "test", "belong", "touch", "into", "belong", "test", "case"], "title_sim": [0.5032174814359123], "body_sim": [0.042027942548432576], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.233974985660532, 0.06123404237386533], "location_sim": [0.632768361581921, 0.7225806451612903], "pattern": 0, "time": 343}, {"A_title": "Adding action_controller require", "A_clean_title": ["ad", "action", "control", "requir"], "B_title": "Fix undefined error for `ActionController::Parameters`", "B_clean_title": ["fix", "undefin", "error", "actioncontrol", "action", "control", ":paramet"], "A_body": "Since be543e8e18246d5c2faa336eb3c0a03b797f3517, rendering now uses\nStrongParameters to verify if render parameters are allowed. As a\nconsequence, if action_controller has not been loaded before (as in the\ncase of using actionmailer without railties), causes an Uninitialized\nconstant error for ActionController::Parameters:\n\n```\nNameError:\n  uninitialized constant AbstractController::Rendering::ActionController\n  # ruby/2.3.0/gems/actionpack-4.2.5.1/lib/abstract_controller/rendering.rb:81:in\n  # `_normalize_args'\n  # ruby/2.3.0/gems/actionview-4.2.5.1/lib/action_view/rendering.rb:114:in\n  # `_normalize_args'\n  # ruby/2.3.0/gems/actionpack-4.2.5.1/lib/abstract_controller/rendering.rb:113:in\n  # `_normalize_render'\n  # ruby/2.3.0/gems/actionpack-4.2.5.1/lib/abstract_controller/rendering.rb:24:in\n  # `render'\n```\n\nI couldn't get the standard bug report to function as it loads action_controller to start.\nMy very simple example is https://github.com/hugocorbucci/actionmailer_4.5.2.1_bug.\nThe real one that identified this problem was https://github.com/agile-alliance-brazil/certificates (build failure: https://snap-ci.com/agile-alliance-brazil/certificates/branch/master/logs/defaultPipeline/78/FastFeedback)\n", "A_clean_body": ["sinc", "be543e8e18246d5c2faa336eb3c0a03b797f3517", "render", "now", "use", "strongparamet", "strong", "paramet", "verifi", "render", "paramet", "are", "allow", "as", "consequ", "action", "control", "ha", "not", "been", "load", "befor", "as", "case", "actionmail", "without", "railti", "caus", "uniniti", "constant", "error", "actioncontrol", "action", "control", ":paramet", "nameerror", "name", "error", "uniniti", "constant", "abstractcontrol", "abstract", "control", ":render", ":actioncontrol", ":action", "control", "rb:81", "rubi", "gem", "actionpack", "lib", "abstract", "control", "render", "normal", "args'", "rb:114", "rubi", "gem", "actionview", "lib", "action", "view", "render", "normal", "args'", "rb:113", "rubi", "gem", "actionpack", "lib", "abstract", "control", "render", "normal", "render'", "rb:24", "rubi", "gem", "actionpack", "lib", "abstract", "control", "render", "render'", "could", "n't", "get", "standard", "bug", "report", "function", "as", "it", "load", "action", "control", "start", "my", "veri", "simpl", "exampl", "http", "github", "bug", "com", "hugocorbucci", "actionmail", "real", "one", "that", "identifi", "thi", "problem", "wa", "http", "allianc", "brazil", "certif", "github", "com", "agil", "build", "failur", "http", "allianc", "snap", "ci", "brazil", "certif", "branch", "master", "log", "defaultpipelin", "78", "fastfeedback", "com", "agil", "default", "pipelin", "fast", "feedback"], "B_body": "This was introduced as apart of the 9-CVE-push (aka 5.0.0.beta1.1).\n\nr? @tenderlove \n", "B_clean_body": ["thi", "wa", "introduc", "as", "apart", "cve", "push", "aka", "beta1", "tenderlov"], "title_sim": [0.4600875954090084], "body_sim": [0.06485655318225508], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 1}, {"A_title": "fix deprecation_caller_message to display right file:line", "A_clean_title": ["fix", "deprec", "caller", "messag", "display", "right", "file", "line"], "B_title": "Correct caller tracking in delegated deprecation methods", "B_clean_title": ["correct", "caller", "track", "deleg", "deprec", "method"], "A_body": "### Summary\r\n\r\n\r\nsince I've upgraded to rails 5, all deprecations are shown to be coming from inside the framework.\r\n\r\n\r\n### Other Information\r\n\r\nBefore: \r\n```\r\nDEPRECATION WARNING: alias_method_chain is deprecated. Please, use Module#prepend instead. From module, you can access the original method using super. (called from alias_method_chain at /home/mathieu/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.0.1/lib/active_support/core_ext/module/aliasing.rb:27)\r\nDEPRECATION WARNING: alias_method_chain is deprecated. Please, use Module#prepend instead. From module, you can access the original method using super. (called from alias_method_chain at /home/mathieu/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.0.1/lib/active_support/core_ext/module/aliasing.rb:27)\r\n```\r\n\r\nAfter\r\n```\r\nDEPRECATION WARNING: alias_method_chain is deprecated. Please, use Module#prepend instead. From module, you can access the original method using super. (called from <class:Ambiguous> at /home/mathieu/.rvm/gems/ruby-2.3.1/gems/cucumber_priority-0.1.2/lib/cucumber_priority/ambiguous_error_ext.rb:11)\r\nDEPRECATION WARNING: alias_method_chain is deprecated. Please, use Module#prepend instead. From module, you can access the original method using super. (called from <class:SupportCode> at /home/mathieu/.rvm/gems/ruby-2.3.1/gems/cucumber_priority-0.1.2/lib/cucumber_priority/support_code_ext.rb:29)\r\n\r\n```\r\n", "A_clean_body": ["summari", "sinc", "'ve", "upgrad", "rail", "all", "deprec", "are", "shown", "come", "insid", "framework", "other", "inform", "befor", "deprec", "warn", "alia", "method", "chain", "deprec", "pleas", "use", "modul", "prepend", "instead", "modul", "you", "access", "origin", "method", "super", "call", "alia", "method", "chain", "at", "rb:27", "home", "mathieu", "rvm", "gem", "rubi", "gem", "activesupport", "lib", "activ", "support", "core", "ext", "modul", "alias", "deprec", "warn", "alia", "method", "chain", "deprec", "pleas", "use", "modul", "prepend", "instead", "modul", "you", "access", "origin", "method", "super", "call", "alia", "method", "chain", "at", "rb:27", "home", "mathieu", "rvm", "gem", "rubi", "gem", "activesupport", "lib", "activ", "support", "core", "ext", "modul", "alias", "after", "deprec", "warn", "alia", "method", "chain", "deprec", "pleas", "use", "modul", "prepend", "instead", "modul", "you", "access", "origin", "method", "super", "call", "class", "ambigu", "at", "rb:11", "home", "mathieu", "rvm", "gem", "rubi", "prioriti", "error", "ext", "gem", "cucumb", "lib", "cucumb", "prioriti", "ambigu", "deprec", "warn", "alia", "method", "chain", "deprec", "pleas", "use", "modul", "prepend", "instead", "modul", "you", "access", "origin", "method", "super", "call", "class", "supportcod", "support", "code", "at", "rb:29", "home", "mathieu", "rvm", "gem", "rubi", "prioriti", "code", "ext", "gem", "cucumb", "lib", "cucumb", "prioriti", "support"], "B_body": "Without this, we're relying on the path-based caller stripping to skip over the extra level of in-framework caller... and that doesn't always work. Fixes #24858; closes #24861.\n\nThe filename-based caller filter makes this hard to test at the moment, but it basically changes:\n\n```\nirb(main):001:0> def retired_method; ActiveSupport::Deprecation.warn \"use better_method instead\"; nil; end\n=> :retired_method\nirb(main):002:0> retired_method\nDEPRECATION WARNING: use better_method instead (called from retired_method at (irb):1)\n=> nil\nirb(main):003:0> retired_method\nDEPRECATION WARNING: use better_method instead (called from retired_method at (irb):1)\n=> nil\n```\n\n(incorrectly blaming `retired_method` as being the _caller_)\n\ninto:\n\n```\nirb(main):001:0> def retired_method; ActiveSupport::Deprecation.warn \"use better_method instead\"; nil; end\n=> :retired_method\nirb(main):002:0> retired_method\nDEPRECATION WARNING: use better_method instead (called from irb_binding at (irb):2)\n=> nil\nirb(main):003:0> retired_method\nDEPRECATION WARNING: use better_method instead (called from irb_binding at (irb):3)\n=> nil\n```\n", "B_clean_body": ["without", "thi", "we", "'re", "reli", "path", "base", "caller", "strip", "skip", "over", "extra", "level", "framework", "caller", "that", "n't", "alway", "work", "fix", "24858", "close", "24861", "filenam", "base", "caller", "filter", "make", "thi", "hard", "test", "at", "moment", "but", "it", "basic", "chang", "irb", "main", ":001:0", "def", "retir", "method", "activesupport", "activ", "support", ":deprec", "warn", "use", "better", "method", "instead", "nil", "end", "retir", "method", "irb", "main", ":002:0", "retir", "method", "deprec", "warn", "use", "better", "method", "instead", "call", "retir", "method", "at", "irb", ":1", "nil", "irb", "main", ":003:0", "retir", "method", "deprec", "warn", "use", "better", "method", "instead", "call", "retir", "method", "at", "irb", ":1", "nil", "incorrectli", "blame", "retir", "method", "as", "be", "caller", "into", "irb", "main", ":001:0", "def", "retir", "method", "activesupport", "activ", "support", ":deprec", "warn", "use", "better", "method", "instead", "nil", "end", "retir", "method", "irb", "main", ":002:0", "retir", "method", "deprec", "warn", "use", "better", "method", "instead", "call", "irb", "bind", "at", "irb", ":2", "nil", "irb", "main", ":003:0", "retir", "method", "deprec", "warn", "use", "better", "method", "instead", "call", "irb", "bind", "at", "irb", ":3", "nil"], "title_sim": [0.5056471385495831], "body_sim": [0.4048622160385203], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 61}, {"A_title": "Backport columns_for_distinct in postgres adapter from #6792", "A_clean_title": ["backport", "column", "distinct", "postgr", "adapt", "6792"], "B_title": "Backport a super-simplified version of #6792, fixing that #exists? can produce invalid SQL: \"SELECT DISTINCT DISTINCT\"", "B_clean_title": ["backport", "super", "simplifi", "version", "6792", "fix", "that", "exist", "produc", "invalid", "sql", "select", "distinct", "distinct"], "A_body": "I've skipped the finder stuff because there was no relation#distinct, maybe I'm missing something\n", "A_clean_body": ["'ve", "skip", "finder", "stuff", "becaus", "there", "wa", "no", "relat", "distinct", "mayb", "'m", "miss", "someth"], "B_body": "To recap, the combination of a :uniq => true association and the #distinct call\nin #construct_limited_ids_condition combine to create invalid SQL, because\nwe're explicitly selecting DISTINCT, and also sending #distinct on to AREL,\nvia the relation#distinct_value.\n\nWhere #6792 was the forever fix, this is the minimal fix. Instead of\nproperly indicating the distinctness of the query through #uniq_value alone,\nwe use the literal DISTINCT select statement produced by #distinct and\nset #uniq_value to always be falsey\n\nHappy to backport the full #6792 change, but have the sense this is a simpler\nintervention for the 3.2 line.\n", "B_clean_body": ["recap", "combin", "uniq", "true", "associ", "distinct", "call", "construct", "limit", "id", "condit", "combin", "creat", "invalid", "sql", "becaus", "we", "'re", "explicitli", "select", "distinct", "also", "send", "distinct", "arel", "via", "relat", "distinct", "valu", "where", "6792", "wa", "forev", "fix", "thi", "minim", "fix", "instead", "properli", "indic", "distinct", "queri", "through", "uniq", "valu", "alon", "we", "use", "liter", "distinct", "select", "statement", "produc", "by", "distinct", "set", "uniq", "valu", "alway", "falsey", "happi", "backport", "full", "6792", "chang", "but", "have", "sens", "thi", "simpler", "intervent", "line"], "title_sim": [0.2589394145577386], "body_sim": [0.16798716509601314], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.3123811504972599, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 0}, {"A_title": "Silence deprecation warning from force reload", "A_clean_title": ["silenc", "deprec", "warn", "forc", "reload"], "B_title": "Suppress DEPRECATION WARNING (introduced with 6eae366)", "B_clean_title": ["suppress", "deprec", "warn", "introduc", "6eae366"], "A_body": "We deprecate the support for passing an argument to force reload in 6eae366d0d2e5d5211eeaf955f56bd1dc6836758. That led to several\ndeprecation warning when running Active Record test suite.\n\nThis commit silence the warnings by properly calling `#reload` on the association proxy or on the association object instead. However, there are several places that `ActiveSupport::Deprecation.silence` are used as those tests actually tests the force reload functionality and will be removed once `master` is targeted next minor release (5.1).\n", "A_clean_body": ["we", "deprec", "support", "pass", "argument", "forc", "reload", "6eae366d0d2e5d5211eeaf955f56bd1dc6836758", "that", "led", "sever", "deprec", "warn", "when", "run", "activ", "record", "test", "suit", "thi", "commit", "silenc", "warn", "by", "properli", "call", "reload", "associ", "proxi", "or", "associ", "object", "instead", "howev", "there", "are", "sever", "place", "that", "activesupport", "activ", "support", ":deprec", "silenc", "are", "use", "as", "those", "test", "actual", "test", "forc", "reload", "function", "will", "remov", "onc", "master", "target", "next", "minor", "releas"], "B_body": "After this commit, 5 DEPRECATION WARNINGs are left.\n4 of theme are related with `destroy` method (ex: https://github.com/rails/rails/blob/master/activerecord/test/cases/associations/join_model_test.rb#L216).\nSo reloading destroyed model raises error.\nI cannot find out why 1 of theme is failed (https://github.com/rails/rails/blob/master/activerecord/test/cases/associations_test.rb#L116).\n", "B_clean_body": ["after", "thi", "commit", "deprec", "warn", "warnin", "gs", "are", "left", "theme", "are", "relat", "destroy", "method", "ex", "http", "rb", "github", "model", "test", "com", "rail", "rail", "blob", "master", "activerecord", "test", "case", "associ", "join", "l216", "so", "reload", "destroy", "model", "rais", "error", "not", "find", "out", "whi", "theme", "fail", "http", "rb", "github", "test", "com", "rail", "rail", "blob", "master", "activerecord", "test", "case", "associ", "l116"], "title_sim": [0.6894823241251217], "body_sim": [0.4715735074768318], "file_list_sim": 0.9, "overlap_files_len": 9, "code_sim": [0.9693593301517637, 0.9743506831453559], "location_sim": [0.955940204563336, 0.9665871121718377], "pattern": 1, "time": 0}, {"A_title": "remove warning from postgresql geometric test", "A_clean_title": ["remov", "warn", "postgresql", "geometr", "test"], "B_title": "Fix postgresql line type test suite teardown", "B_clean_title": ["fix", "postgresql", "line", "type", "test", "suit", "teardown"], "A_body": "This removes the following warning which has been out in the case of a PostgreSQL 9.3 below.\n\n```\nactiverecord/test/cases/adapters/postgresql/geometric_test.rb:265: warning: instance variable @connection not initialized\n```\n", "A_clean_body": ["thi", "remov", "follow", "warn", "which", "ha", "been", "out", "case", "postgresql", "postgr", "sql", "below", "rb:265", "test", "activerecord", "test", "case", "adapt", "postgresql", "geometr", "warn", "instanc", "variabl", "connect", "not", "initi"], "B_body": "Setup skips before initialising `@connection` variable, so we should check this in teardown. \n", "B_clean_body": ["setup", "skip", "befor", "initialis", "connect", "variabl", "so", "we", "check", "thi", "teardown"], "title_sim": [0.40397506523071774], "body_sim": [0.2290598223392945], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 3}, {"A_title": "Update to Unicode 6.3.0", "A_clean_title": ["updat", "unicod"], "B_title": "updated unicode version", "B_clean_title": ["updat", "unicod", "version"], "A_body": "6.3.0 was released on September 30, 2013.\n\nhttp://unicode-inc.blogspot.com.ar/2013/09/announcing-unicode-standard-version-63.html\n", "A_clean_body": ["wa", "releas", "septemb", "30", "2013", "http", "unicod", "standard", "version", "unicod", "inc", "blogspot", "com", "63", "html", "ar", "2013", "09", "announc"], "B_body": "I was testing how Active Support encode, decode works and reading about unicode\nFound from here - http://www.unicode.org/versions/Unicode6.3.0/ that unicode latest version is 6.3.0\nWould it be feasible to update the unicode version ?\n", "B_clean_body": ["wa", "test", "how", "activ", "support", "encod", "decod", "work", "read", "about", "unicod", "found", "here", "http", "unicod", "www", "org", "version", "unicode6", "that", "unicod", "latest", "version", "would", "it", "feasibl", "updat", "unicod", "version"], "title_sim": [0.4661772009907441], "body_sim": [0.4805152438523459], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 1, "time": 10}, {"A_title": "Fix MSSQL and Firebird .exists? problem (issue #1623)", "A_clean_title": ["fix", "mssql", "firebird", "exist", "problem", "issu", "1623"], "B_title": "Fix FinderMethods#exists? sql generation to make picky sql servers happy", "B_clean_title": ["fix", "findermethod", "finder", "method", "exist", "sql", "gener", "make", "picki", "sql", "server", "happi"], "A_body": "MSSQL and Firebird DBs require the fake column to named.\n", "A_clean_body": ["mssql", "firebird", "db", "bs", "requir", "fake", "column", "name"], "B_body": "Minimal change to query generation of FinderMethods#exists? that makes SQLServer and others happy that do not like columns without an alias.\n\nWithout this patch MS-SQLServer doesn't like the generated SQL and barks for FinderMethods#exists?, ie:\n\nActiveRecord::StatementInvalid: ActiveRecord::JDBCError: No column was specified for column 2 of 't'.: SELECT t.\\* FROM (SELECT ROW_NUMBER() OVER(ORDER BY huhu.id) AS _row_num, 1 FROM huhu WHERE huhu.[id] = 83287) AS t WHERE t._row_num BETWEEN 1 AND 1\n", "B_clean_body": ["minim", "chang", "queri", "gener", "findermethod", "finder", "method", "exist", "that", "make", "sqlserver", "sql", "server", "other", "happi", "that", "not", "like", "column", "without", "alia", "without", "thi", "patch", "ms", "sqlserver", "sql", "server", "n't", "like", "gener", "sql", "bark", "findermethod", "finder", "method", "exist", "ie", "activerecord", "activ", "record", ":statementinvalid", ":statement", "invalid", "activerecord", "activ", "record", ":jdbcerror", ":jdbc", "error", "no", "column", "wa", "specifi", "column", "'t", "select", "select", "row", "number", "over", "order", "by", "huhu", "id", "as", "row", "num", "huhu", "where", "huhu", "id", "83287", "as", "where", "row", "num", "between"], "title_sim": [0.31397358660461566], "body_sim": [0.1938849593718059], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.160071148192033, 0.5354228528488646], "location_sim": [0.5185185185185185, 1.0], "pattern": 0, "time": 55}, {"A_title": "Remove \"app/channels\" if --skip-action-cable", "A_clean_title": ["remov", "app", "channel", "skip", "action", "cabl"], "B_title": "Ensure Action Cable files are removed when `skip_action_cable` is set.", "B_clean_title": ["ensur", "action", "cabl", "file", "are", "remov", "when", "skip", "action", "cabl", "set"], "A_body": "If I generate a new rails app with the `--skip-action-cable` option, I probably should not see `app/channels/application_cable/channel.rb` and `app/channels/application_cable/connection.rb`.\n\nWhat do you think?\n", "A_clean_body": ["gener", "new", "rail", "app", "skip", "action", "cabl", "option", "probabl", "not", "see", "rb", "app", "channel", "applic", "cabl", "channel", "rb", "app", "channel", "applic", "cabl", "connect", "what", "you", "think"], "B_body": "The Action Cable generators creates four files which need to be removed\nif `skip_action_cable` is set. In addition, `skip_action_cable` should\nbe set to `true` when `options[:api]` is set.\n1. `app/assets/javascripts/cable.coffee`\n2. `app/channels/application_cable/channel.rb`\n3. `app/channels/application_cable/connection.rb`\n4. `config/redis/cable.yml`\n\nFixes #22669.\n", "B_clean_body": ["action", "cabl", "gener", "creat", "four", "file", "which", "need", "remov", "skip", "action", "cabl", "set", "addit", "skip", "action", "cabl", "set", "true", "when", "option", "api", "set", "coffe", "app", "asset", "javascript", "cabl", "rb", "app", "channel", "applic", "cabl", "channel", "rb", "app", "channel", "applic", "cabl", "connect", "yml", "config", "redi", "cabl", "fix", "22669"], "title_sim": [0.7643526717053668], "body_sim": [0.8285162011503264], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.6825986740792473, 0.6825986740792473], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Allow `pluralize` helper to take a locale.", "A_clean_title": ["allow", "plural", "helper", "take", "local"], "B_title": "Support local in TextHelper.pluralize()", "B_clean_title": ["support", "local", "texthelp", "plural", "text", "helper"], "A_body": "This is already supported in `ActiveSupport::Inflector#pluralize` and `String#pluralize`, so we just forward the locale.\n", "A_clean_body": ["thi", "alreadi", "support", "activesupport", "activ", "support", ":inflector", "plural", "string", "plural", "so", "we", "just", "forward", "local"], "B_body": "Add support for locale in TextHelper.pluralize(). Make argument optional and :en by default. Unless, the helper use String.pluralize without local, and it's always :en \n", "B_clean_body": ["add", "support", "local", "texthelp", "plural", "text", "helper", "make", "argument", "option", "en", "by", "default", "unless", "helper", "use", "string", "plural", "without", "local", "it", "'s", "alway", "en"], "title_sim": [0.6900799352546874], "body_sim": [0.49863672177214974], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.5868410366360368, 0.5561240599783972], "location_sim": [0.24271844660194175, 0.2631578947368421], "pattern": 0, "time": 525}, {"A_title": "[Feedback] Implement Relation#or", "A_clean_title": ["feedback", "implement", "relat", "or"], "B_title": "Added #or to ActiveRecord::Relation", "B_clean_title": ["ad", "or", "activerecord", "activ", "record", ":relat"], "A_body": "This is an idea for another implementation of `Relation#or`, in order to\naddress some of the API concerns for the previous APIs. In order to make\nit clear what is being changed on the relation, the result is explictly\npassed to either `where` or `having`. This also removes the need to\ncheck for \"structural compatibility\", since you've told us what you're\nlooking to use from either one. If you give two relations that don't\nmake sense together, it's no different than passing column names to\n`where` that don't make sense, and will result in an\n`ActiveRecord::StatementInvalid`.\n\nAdditionally, any arguments which would be valid to `where` or `having`\nare valid arguments to `or`, as well, to allow for a slightly lighter\nweight alternative.\n\nExamples:\n\n``` ruby\ndef self.for_homepage\n  where(active.or(pinned))\nend\n\ndef self.for_homepage\n  where(active.or(pinned: true))\nend\n```\n\n/cc @matthewd \n", "A_clean_body": ["thi", "idea", "anoth", "implement", "relat", "or", "order", "address", "some", "api", "concern", "previou", "api", "ap", "order", "make", "it", "clear", "what", "be", "chang", "relat", "result", "explictli", "pass", "either", "where", "or", "have", "thi", "also", "remov", "need", "check", "structur", "compat", "sinc", "you", "'ve", "told", "us", "what", "you'r", "look", "use", "either", "one", "you", "give", "two", "relat", "that", "don't", "make", "sens", "togeth", "it", "'s", "no", "differ", "than", "pass", "column", "name", "where", "that", "n't", "make", "sens", "will", "result", "activerecord", "activ", "record", ":statementinvalid", ":statement", "invalid", "addit", "ani", "argument", "which", "would", "valid", "where", "or", "have", "are", "valid", "argument", "or", "as", "well", "allow", "slightli", "lighter", "weight", "altern", "exampl", "rubi", "def", "self", "homepag", "where", "activ", "or", "pin", "end", "def", "self", "homepag", "where", "activ", "or", "pin", "true", "end", "cc", "matthewd"], "B_body": "ActiveRecord::Relation#or returns a new relation, which is the\nresult of filtering the current relation according to the\nconditions in the arguments, joining WHERE clauses with OR\noperand, contraty to the default behaviour that uses AND.\n\nActiveRecord::Relation#or accepts conditions in one of several\nformats. In the examples below, the resulting SQL is given as an\nillustration; the actual query generated may be different depending\non the database adapter.\n- without arguments\n\nIf ActiveRecord::Relation#or is used without arguments, it returns\nan ActiveRecord::OrChain object that can be used to chain queries\nwith any other relation method, like where:\n\n```\nPost.where(\"id = 1\").or.where(\"id = 2\")\n> SELECT `posts`.* FROM `posts`  WHERE (('id = 1' OR 'id = 2'))\n```\n\nIt can also be chained with a named scope:\n\n```\nPost.where(\"id = 1\").or.containing_the_letter_a\n> SELECT `posts`.* FROM `posts`  WHERE (('id = 1' OR 'body LIKE \\\\'%a%\\\\''))\n```\n- ActiveRecord::Relation\n\nWhen #or is used with an ActiveRecord::Relation as an argument, it\nmerges the two relations, with the exception of the WHERE clauses,\nthat are joined using the OR operand.\n\n```\nPost.where(\"id = 1\").or(Post.where(\"id = 2\"))\n> SELECT `posts`.* FROM `posts`  WHERE (('id = 1' OR 'id = 2'))\n```\n- anything you would pass to #where\n\nActiveRecord::Relation#or also accepts anything that could be passed\nto the #where method, as a shortcut:\n\n```\nPost.where(\"id = 1\").or(\"id = ?\", 2)\n> SELECT `posts`.* FROM `posts`  WHERE (('id = 1' OR 'id = 2'))\n```\n\nThis is my first contribution to rails and I tried to keep things coherent with the current code, but I am obviously open for feedback.\n", "B_clean_body": ["activerecord", "activ", "record", ":relat", "or", "return", "new", "relat", "which", "result", "filter", "current", "relat", "accord", "condit", "argument", "join", "where", "claus", "or", "operand", "contrati", "default", "behaviour", "that", "use", "activerecord", "activ", "record", ":relat", "or", "accept", "condit", "one", "sever", "format", "exampl", "below", "result", "sql", "given", "as", "illustr", "actual", "queri", "gener", "may", "differ", "depend", "databas", "adapt", "without", "argument", "activerecord", "activ", "record", ":relat", "or", "use", "without", "argument", "it", "return", "activerecord", "activ", "record", ":orchain", ":or", "chain", "object", "that", "use", "chain", "queri", "ani", "other", "relat", "method", "like", "where", "post", "where", "id", "or", "where", "id", "select", "post", "post", "where", "'id", "or", "'id", "it", "also", "chain", "name", "scope", "post", "where", "id", "or", "contain", "letter", "select", "post", "post", "where", "'id", "or", "'bodi", "like", "activerecord", "activ", "record", ":relat", "when", "or", "use", "activerecord", "activ", "record", ":relat", "as", "argument", "it", "merg", "two", "relat", "except", "where", "claus", "that", "are", "join", "or", "operand", "post", "where", "id", "or", "post", "where", "id", "select", "post", "post", "where", "'id", "or", "'id", "anyth", "you", "would", "pass", "where", "activerecord", "activ", "record", ":relat", "or", "also", "accept", "anyth", "that", "could", "pass", "where", "method", "as", "shortcut", "post", "where", "id", "or", "id", "select", "post", "post", "where", "'id", "or", "'id", "thi", "my", "first", "contribut", "rail", "tri", "keep", "thing", "coher", "current", "code", "but", "am", "obvious", "open", "feedback"], "title_sim": [0.048127224640321965], "body_sim": [0.47097607424832627], "file_list_sim": 0.25, "overlap_files_len": 2, "code_sim": [0.5473440145604896, 0.5685082798935192], "location_sim": [0.16576086956521738, 0.30198019801980197], "pattern": 0, "time": 734}, {"A_title": "Do not escape HTML entities in text files", "A_clean_title": ["not", "escap", "html", "entiti", "text", "file"], "B_title": "Don't HTML escape ActionMailer plaintext templates", "B_clean_title": ["n't", "html", "escap", "actionmail", "action", "mailer", "plaintext", "templat"], "A_body": "Rails escapes HTML entities in erb files. This is great, because it prevents Cross Site Scripting and other evil attacks. However there is one case, where this behavior leads to undesired effects.\n\nRails escapes HTML entities in plain text mails. When I am using a `message.text.erb` file, `ActionMailer` correctly detects that the mail contains plain text and sets a `text/plain` mime type. However, ERB still handles this as an html file and escapes HTML entities.\n\nFor example, if my template contains `Dear <%= @customer_name %>, ...` and `@customer_name` is _Foobar & Partner_, then the mail will contain _Dear Foobar <b>&amp;amp;</b> Partner_.\n\nThe following commit just disables HTML escaping in text templates. A text erb template is every file that has `.text` in the file name and is handled by erb.\n", "A_clean_body": ["rail", "escap", "html", "entiti", "erb", "file", "thi", "great", "becaus", "it", "prevent", "cross", "site", "script", "other", "evil", "attack", "howev", "there", "one", "case", "where", "thi", "behavior", "lead", "undesir", "effect", "rail", "escap", "html", "entiti", "plain", "text", "mail", "when", "am", "messag", "text", "erb", "file", "actionmail", "action", "mailer", "correctli", "detect", "that", "mail", "contain", "plain", "text", "set", "text", "plain", "mime", "type", "howev", "erb", "still", "handl", "thi", "as", "html", "file", "escap", "html", "entiti", "exampl", "my", "templat", "contain", "dear", "custom", "name", "custom", "name", "foobar", "partner", "then", "mail", "will", "contain", "dear", "foobar", "amp", "amp", "partner", "follow", "commit", "just", "disabl", "html", "escap", "text", "templat", "text", "erb", "templat", "everi", "file", "that", "ha", "text", "file", "name", "handl", "by", "erb"], "B_body": "Here's a test case and fix for issue #687.\n\nThe problem only exists when the evaluating block expressions.\n", "B_clean_body": ["here", "'s", "test", "case", "fix", "issu", "687", "problem", "onli", "exist", "when", "evalu", "block", "express"], "title_sim": [0.3201885882265316], "body_sim": [0.0902668705002721], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.5791662978747745, 0.7778489884563187], "location_sim": [0.4857142857142857, 1.0], "pattern": 0, "time": 37}, {"A_title": "Allow DateTime comparison to Infinity/-Infinity", "A_clean_title": ["allow", "datetim", "date", "time", "comparison", "infin", "infin"], "B_title": "Added ability to compare date/time with infinity", "B_clean_title": ["ad", "abil", "compar", "date", "time", "infin"], "A_body": "This is from: #3457 and the following commit: joevandyk@939ed09\n\nI have set the proper author of the commit.\n\nIt wasn't updated for quite a while and a rebase would be needed(as @steveklabnik mentioned)  so I thought it would be of interest to give it some love.\n", "A_clean_body": ["thi", "3457", "follow", "commit", "joevandyk", "939ed09", "have", "set", "proper", "author", "commit", "it", "wa", "n't", "updat", "quit", "while", "rebas", "would", "need", "as", "steveklabnik", "mention", "so", "thought", "it", "would", "interest", "give", "it", "some", "love"], "B_body": "Date, DateTime, Time and TimeWithZone can now be compared to infinity,\n  so it's now possible to create ranges with one infinite bound and\n  date/time object as another bound.\n\n  Ex.: @range = Range.new(Date.today, Float::INFINITY)\n\nAlso it's possible to check inclusion of date/time in range with\n  conversion.\n\n  Ex.: @range.include?(Time.now + 1.year) # => true\n         @range.include?(DateTime.now + 1.year) # => true\n\nAbility to create date/time ranges with infinite bound is required\n  for handling postgresql range types.\n\nAlso it gives ability to create ranges from Time.now to Date.today + 10.years\n", "B_clean_body": ["date", "datetim", "date", "time", "time", "timewithzon", "time", "zone", "now", "compar", "infin", "so", "it", "'s", "now", "possibl", "creat", "rang", "one", "infinit", "bound", "date", "time", "object", "as", "anoth", "bound", "ex", "rang", "rang", "new", "date", "today", "float", ":infin", "also", "it", "'s", "possibl", "check", "inclus", "date", "time", "rang", "convers", "ex", "rang", "includ", "time", "now", "year", "true", "rang", "includ", "datetim", "now", "date", "time", "year", "true", "abil", "creat", "date", "time", "rang", "infinit", "bound", "requir", "handl", "postgresql", "rang", "type", "also", "it", "give", "abil", "creat", "rang", "time", "now", "date", "today", "10", "year"], "title_sim": [0.5006935344870374], "body_sim": [0.08731334905017608], "file_list_sim": 0.05555555555555555, "overlap_files_len": 1, "code_sim": [0.4245389573485065, 0.0], "location_sim": [0.06093189964157706, 1.0], "pattern": 0, "time": 88}, {"A_title": "Fixing PostgreSQL migrations for array support", "A_clean_title": ["fix", "postgresql", "postgr", "sql", "migrat", "array", "support"], "B_title": "Fixes #10432 add_column not creating array columns in PostgreSQL", "B_clean_title": ["fix", "10432", "add", "column", "not", "creat", "array", "column", "postgresql", "postgr", "sql"], "A_body": "Since the `column` method is not used by the abstract `SchemaStatements::AlterTable`, the following migration will not work properly in PostgreSQL:\n\n```\nclass AddRolesToUsers < ActiveRecord::Migration\n  def change\n    change_table :users do |t|\n      t.column :roles, :string, array: true\n    end\n  end\nend\n```\n\nThis change fixes this issue.\n", "A_clean_body": ["sinc", "column", "method", "not", "use", "by", "abstract", "schemastat", "schema", "statement", ":altert", ":alter", "tabl", "follow", "migrat", "will", "not", "work", "properli", "postgresql", "postgr", "sql", "class", "addrolestous", "add", "role", "user", "activerecord", "activ", "record", ":migrat", "def", "chang", "chang", "tabl", "user", "|t|", "column", "role", "string", "array", "true", "end", "end", "end", "thi", "chang", "fix", "thi", "issu"], "B_body": "When then PostgreSQL visitor was [added](https://github.com/rails/rails/commit/6b7fdf3bf3675a14eae74acc5241089308153a34)\n`add_column` was no longer receiving the column options directly. This\ncaused the options to be lost along the way.\n", "B_clean_body": ["when", "then", "postgresql", "postgr", "sql", "visitor", "wa", "ad", "http", "github", "com", "rail", "rail", "commit", "6b7fdf3bf3675a14eae74acc5241089308153a34", "add", "column", "wa", "no", "longer", "receiv", "column", "option", "directli", "thi", "caus", "option", "lost", "along", "way"], "title_sim": [0.7299974785151911], "body_sim": [0.36865079501683085], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.3029883950319736, 0.1912215811725274], "location_sim": [0.22388059701492538, 1.0], "pattern": 0, "time": 7}, {"A_title": "Added ability to compare date/time with infinity", "A_clean_title": ["ad", "abil", "compar", "date", "time", "infin"], "B_title": "Allow DateTime comparison to Infinity/-Infinity.", "B_clean_title": ["allow", "datetim", "date", "time", "comparison", "infin", "infin"], "A_body": "Date, DateTime, Time and TimeWithZone can now be compared to infinity,\n  so it's now possible to create ranges with one infinite bound and\n  date/time object as another bound.\n\n  Ex.: @range = Range.new(Date.today, Float::INFINITY)\n\nAlso it's possible to check inclusion of date/time in range with\n  conversion.\n\n  Ex.: @range.include?(Time.now + 1.year) # => true\n         @range.include?(DateTime.now + 1.year) # => true\n\nAbility to create date/time ranges with infinite bound is required\n  for handling postgresql range types.\n\nAlso it gives ability to create ranges from Time.now to Date.today + 10.years\n", "A_clean_body": ["date", "datetim", "date", "time", "time", "timewithzon", "time", "zone", "now", "compar", "infin", "so", "it", "'s", "now", "possibl", "creat", "rang", "one", "infinit", "bound", "date", "time", "object", "as", "anoth", "bound", "ex", "rang", "rang", "new", "date", "today", "float", ":infin", "also", "it", "'s", "possibl", "check", "inclus", "date", "time", "rang", "convers", "ex", "rang", "includ", "time", "now", "year", "true", "rang", "includ", "datetim", "now", "date", "time", "year", "true", "abil", "creat", "date", "time", "rang", "infinit", "bound", "requir", "handl", "postgresql", "rang", "type", "also", "it", "give", "abil", "creat", "rang", "time", "now", "date", "today", "10", "year"], "B_body": "A continuation of the fixes in #544 -- @tenderlove let ActiveRecord support Infinite timestamps, but you can't compare them to other DateTime values.  This commit fixes that.\n", "B_clean_body": ["continu", "fix", "544", "tenderlov", "let", "activerecord", "activ", "record", "support", "infinit", "timestamp", "but", "you", "ca", "n't", "compar", "them", "other", "datetim", "date", "time", "valu", "thi", "commit", "fix", "that"], "title_sim": [0.5006935344870374], "body_sim": [0.48228112442603566], "file_list_sim": 0.11764705882352941, "overlap_files_len": 2, "code_sim": [0.4377391552852021, 0.18952127572456662], "location_sim": [0.0, 0.0], "pattern": 0, "time": 290}, {"A_title": "Fix MessageEncryptorTest", "A_clean_title": ["fix", "messageencryptortest", "messag", "encryptor", "test"], "B_title": "Fix default key length on cipher", "B_clean_title": ["fix", "default", "key", "length", "cipher"], "A_body": "By r55146 commit on Ruby, `OpenSSL::Cipher#key=` raises\n`ArgumentError` when too long \"key\" is passed.\nIn Rails test cases \"aes-256-cbc\" is used.\nKey length of \"aes-256-cbc\" is 256 bits (32 bytes).\n\n`SecureRandom.hex(64)` generates 64 words string\nwhich is 128 bytes.\n\nChange to use `SecureRandom.random_bytes(32)` to generate\n32 bytes key.\n\nref: https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=55146&view=revision\n", "A_clean_body": ["by", "r55146", "commit", "rubi", "openssl", "open", "ssl", ":cipher", "key=", "rais", "argumenterror", "argument", "error", "when", "too", "long", "key", "pass", "rail", "test", "case", "ae", "256", "cbc", "use", "key", "length", "ae", "256", "cbc", "256", "bit", "32", "byte", "securerandom", "hex", "secur", "random", "64", "gener", "64", "word", "string", "which", "128", "byte", "chang", "use", "securerandom", "secur", "random", "random", "byte", "32", "gener", "32", "byte", "key", "ref", "http", "rubi", "lang", "cgi", "svn", "org", "cgi", "bin", "viewvc", "revision=55146", "view=revis"], "B_body": "We default to using aes-256-cbc as our verification/signing cipher. It can accept key lengths of 128, 192 or 256-bit, whereas currently we were providing twice the acceptable value.\n\nruby < 2.4 allowed accepting these values, as extra key bits were ignored. Since https://github.com/ruby/ruby/commit/ce635262f53b760284d56bb1027baebaaec175d1 this now has a strict checking on key length.\n\nDefault to key length 32 bytes, to match the compatible length for  aes-256-cbc\n\nFixes #25185\n", "B_clean_body": ["we", "default", "ae", "256", "cbc", "as", "our", "verif", "sign", "cipher", "it", "accept", "key", "length", "128", "192", "or", "256", "bit", "wherea", "current", "we", "were", "provid", "twice", "accept", "valu", "rubi", "allow", "accept", "these", "valu", "as", "extra", "key", "bit", "were", "ignor", "sinc", "http", "github", "com", "rubi", "rubi", "commit", "ce635262f53b760284d56bb1027baebaaec175d1", "thi", "now", "ha", "strict", "check", "key", "length", "default", "key", "length", "32", "byte", "match", "compat", "length", "ae", "256", "cbc", "fix", "25185"], "title_sim": [0.15312847120140685], "body_sim": [0.734003859513821], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.5791502976956523, 1.0000000000000002], "location_sim": [0.5490196078431373, 1.0], "pattern": 1, "time": 1}, {"A_title": "prevent --skip-action-cable from erroring when --api option is used", "A_clean_title": ["prevent", "skip", "action", "cabl", "error", "when", "api", "option", "use"], "B_title": "Fix app_generator for api only apps when Action Cable is skipped", "B_clean_title": ["fix", "app", "gener", "api", "onli", "app", "when", "action", "cabl", "skip"], "A_body": "Fixes #22868 \n", "A_clean_body": ["fix", "22868"], "B_body": "- It was giving error trying to gsub `application.html.erb` which doesn't\n  exist for api only app.\n\nr? @rafaelfranca \n\nxref - https://github.com/rails/rails/issues/22868#issuecomment-174133986\n", "B_clean_body": ["it", "wa", "give", "error", "tri", "gsub", "applic", "html", "erb", "which", "doesn't", "exist", "api", "onli", "app", "rafaelfranca", "xref", "http", "github", "com", "rail", "rail", "issu", "22868", "issuecom", "174133986"], "title_sim": [0.6269218944711581], "body_sim": [0.05634089707483644], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 1, "time": 0}, {"A_title": "Remove all ActiveRecord deprecations", "A_clean_title": ["remov", "all", "activerecord", "activ", "record", "deprec"], "B_title": "Remove passing original exception", "B_clean_title": ["remov", "pass", "origin", "except"], "A_body": "", "A_clean_body": [], "B_body": "Passing original exception was deprecated by rails/rails#18774. \n\nThis produced the warning when we use activerecord with sqlite3 adaper and call \"drop\" task:\n\n```\nDEPRECATION WARNING: Passing #original_exception is deprecated and has no effect. Exceptions will automatically capture the original exception.\n```\n\nI think this is just unfinished work of rails/rails#18774.\n", "B_clean_body": ["pass", "origin", "except", "wa", "deprec", "by", "rail", "rail", "18774", "thi", "produc", "warn", "when", "we", "use", "activerecord", "sqlite3", "adap", "call", "drop", "task", "deprec", "warn", "pass", "origin", "except", "deprec", "ha", "no", "effect", "except", "will", "automat", "captur", "origin", "except", "think", "thi", "just", "unfinish", "work", "rail", "rail", "18774"], "title_sim": [0.24334169885224186], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 226}, {"A_title": "Prevent `Marshal.load` from looping infinitely", "A_clean_title": ["prevent", "marshal", "load", "loop", "infinit"], "B_title": "fix infinite retry loop in Marshal.load autoloading logic", "B_clean_title": ["fix", "infinit", "retri", "loop", "marshal", "load", "autoload", "logic"], "A_body": "Fix a bug in `Marshal.load` that caused it to loop indefinitely when\ntrying to autoload a constant that resolved to a different name.\n\nThis could occur when marshalling an ActiveRecord 4.0 object (e.g. into\nmemcached) and then trying to unmarshal it with Rails 4.2. The\nmarshalled payload contains a reference to\n`ActiveRecord::ConnectionAdapters::Mysql2Adapter::Column`, which in\nRails 4.2 resolves to\n`ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::Column`.\n\nThis backports #24150 to 4-2-stable\n", "A_clean_body": ["fix", "bug", "marshal", "load", "that", "caus", "it", "loop", "indefinit", "when", "tri", "autoload", "constant", "that", "resolv", "differ", "name", "thi", "could", "occur", "when", "marshal", "activerecord", "activ", "record", "object", "into", "memcach", "then", "tri", "unmarsh", "it", "rail", "marshal", "payload", "contain", "refer", "activerecord", "activ", "record", ":connectionadapt", ":connect", "adapt", ":mysql2adapt", ":column", "which", "rail", "resolv", "activerecord", "activ", "record", ":connectionadapt", ":connect", "adapt", ":abstractmysqladapt", ":abstract", "mysql", "adapt", ":column", "thi", "backport", "24150", "stabl"], "B_body": "Fix an infinite-retry loop in the Marshal.load autoloading logic extension, by short-circuiting if the name has already been processed for autoloading and yet continues to fail to load.\n\nAs shown in the test case and in this gist: https://gist.github.com/seanwalbran/db04918c54a31f238587, the issue is triggered specifically in the scenario where an object had been dumped as a 'concrete' nested class (i.e., defined on the subclass), but is being loaded in a context where the nested class has since been rendered 'non-concrete' (i.e., defined only by the superclass).   \n\nA real-life hang example occurs if you take an ActiveRecord::Base object dumped (e.g., to memcached) under rails 4.1.x and attempt to load it under rails 4.2.0, where ActiveRecord::ConnectionAdapters::Mysql2Adapter::Column is no longer a concrete nested class as of the following commit: https://github.com/rails/rails/commit/e781aa31fc52a7c696115302ef4d4e02bfd1533b#diff-e7dead35794529e0cc5d0b2d788f8235L33\n", "B_clean_body": ["fix", "infinit", "retri", "loop", "marshal", "load", "autoload", "logic", "extens", "by", "short", "circuit", "name", "ha", "alreadi", "been", "process", "autoload", "yet", "continu", "fail", "load", "as", "shown", "test", "case", "thi", "gist", "http", "github", "gist", "com", "seanwalbran", "db04918c54a31f238587", "issu", "trigger", "specif", "scenario", "where", "object", "had", "been", "dump", "as", "'concret", "nest", "class", "defin", "subclass", "but", "be", "load", "context", "where", "nest", "class", "ha", "sinc", "been", "render", "'non", "concret", "defin", "onli", "by", "superclass", "real", "life", "hang", "exampl", "occur", "you", "take", "activerecord", "activ", "record", ":base", "object", "dump", "memcach", "under", "rail", "attempt", "load", "it", "under", "rail", "where", "activerecord", "activ", "record", ":connectionadapt", ":connect", "adapt", ":mysql2adapt", ":column", "no", "longer", "concret", "nest", "class", "as", "follow", "commit", "http", "github", "com", "rail", "rail", "commit", "e781aa31fc52a7c696115302ef4d4e02bfd1533b", "diff", "e7dead35794529e0cc5d0b2d788f8235l33"], "title_sim": [0.632626968882265], "body_sim": [0.4213034712385743], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.5177520372572559, 0.5891445737902287], "location_sim": [0.2564102564102564, 0.2898550724637681], "pattern": -1, "time": 432}, {"A_title": "add_source in Application Template should take a block for gem entries", "A_clean_title": ["add", "sourc", "applic", "templat", "take", "block", "gem", "entri"], "B_title": "Adding support for passing a block to the `add_source` action of a custom generator", "B_clean_title": ["ad", "support", "pass", "block", "add", "sourc", "action", "custom", "gener"], "A_body": "Since newer versions of Bundler complain when you have multiple `source` in Gemfile without specifying a block for gem entries group from that source, Application Template generator's `add_source` method should also take a block.\n", "A_clean_body": ["sinc", "newer", "version", "bundler", "complain", "when", "you", "have", "multipl", "sourc", "gemfil", "without", "specifi", "block", "gem", "entri", "group", "that", "sourc", "applic", "templat", "gener", "'s", "add", "sourc", "method", "also", "take", "block"], "B_body": "This PR adds support for passing a block to a call to `add_source` in a custom generator.\n\n```\nclass AddSourceGenerator < Rails::Generators::Base\n  def add_source_with_block\n    add_source 'https://gems.github.com' do\n      gem 'rspec-rails'\n    end\n  end\nend\n```\n\nI do have a question about the best way to add the gems to the Gemfile. The `add_source` action uses `prepend_file` instead of `append_file` to place the `source` call at the top of the Gemfile. In order to get the `gem` calls inside the block to also prepend, I needed to change the `gem` method to use `prepend_file` when called from `add_source`. This seems to work OK. My concern with this is that the gems are added in reverse order that they are declared in. If we wanted to preserve the order, I think I would need to change this to append the `source` calls if `add_source` is passed a block.\n\nLet me know if you have a preference on the above or anything else in the PR.\n", "B_clean_body": ["thi", "pr", "add", "support", "pass", "block", "call", "add", "sourc", "custom", "gener", "class", "addsourcegener", "add", "sourc", "gener", "rail", ":gener", ":base", "def", "add", "sourc", "block", "add", "sourc", "'http", "github", "com", "gem", "gem", "'rspec", "rails'", "end", "end", "end", "have", "question", "about", "best", "way", "add", "gem", "gemfil", "add", "sourc", "action", "use", "prepend", "file", "instead", "append", "file", "place", "sourc", "call", "at", "top", "gemfil", "order", "get", "gem", "call", "insid", "block", "also", "prepend", "need", "chang", "gem", "method", "use", "prepend", "file", "when", "call", "add", "sourc", "thi", "seem", "work", "ok", "my", "concern", "thi", "that", "gem", "are", "ad", "revers", "order", "that", "they", "are", "declar", "we", "want", "preserv", "order", "think", "would", "need", "chang", "thi", "append", "sourc", "call", "add", "sourc", "pass", "block", "let", "me", "know", "you", "have", "prefer", "abov", "or", "anyth", "pr"], "title_sim": [0.3810031083603014], "body_sim": [0.5281417848869139], "file_list_sim": 0.75, "overlap_files_len": 3, "code_sim": [0.8145399577102053, 0.812559409948353], "location_sim": [0.8045112781954887, 0.8492063492063492], "pattern": 0, "time": 49}, {"A_title": "Document default trim mode for Erubis and affected ERB tags [ci skip]", "A_clean_title": ["document", "default", "trim", "mode", "erubi", "affect", "erb", "tag", "ci", "skip"], "B_title": "Updating docs for config.action_view.erb_trim_mode", "B_clean_title": ["updat", "doc", "config", "action", "view", "erb", "trim", "mode"], "A_body": "Fixes #12963\n\ncc @rafaelfranca\n", "A_clean_body": ["fix", "12963", "cc", "rafaelfranca"], "B_body": "I would like to help resolve #12963.\nThis  documents that Erubis is now the default engine being used by Rails. This also adds an ERB example to remove trailing white spaces. \n", "B_clean_body": ["would", "like", "help", "resolv", "12963", "thi", "document", "that", "erubi", "now", "default", "engin", "be", "use", "by", "rail", "thi", "also", "add", "erb", "exampl", "remov", "trail", "white", "space"], "title_sim": [0.3665750495164724], "body_sim": [-0.004202008649435208], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.6120820104973164, 0.6120820104973164], "location_sim": [1.0, 1.0], "pattern": 1, "time": 16}, {"A_title": "Don't set a nil Set-Cookie header when there aren't any cookies", "A_clean_title": ["n't", "set", "nil", "set", "cooki", "header", "when", "there", "are", "n't", "ani", "cooki"], "B_title": "Set-Cookie values must be strings according to rack spec", "B_clean_title": ["set", "cooki", "valu", "must", "string", "accord", "rack", "spec"], "A_body": "Omit the header entirely when there aren't any cookies to write. Throws a wrench in `Rack::Lint` and confuses some Rack handlers (like [Nack](https://github.com/josh/nack))\n\nRelated: https://github.com/rack/rack/pull/956\n", "A_clean_body": ["omit", "header", "entir", "when", "there", "are", "n't", "ani", "cooki", "write", "throw", "wrench", "rack", ":lint", "confus", "some", "rack", "handler", "like", "nack", "http", "github", "com", "josh", "nack", "relat", "http", "github", "com", "rack", "rack", "pull", "956"], "B_body": "But it's still possible, make_set_cookie_header return nil in a [empty rails 5 app](https://github.com/cloud-mes/demo).\n\nOnce I think it should be handle [via rack#955](https://github.com/rack/rack/pull/955), but according to the [rack SPEC](https://github.com/rack/rack/blob/master/SPEC#L234-L236), seems this is a better place.\n\nNotice it's still not perfect way to fix, because if I add `Rack::Lint` to application.rb, still `ActionDispatch::Request::Session:0x6c5d108 not yet loaded` error happen.\n\n``` ruby\n# ActionDispatch::Session::CookieStore can not pass Rack::Lint and report below error.\n# session #<ActionDispatch::Request::Session not yet loaded> must respond to store and []=\nconfig.middleware.insert_after ActionDispatch::Session::CookieStore, Rack::Lint\n```\n", "B_clean_body": ["but", "it", "'s", "still", "possibl", "make", "set", "cooki", "header", "return", "nil", "empti", "rail", "app", "http", "me", "demo", "github", "com", "cloud", "onc", "think", "it", "handl", "via", "rack", "955", "http", "github", "com", "rack", "rack", "pull", "955", "but", "accord", "rack", "spec", "http", "github", "com", "rack", "rack", "blob", "master", "spec", "l234", "l236", "seem", "thi", "better", "place", "notic", "it", "'s", "still", "not", "perfect", "way", "fix", "becaus", "add", "rack", ":lint", "applic", "rb", "still", "actiondispatch", "action", "dispatch", ":request", ":session:0x6c5d108", "not", "yet", "load", "error", "happen", "rubi", "actiondispatch", "action", "dispatch", ":session", ":cookiestor", ":cooki", "store", "not", "pass", "rack", ":lint", "report", "below", "error", "session", "actiondispatch", "action", "dispatch", ":request", ":session", "not", "yet", "load", "must", "respond", "store", "config", "middlewar", "insert", "after", "actiondispatch", "action", "dispatch", ":session", ":cookiestor", ":cooki", "store", "rack", ":lint"], "title_sim": [0.47613207387040674], "body_sim": [0.43152376249548957], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.11038961038961038, 1.0], "pattern": -1, "time": 0}, {"A_title": "Use the default inheritance `:type` when instantiating a new object.", "A_clean_title": ["use", "default", "inherit", "type", "when", "instanti", "new", "object"], "B_title": "STI cast new instances to `default type` on initialize.", "B_clean_title": ["sti", "cast", "new", "instanc", "default", "type", "initi"], "A_body": "Calling `new` on some base model will now instantiate the default subtype\nas specified in the schema.\n", "A_clean_body": ["call", "new", "some", "base", "model", "will", "now", "instanti", "default", "subtyp", "as", "specifi", "schema"], "B_body": "fixes #17121\n", "B_clean_body": ["fix", "17121"], "title_sim": [0.2725722149142809], "body_sim": [0.010401258503891583], "file_list_sim": 0.6, "overlap_files_len": 3, "code_sim": [0.39762424579761274, 0.4482849355039835], "location_sim": [0.4316546762589928, 0.5042016806722689], "pattern": 0, "time": 341}, {"A_title": "Escape of U+2028 and U+2029 in the JSON Encoder", "A_clean_title": ["escap", "u+2028", "u+2029", "json", "encod"], "B_title": "Escape multibyte line terminators in JSON encoding", "B_clean_title": ["escap", "multibyt", "line", "termin", "json", "encod"], "A_body": "U+2028 and U+2029 are allowed inside strings in JSON (as all literal\nUnicode characters) but JavaScript defines them as newline\nseperators. Because no literal newlines are allowed in a string, this\ncauses a ParseError in the browser. We work around this issue by\nreplacing them with the escaped version. The resulting JSON is still\nvalid and can be parsed in the browser.\n\nThis commit has been coauthored with Viktor Kelemen @yikulju\n\nReferences:\n- http://timelessrepo.com/json-isnt-a-javascript-subset\n- https://github.com/rails/rails/issues/10320\n", "A_clean_body": ["u+2028", "u+2029", "are", "allow", "insid", "string", "json", "as", "all", "liter", "unicod", "charact", "but", "javascript", "java", "script", "defin", "them", "as", "newlin", "seper", "becaus", "no", "liter", "newlin", "are", "allow", "string", "thi", "caus", "parseerror", "pars", "error", "browser", "we", "work", "around", "thi", "issu", "by", "replac", "them", "escap", "version", "result", "json", "still", "valid", "pars", "browser", "thi", "commit", "ha", "been", "coauthor", "viktor", "kelemen", "yikulju", "refer", "http", "isnt", "javascript", "subset", "timelessrepo", "com", "json", "http", "github", "com", "rail", "rail", "issu", "10320"], "B_body": "Currently, json/encoding respects the JSON spec (as it should) which disallows \\n and \\r inside strings, escaping them as expected.\n\nUnfortunately, ECMA-262 (Javascript) disallows not only \\n and \\r in strings, but \"Line Terminators\" which includes U+2028 and U+2029. See here: http://bclary.com/2004/11/07/#a-7.3\n\nThis pull request adds U+2028 and U+2029 to be escaped.\n# Why?\u00a0\n\nIt's very common to see something like this in a Rails template:\n\n```\n<script type=\"text/javascript\">\u00a0\nvar posts = <%= @posts.to_json %>;\n</script>\n```\n\nIf U+2028 or U+2029 are part of any attributes output in the to_json call, you will end up with an exception. In Chrome:\u00a0Uncaught SyntaxError: Unexpected token ILLEGAL.\n\nIn other words, if one of your users pastes something into a textarea that happens to include these fancy unicode line terminators, and you run to_json on that model and stick it in a template, that page is probably broken now.\n# Why not?\n\nThis is JSON encoding, and the JSON spec is specific about how to\u00a0encode strings. U+2028 and U+2029 don't get special treatment.\n\nThat being said, this is non-obvious, counterintuitive, and can be tough to debug (https://www.google.com/?q=u2028). \n\nWhat do you do in your apps to deal with this? Is there a convention I'm missing?\n", "B_clean_body": ["current", "json", "encod", "respect", "json", "spec", "as", "it", "which", "disallow", "insid", "string", "escap", "them", "as", "expect", "unfortun", "ecma", "262", "javascript", "disallow", "not", "onli", "string", "but", "line", "termin", "which", "includ", "u+2028", "u+2029", "see", "here", "http", "bclari", "com", "2004", "11", "07", "thi", "pull", "request", "add", "u+2028", "u+2029", "escap", "whi", "it", "'s", "veri", "common", "see", "someth", "like", "thi", "rail", "templat", "script", "type=", "text", "javascript", "var", "post", "post", "json", "script", "u+2028", "or", "u+2029", "are", "part", "ani", "attribut", "output", "json", "call", "you", "will", "end", "up", "except", "chrome", "uncaught", "syntaxerror", "syntax", "error", "unexpect", "token", "illeg", "other", "word", "one", "your", "user", "past", "someth", "into", "textarea", "that", "happen", "includ", "these", "fanci", "unicod", "line", "termin", "you", "run", "json", "that", "model", "stick", "it", "templat", "that", "page", "probabl", "broken", "now", "whi", "not", "thi", "json", "encod", "json", "spec", "specif", "about", "how", "encod", "string", "u+2028", "u+2029", "n't", "get", "special", "treatment", "that", "be", "said", "thi", "non", "obviou", "counterintuit", "tough", "debug", "http", "googl", "www", "com", "q=u2028", "what", "you", "your", "app", "deal", "thi", "there", "convent", "'m", "miss"], "title_sim": [0.8895970581609205], "body_sim": [0.5059247158832552], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.6792452830188679, 1.0], "pattern": 1, "time": 36}, {"A_title": "ActionCable: Add a \"welcome\" and \"ping\" message type", "A_clean_title": ["actionc", "action", "cabl", "add", "welcom", "ping", "messag", "type"], "B_title": "Convert ping from an `identifier` to a `message_type`", "B_clean_title": ["convert", "ping", "identifi", "messag", "type"], "A_body": "### Summary\n\nThis pull request does three things:\n1. Fixes inconsistencies in the ActionCable protocol between server and client in regards to the `ping` message by making ping a message type instead of an `identifier`.\n2. Adds a `welcome` message type, which signals to clients the server is ready or has re-opened the connection.\n3. Removes `ConnectionMonitor` as a subscriber, as this is no longer necessary when pings and welcome messages can be identified separately.\n### Other Information\n\nThe `ping` message was being sent looking like:\n`{\"identifier\": \"_ping\", \"message\": \"3939939393\"}`\nwhereas other messages were being sent to look like:\n`{\"type\": \"confirm_subscription\" ...}`\nNow the ping looks like:\n`{\"type\": \"ping\", \"message\": \"3939939393\"}`\n\nConsequently, this enabled some code to trick the client and tests to be removed and for some clean up in how the ConnectionMonitor works.\n", "A_clean_body": ["summari", "thi", "pull", "request", "three", "thing", "fix", "inconsist", "actionc", "action", "cabl", "protocol", "between", "server", "client", "regard", "ping", "messag", "by", "make", "ping", "messag", "type", "instead", "identifi", "add", "welcom", "messag", "type", "which", "signal", "client", "server", "readi", "or", "ha", "re", "open", "connect", "remov", "connectionmonitor", "connect", "monitor", "as", "subscrib", "as", "thi", "no", "longer", "necessari", "when", "ping", "welcom", "messag", "identifi", "separ", "other", "inform", "ping", "messag", "wa", "be", "sent", "look", "like", "identifi", "ping", "messag", "3939939393", "wherea", "other", "messag", "were", "be", "sent", "look", "like", "type", "confirm", "subscript", "now", "ping", "look", "like", "type", "ping", "messag", "3939939393", "consequ", "thi", "enabl", "some", "code", "trick", "client", "test", "remov", "some", "clean", "up", "how", "connectionmonitor", "connect", "monitor", "work"], "B_body": "Removes notion of internal identifiers.\n", "B_clean_body": ["remov", "notion", "intern", "identifi"], "title_sim": [0.4333520714173178], "body_sim": [0.20051602772133237], "file_list_sim": 0.5, "overlap_files_len": 4, "code_sim": [0.21747656587425815, 0.41430792857318544], "location_sim": [0.3558282208588957, 0.6590909090909091], "pattern": 0, "time": 16}, {"A_title": "Add method FormBuilder#index", "A_clean_title": ["add", "method", "formbuild", "form", "builder", "index"], "B_title": "Allow accessing the current nested index for a form builder.", "B_clean_title": ["allow", "access", "current", "nest", "index", "form", "builder"], "A_body": "This is a follow-up for the idea discussed with @josevalim in this pull request https://github.com/rails/rails/pull/1189\n\nThe idea is to add a method in the form builder object to have access to the current index, useful when using fields_for iterations if you need to know the element index.\n\nHere there is another thread requesting this feature: https://github.com/rails/rails/issues/642\n", "A_clean_body": ["thi", "follow", "up", "idea", "discuss", "josevalim", "thi", "pull", "request", "http", "github", "com", "rail", "rail", "pull", "1189", "idea", "add", "method", "form", "builder", "object", "have", "access", "current", "index", "use", "when", "field", "iter", "you", "need", "know", "element", "index", "here", "there", "anoth", "thread", "request", "thi", "featur", "http", "github", "com", "rail", "rail", "issu", "642"], "B_body": "When using field_for_nested_attributes, you should be able to access the current auto-generated nested index so that you can embed it in a view for use by JS.\n", "B_clean_body": ["when", "field", "nest", "attribut", "you", "abl", "access", "current", "auto", "gener", "nest", "index", "so", "that", "you", "emb", "it", "view", "use", "by", "js"], "title_sim": [0.6760461346708985], "body_sim": [0.4505763504520468], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.7212134757508253, 0.7147129028234535], "location_sim": [0.0, 0.0], "pattern": 0, "time": 99}, {"A_title": "Fix for Hash#deep_transform_keys and Hash#deep_transform_keys!", "A_clean_title": ["fix", "hash", "deep", "transform", "key", "hash", "deep", "transform", "key"], "B_title": "Hash#deep_*_keys(!) recurse into nested arrays.", "B_clean_title": ["hash", "deep", "key", "recurs", "into", "nest", "array"], "A_body": "The methods Hash#deep_stringify_keys and Hash#deep_symbolize_keys are not working as I would expect.  They do not stringify or symbolize keys of hashes that are contained in nested arrays.  For example,  I would expect\n\n``` ruby\nhash = { 'a' => { 'b' => [ { 'c' => 3 }, 4 ] } }\n\nhash.deep_symbolize_keys\n=> { :a => { :b => [ { :c => 3 }, 4 ] } } #expected behavior\n\nhash.deep_symbolize_keys\n=> { :a => { :b => [ { 'c' => 3 }, 4 ] } } #actual behavior\n```\n\nDigging through the source it became apparent that the culprit is the method Hash#deep_transform_keys.  It does not traverse hashes that are contained in nested arrays.  I've modified both Hash#deep_transform_keys and Hash#deep_transform_keys! to traverse hashes in nested arrays and added additional test cases for these scenarios.  These changes result in the expected behavior of Hash#deep_stringify_keys and Hash#deep_symbolize_keys and their corresponding bang methods.\n", "A_clean_body": ["method", "hash", "deep", "stringifi", "key", "hash", "deep", "symbol", "key", "are", "not", "work", "as", "would", "expect", "they", "not", "stringifi", "or", "symbol", "key", "hash", "that", "are", "contain", "nest", "array", "exampl", "would", "expect", "rubi", "hash", "hash", "deep", "symbol", "key", "expect", "behavior", "hash", "deep", "symbol", "key", "actual", "behavior", "dig", "through", "sourc", "it", "becam", "appar", "that", "culprit", "method", "hash", "deep", "transform", "key", "it", "not", "travers", "hash", "that", "are", "contain", "nest", "array", "'ve", "modifi", "both", "hash", "deep", "transform", "key", "hash", "deep", "transform", "key", "travers", "hash", "nest", "array", "ad", "addit", "test", "case", "these", "scenario", "these", "chang", "result", "expect", "behavior", "hash", "deep", "stringifi", "key", "hash", "deep", "symbol", "key", "their", "correspond", "bang", "method"], "B_body": "Update of #9720.\n- Fix a typo.\n- Squash commits.\n- Rebase to recent upstream.\n", "B_clean_body": ["updat", "9720", "fix", "typo", "squash", "commit", "rebas", "recent", "upstream"], "title_sim": [0.7182215314769206], "body_sim": [0.004520490662037919], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.5353734905687964, 0.5353734905687964], "location_sim": [0.6531986531986532, 0.6531986531986532], "pattern": 0, "time": 51}, {"A_title": "Use LIMIT sql word in last with order", "A_clean_title": ["use", "limit", "sql", "word", "last", "order"], "B_title": "Always use SQL limit in Relation#last when limit argument given", "B_clean_title": ["alway", "use", "sql", "limit", "relat", "last", "when", "limit", "argument", "given"], "A_body": "Related PR: https://github.com/rails/rails/pull/2789\n\n``` ruby\npry(main)> User.order(foo: :asc).last\n  User Load (4.6ms)  SELECT `users`.* FROM `users` ORDER BY `users`.`foo` DESC LIMIT 1\n\npry(main)> User.order(foo: :asc).last(2)\n  User Load (2117.3ms)  SELECT `users`.* FROM `users` ORDER BY `users`.`foo` ASC\n```\n\nI think this behavior is incosistent and inefficient. I fixed it to:\n\n``` ruby\npry(main)> User.order(foo: :asc).last(2)\n  User Load (4.3ms)  SELECT `users`.* FROM `users` ORDER BY `users`.`foo` DESC LIMIT 2\n```\n", "A_clean_body": ["relat", "pr", "http", "github", "com", "rail", "rail", "pull", "2789", "rubi", "pri", "main", "user", "order", "foo", "asc", "last", "user", "load", "6m", "select", "user", "user", "order", "by", "user", "foo", "desc", "limit", "pri", "main", "user", "order", "foo", "asc", "last", "user", "load", "2117", "3m", "select", "user", "user", "order", "by", "user", "foo", "asc", "think", "thi", "behavior", "incosist", "ineffici", "fix", "it", "rubi", "pri", "main", "user", "order", "foo", "asc", "last", "user", "load", "3m", "select", "user", "user", "order", "by", "user", "foo", "desc", "limit"], "B_body": "Using `Relation#last` causes entire relation to be loaded into memory. \nIn most cases it is unacceptable:\n\n``` ruby\n    Topic.order(:created_at).last(2)\n      # => SELECT * FROM topics ORDER BY created_at\n```\n\nWe can still use `reverse_order` to let SQL do heavy lifting (AR is quite bad at that).\n\n``` ruby\n    Topic.order(:created_at).last(2)\n      # => SELECT * FROM topics ORDER BY created_at DESC LIMIT 2\n```\n\nUnfortunately back to 2011 in this commit 5f5527c7 it wasn't done. And 2 x unfortunately this commit added 2 tests that need to be modified now.\n\n@dmathieu do you still remember something about it?\n", "B_clean_body": ["relat", "last", "caus", "entir", "relat", "load", "into", "memori", "most", "case", "it", "unaccept", "rubi", "topic", "order", "creat", "at", "last", "select", "topic", "order", "by", "creat", "at", "we", "still", "use", "revers", "order", "let", "sql", "heavi", "lift", "ar", "quit", "bad", "at", "that", "rubi", "topic", "order", "creat", "at", "last", "select", "topic", "order", "by", "creat", "at", "desc", "limit", "unfortun", "back", "2011", "thi", "commit", "5f5527c7", "it", "wa", "n't", "done", "unfortun", "thi", "commit", "ad", "test", "that", "need", "modifi", "now", "dmathieu", "you", "still", "rememb", "someth", "about", "it"], "title_sim": [0.7293546712065112], "body_sim": [0.4870028751749478], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.20131316234632643, 0.15205201356300121], "location_sim": [0.26785714285714285, 0.33707865168539325], "pattern": 0, "time": 190}, {"A_title": "Add `validate!` method which raises an exception if the record is invalid", "A_clean_title": ["add", "valid", "method", "which", "rais", "except", "record", "invalid"], "B_title": "Add AR::Base#valid! method", "B_clean_title": ["add", "ar", ":base", "valid", "method"], "A_body": "This complements `validate` analogously to pairs like `save`/`save!`, `create`/`create!`, etc.\n", "A_clean_body": ["thi", "complement", "valid", "analog", "pair", "like", "save", "save", "creat", "creat", "etc"], "B_body": "This is helper method in case when some operations should be done on a record before saving. But they doesn't make sence if record is invalid.\n\n``` ruby\ndef create_developer_from_linkedin(parameters)\n  d = Developer.new(parameters)\n  d.valid!\n  d.import_linkedin_profile\n  d.save!\nend\n```\n", "B_clean_body": ["thi", "helper", "method", "case", "when", "some", "oper", "done", "record", "befor", "save", "but", "they", "n't", "make", "senc", "record", "invalid", "rubi", "def", "creat", "develop", "linkedin", "paramet", "develop", "new", "paramet", "valid", "import", "linkedin", "profil", "save", "end"], "title_sim": [0.4574795609112107], "body_sim": [0.4739006484030016], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.8266648571332308, 0.8266648571332308], "location_sim": [0.9014084507042254, 0.9014084507042254], "pattern": 0, "time": 532}, {"A_title": "active_support/indifferent_access: fix not raising when default_proc does", "A_clean_title": ["activ", "access", "support", "indiffer", "fix", "not", "rais", "when", "default", "proc"], "B_title": "Add default_proc copying in HashWithIndifferentAccess", "B_clean_title": ["add", "default", "proc", "copi", "hashwithindifferentaccess", "hash", "indiffer", "access"], "A_body": "Ran into this with our Rails application: `HashWithDifferentAccess`'s behaviour is not consistent with Ruby when `default_proc` is set and cloned and when it raises.\n\n``` ruby\nh = HashWithIndifferentAccess.new\nh.default_proc = proc { |h, k| raise \"OMG\" }\nh.dup\n# => RuntimeError: OMG\n```\n\n``` ruby\nh = {}\nh.default_proc = proc { |h, k| raise \"OMG\u201d }\nh.dup\n# => {}\n```\n\nThis PR fixes `#dup` and `#to_hash` to set defaults safely when `#default_proc` raises, by avoiding to call into it.\n\n\\cc @byroot @arthurnn @rafaelfranca \n", "A_clean_body": ["ran", "into", "thi", "our", "rail", "applic", "hashwithdifferentaccess", "hash", "differ", "access", "'s", "behaviour", "not", "consist", "rubi", "when", "default", "proc", "set", "clone", "when", "it", "rais", "rubi", "hashwithindifferentaccess", "new", "hash", "indiffer", "access", "default", "proc", "proc", "|h", "k|", "rais", "omg", "dup", "runtimeerror", "runtim", "error", "omg", "rubi", "default", "proc", "proc", "|h", "k|", "rais", "omg", "dup", "thi", "pr", "fix", "dup", "hash", "set", "default", "safe", "when", "default", "proc", "rais", "by", "avoid", "call", "into", "it", "cc", "byroot", "arthurnn", "rafaelfranca"], "B_body": "Add default_proc copying for `HashWithIndifferentAccess.new_from_hash_copying_default`, `HashWithIndifferentAccess#dup`, `HashWithIndifferentAccess#to_hash`\n", "B_clean_body": ["add", "default", "proc", "copi", "hashwithindifferentaccess", "hash", "indiffer", "access", "new", "hash", "copi", "default", "hashwithindifferentaccess", "hash", "indiffer", "access", "dup", "hashwithindifferentaccess", "hash", "indiffer", "access", "hash"], "title_sim": [0.5987767943666767], "body_sim": [0.5311135167220951], "file_list_sim": 0.75, "overlap_files_len": 3, "code_sim": [0.8982422690910594, 0.928849145128827], "location_sim": [0.35526315789473684, 0.35526315789473684], "pattern": 0, "time": 658}, {"A_title": "Fixing #8196, Http auth token breaks with equals sign", "A_clean_title": ["fix", "8196", "http", "auth", "token", "break", "equal", "sign"], "B_title": "Http token parser bug", "B_clean_title": ["http", "token", "parser", "bug"], "A_body": "Changed the regex to split the key value pairs from the\nrelevant header so that it doesn't break when the value contains '='\ncharacters\n", "A_clean_body": ["chang", "regex", "split", "key", "valu", "pair", "relev", "header", "so", "that", "it", "n't", "break", "when", "valu", "contain", "charact"], "B_body": "Fixing a problem detailed in #7311. Not ready to pull until that discussion is resolved.\n", "B_clean_body": ["fix", "problem", "detail", "7311", "not", "readi", "pull", "until", "that", "discuss", "resolv"], "title_sim": [0.5056847195183019], "body_sim": [0.11037355185579256], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.23188980978859944, 0.18426635541843356], "location_sim": [0.3028169014084507, 0.3233082706766917], "pattern": -1, "time": 95}, {"A_title": "Fix parsed token value with header `Authorization token=`.", "A_clean_title": ["fix", "pars", "token", "valu", "header", "author", "token="], "B_title": "Fix an issue with malformed HTTP headers in token_and_options.", "B_clean_title": ["fix", "issu", "malform", "http", "header", "token", "option"], "A_body": "Related issue: #14846\n\nWith header `Authorization: Token token=`, we get token value as `nil` instead of `token`.\n\nThe current implementation with `params.shift.last` or `param.last` assume `params` or `param` is a two-elements array. But with malformed request, they are not, so instead of `last`, we should use `[1]`\n\ncc @simonbnrd @robin850\n", "A_clean_body": ["relat", "issu", "14846", "header", "author", "token", "token=", "we", "get", "token", "valu", "as", "nil", "instead", "token", "current", "implement", "param", "shift", "last", "or", "param", "last", "assum", "param", "or", "param", "two", "element", "array", "but", "malform", "request", "they", "are", "not", "so", "instead", "last", "we", "use", "cc", "simonbnrd", "robin850"], "B_body": "Hello,\n\nThe following PR solves the issue #14846.\n\nPlease feel free to give me some feedback on the PR, this is my first attempt to contribute. :+1: \n", "B_clean_body": ["hello", "follow", "pr", "solv", "issu", "14846", "pleas", "feel", "free", "give", "me", "some", "feedback", "pr", "thi", "my", "first", "attempt", "contribut", "+1"], "title_sim": [0.5630882805027395], "body_sim": [0.07711858743659547], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.8467270632136673, 0.8467270632136673], "location_sim": [0.74, 0.74], "pattern": 1, "time": 50}, {"A_title": "After find-via-reload, the record is not new", "A_clean_title": ["after", "find", "via", "reload", "record", "not", "new"], "B_title": "reload with new record which is not persisted should throw error fix the issue #12101", "B_clean_title": ["reload", "new", "record", "which", "not", "persist", "throw", "error", "fix", "issu", "12101"], "A_body": "Fixes #12101\n", "A_clean_body": ["fix", "12101"], "B_body": "reload with new record which is not persisted should throw error.\n\nfix the issue https://github.com/rails/rails/issues/12101\n\nThanks to @rafaelfranca \n", "B_clean_body": ["reload", "new", "record", "which", "not", "persist", "throw", "error", "fix", "issu", "http", "github", "com", "rail", "rail", "issu", "12101", "thank", "rafaelfranca"], "title_sim": [0.5220067297495575], "body_sim": [0.2280525885260101], "file_list_sim": 0.16666666666666666, "overlap_files_len": 1, "code_sim": [0.06940269059445024, 0.1154795290269936], "location_sim": [0.0, 0.0], "pattern": 1, "time": 304}, {"A_title": "Load only needed records on ActiveRecord::Relation#inspect", "A_clean_title": ["load", "onli", "need", "record", "activerecord", "activ", "record", ":relat", "inspect"], "B_title": "Avoid loading all records in Relation#inspect", "B_clean_title": ["avoid", "load", "all", "record", "relat", "inspect"], "A_body": "Instead of loading all records and returning only a subset of those, just load the records as needed.\r\n\r\nThe original behavior could be bad when someone types `User.where(...)` on console and accidentally presses enter before they finish, causing a lot of records to be queried and loaded, although only 10 is shown.\r\n\r\nTo query and inspect all, we can use `to_a` instead, e.g. `User.all.to_a.inspect`.\r\n\r\nFixes #25537.", "A_clean_body": ["instead", "load", "all", "record", "return", "onli", "subset", "those", "just", "load", "record", "as", "need", "origin", "behavior", "could", "bad", "when", "someon", "type", "user", "where", "consol", "accident", "press", "enter", "befor", "they", "finish", "caus", "lot", "record", "queri", "load", "although", "onli", "10", "shown", "queri", "inspect", "all", "we", "use", "instead", "user", "all", "inspect", "fix", "25537"], "B_body": "Calling `#records` without a `#limit` can potentially put a lot of pressure on resources of the running machine, as seen in charliesome/better_errors#72.  Instead, I apply the same limit here in a way that avoids unnecessary loading of all records.\n", "B_clean_body": ["call", "record", "without", "limit", "potenti", "put", "lot", "pressur", "resourc", "run", "machin", "as", "seen", "error", "charliesom", "better", "72", "instead", "appli", "same", "limit", "here", "way", "that", "avoid", "unnecessari", "load", "all", "record"], "title_sim": [0.4150560747425264], "body_sim": [0.3124411867133543], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.39352898056613367, 0.39352898056613367], "location_sim": [0.25, 0.25], "pattern": -1, "time": 504}, {"A_title": "Ensure HashWithIndifferentAccess#select is consistent with Hash.select", "A_clean_title": ["ensur", "hashwithindifferentaccess", "hash", "indiffer", "access", "select", "consist", "hash", "select"], "B_title": "ActiveSupport::HashWithIndifferentAccess select and reject should return enumerator if called without block", "B_clean_title": ["activesupport", "activ", "support", ":hashwithindifferentaccess", ":hash", "indiffer", "access", "select", "reject", "return", "enumer", "call", "without", "block"], "A_body": "- Ensure HashWithIndifferentAccess#select is consistent with Hash.select\n  with or without block\n\nThis will ensure HashWithIndifferentAccess#select is consistent with Hash.select\nwith or without block.\n", "A_clean_body": ["ensur", "hashwithindifferentaccess", "hash", "indiffer", "access", "select", "consist", "hash", "select", "or", "without", "block", "thi", "will", "ensur", "hashwithindifferentaccess", "hash", "indiffer", "access", "select", "consist", "hash", "select", "or", "without", "block"], "B_body": "[According to Ruby spec](http://ruby-doc.org/core-2.2.0/Hash.html#method-i-select) `select` and `reject` should return enumerator if called without block. Until now if no block was given `HashWithIndifferentAccess` returned `self` instead of enumerator - this commit fixes such behavior.\n\nFixes #20095\n", "B_clean_body": ["accord", "rubi", "spec", "http", "rubi", "doc", "html", "org", "core", "hash", "method", "select", "select", "reject", "return", "enumer", "call", "without", "block", "until", "now", "no", "block", "wa", "given", "hashwithindifferentaccess", "hash", "indiffer", "access", "return", "self", "instead", "enumer", "thi", "commit", "fix", "such", "behavior", "fix", "20095"], "title_sim": [0.19002778178691326], "body_sim": [0.5641436550599823], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.35289358059747333, 0.0], "location_sim": [0.3076923076923077, 1.0], "pattern": 0, "time": 6}, {"A_title": "Don't raise on out-of-range datetimes passed by a user", "A_clean_title": ["n't", "rais", "out", "rang", "datetim", "pass", "by", "user"], "B_title": "Don't raise when writing an attribute with and out of range time", "B_clean_title": ["n't", "rais", "when", "write", "attribut", "out", "rang", "time"], "A_body": "Currently out-of-range user-entered datetimes cause an argument error:\n\n``` ruby\ntask = Task.new(start_at: \"2014-07-01T24:59:59GMT\")   #=> ArgumentError\n```\n\nIn contrast, when _really_ bad data is entered the error is caught and the attribute is set to `nil`, \n\n``` ruby\ntask = Task.new(start_at: \"rubbish\")\ntaks.start_at      #=> nil\n```\n\nThis PR catches the argument error to make the above two scenarios consistent.\n", "A_clean_body": ["current", "out", "rang", "user", "enter", "datetim", "caus", "argument", "error", "rubi", "task", "task", "new", "start", "at", "2014", "07", "01t24:59:59gmt", "argumenterror", "argument", "error", "contrast", "when", "realli", "bad", "data", "enter", "error", "caught", "attribut", "set", "nil", "rubi", "task", "task", "new", "start", "at", "rubbish", "tak", "start", "at", "nil", "thi", "pr", "catch", "argument", "error", "make", "abov", "two", "scenario", "consist"], "B_body": "The following code will raise an `ArgumentError` because of an out of range time:\n\n``` ruby\nModel.new(:created_at => '2010-33-22T09:30:25Z')\n```\n\nHowever, this won't raise, this will set `created_at` to nil instead :\n\n``` ruby\nModel.new(:created_at => 'Foobar')\n```\n\nI think the first example should act as the second one, hence this PR.\n\nWhat do you think ?\n", "B_clean_body": ["follow", "code", "will", "rais", "argumenterror", "argument", "error", "becaus", "out", "rang", "time", "rubi", "model", "new", "creat", "at", "'2010", "33", "22t09:30:25z", "howev", "thi", "wo", "n't", "rais", "thi", "will", "set", "creat", "at", "nil", "instead", "rubi", "model", "new", "creat", "at", "'foobar", "think", "first", "exampl", "act", "as", "second", "one", "henc", "thi", "pr", "what", "you", "think"], "title_sim": [0.5211706523910966], "body_sim": [0.5129292485645619], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.2473215186740299, 1.0000000000000002], "location_sim": [0.0, 0.0], "pattern": 0, "time": 496}, {"A_title": "`pluck` should use `records` (`load_target`) when `loaded?` is true", "A_clean_title": ["pluck", "use", "record", "load", "target", "when", "load", "true"], "B_title": "Do not call db in pluck  when collection is already loaded", "B_clean_title": ["not", "call", "db", "pluck", "when", "collect", "alreadi", "load"], "A_body": "", "A_clean_body": [], "B_body": "Hi. \n\nI am more then sure this is not a bug, but probably somebody will tell me how to do it in correct way.\n### What do I have\n\nIn REST controller I try to show all models of specific type. One method of this model is dependent on has_many relationship\n\n```\n  def my_method\n    has_many_relation.pluck(:my_method)\n  end\n```\n\nSo, I try to preload this relationship in controller\n\n```\ndef index\n  render json: Model.include(:has_many_relation)\nend\n```\n\nEager loading works but pluck does not care about it, so I came with this hack\n\n```\nhas_many_relation.loaded? ? offers.map(&:has_many_relation) : offers.pluck(:has_many_relation)\n```\n\nThis works but looks like dirty hack. PR fix works but of course it is not correct.\n\nWe also notice that pluck itself has more of less common functionality\n\n```\n    def pluck(*column_names)\n      if loaded? && (column_names.map(&:to_s) - @klass.attribute_names - @klass.attribute_aliases.keys).empty?\n        return @records.pluck(*column_names)\n      end\n```\n\nbut it does not work because it is different loaded? and here it is false in case of my eager load\n\nQuestion is \"How to do it in correct way?\"\n", "B_clean_body": ["hi", "am", "more", "then", "sure", "thi", "not", "bug", "but", "probabl", "somebodi", "will", "tell", "me", "how", "it", "correct", "way", "what", "have", "rest", "control", "tri", "show", "all", "model", "specif", "type", "one", "method", "thi", "model", "depend", "ha", "mani", "relationship", "def", "my", "method", "pluck", "ha", "mani", "relat", "my", "method", "end", "so", "tri", "preload", "thi", "relationship", "control", "def", "index", "render", "json", "model", "includ", "ha", "mani", "relat", "end", "eager", "load", "work", "but", "pluck", "not", "care", "about", "it", "so", "came", "thi", "hack", "load", "ha", "mani", "relat", "offer", "map", "ha", "mani", "relat", "offer", "pluck", "ha", "mani", "relat", "thi", "work", "but", "look", "like", "dirti", "hack", "pr", "fix", "work", "but", "cours", "it", "not", "correct", "we", "also", "notic", "that", "pluck", "itself", "ha", "more", "less", "common", "function", "def", "pluck", "*column", "name", "load", "map", "column", "name", "klass", "attribut", "name", "klass", "key", "attribut", "alias", "empti", "return", "record", "pluck", "*column", "name", "end", "but", "it", "not", "work", "becaus", "it", "differ", "load", "here", "it", "fals", "case", "my", "eager", "load", "question", "how", "it", "correct", "way"], "title_sim": [0.36050012818981514], "body_sim": [0.0], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.31609680144732666, 0.22933666378196654], "location_sim": [0.0, 0.0], "pattern": 0, "time": 6}, {"A_title": "Fix GH #5063. Support include_root_in_json for ActiveResource properly.", "A_clean_title": ["fix", "gh", "5063", "support", "includ", "root", "json", "activeresourc", "activ", "resourc", "properli"], "B_title": "Ensure ActiveResource serialization obeys ActiveResource::Base.include_root_in_json", "B_clean_title": ["ensur", "activeresourc", "activ", "resourc", "serial", "obey", "activeresourc", "activ", "resourc", ":base", "includ", "root", "json"], "A_body": "I also removed redundant assigns. Because the default value of include_root_in_json is true.\n\nCloses #5063.\n", "A_clean_body": ["also", "remov", "redund", "assign", "becaus", "default", "valu", "includ", "root", "json", "true", "close", "5063"], "B_body": "The root element in JSON serialization in Rails 3.2.1 is always present, regardless of the setting of `ActiveResource::Base.include_root_in_json`. This fix makes `ActiveResource::Base#to_json` obey the setting, and includes a test to make sure the setting works.\n", "B_clean_body": ["root", "element", "json", "serial", "rail", "alway", "present", "regardless", "set", "activeresourc", "activ", "resourc", ":base", "includ", "root", "json", "thi", "fix", "make", "activeresourc", "activ", "resourc", ":base", "json", "obey", "set", "includ", "test", "make", "sure", "set", "work"], "title_sim": [0.6193593126942214], "body_sim": [0.34017141085590846], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.9030417059494601, 0.9030417059494601], "location_sim": [0.6666666666666666, 0.6666666666666666], "pattern": -1, "time": 15}, {"A_title": "Reverse order", "A_clean_title": ["revers", "order"], "B_title": "Fixe  #reverse_order incorrect behavior ", "B_clean_title": ["fix", "revers", "order", "incorrect", "behavior"], "A_body": "Current implementation of `reverse_order` will produce invalid SQL from any valid `order_values` if they contain either:\n- NULLS FIRST or LAST, or\n- an expression with a comma (either as an argument separator or part of a string literal)\n\nThis PR fixes this. The first case is handled with dealing more carefully with the last words, the second case is dealt by parsing the SQL string if necessary so it is split correctly.\n\nNote: while the examples given in the tests are simplistic, I discovered this issue when trying to reverse actual orders (by geographical distance).\n\nThanks\n", "A_clean_body": ["current", "implement", "revers", "order", "will", "produc", "invalid", "sql", "ani", "valid", "order", "valu", "they", "contain", "either", "null", "first", "or", "last", "or", "express", "comma", "either", "as", "argument", "separ", "or", "part", "string", "liter", "thi", "pr", "fix", "thi", "first", "case", "handl", "deal", "more", "care", "last", "word", "second", "case", "dealt", "by", "pars", "sql", "string", "necessari", "so", "it", "split", "correctli", "note", "while", "exampl", "given", "test", "are", "simplist", "discov", "thi", "issu", "when", "tri", "revers", "actual", "order", "by", "geograph", "distanc", "thank"], "B_body": "Fixed incorrect behavior in situations when the string containing function comes in method order. for example SUBSTR()\n\n```\n  Sybase:     SUBSTR(field, 1, 10)\n  MySql:      SUBSTR(field, 1, 10)\n  Postgresql: SUBSTR(field, 1, 10)\n  Sqlite:     SUBSTR(field, 1, 10)\n  Oracle:     SUBSTR(field, 1, 10)\n  DB2:        SUBSTR(field, 1, 10)\n```\n\n  \u201c,\u201d was used as means for dividing fields where sorting takes place, as a result of that invalid sql was generated, example:\n\n`Post.order('SUBSTR(name, 1, 10)').reverse_order.to_sql`\n#### expected:\n\n`SELECT \"posts\".* FROM \"posts\"   ORDER BY SUBSTR(name, 1, 10) DESC`\n#### got\n\n`SELECT \"posts\".* FROM \"posts\"   ORDER BY SUBSTR(name DESC, 1 DESC, 10) DESC`\n\nThis fixes the incorrect behavior. for that purpose i added private method (#split_order_expressions) that split only by expected \",\"  Other behavior was not affected.\n", "B_clean_body": ["fix", "incorrect", "behavior", "situat", "when", "string", "contain", "function", "come", "method", "order", "exampl", "substr", "sybas", "substr", "field", "10", "mysql", "my", "sql", "substr", "field", "10", "postgresql", "substr", "field", "10", "sqlite", "substr", "field", "10", "oracl", "substr", "field", "10", "db2", "substr", "field", "10", "wa", "use", "as", "mean", "divid", "field", "where", "sort", "take", "place", "as", "result", "that", "invalid", "sql", "wa", "gener", "exampl", "post", "order", "'substr", "name", "10", "revers", "order", "sql", "expect", "select", "post", "post", "order", "by", "substr", "name", "10", "desc", "got", "select", "post", "post", "order", "by", "substr", "name", "desc", "desc", "10", "desc", "thi", "fix", "incorrect", "behavior", "that", "purpos", "ad", "privat", "method", "split", "order", "express", "that", "split", "onli", "by", "expect", "other", "behavior", "wa", "not", "affect"], "title_sim": [0.7805725673795847], "body_sim": [0.36135957651082373], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.4620698304895696, 0.1220438220664571], "location_sim": [0.0, 0.0], "pattern": 0, "time": 807}, {"A_title": "Simplify and alias ActiveModel::Errors methods where possible", "A_clean_title": ["simplifi", "alia", "activemodel", "activ", "model", ":error", "method", "where", "possibl"], "B_title": "Added / Edited ActiveModel::Errors test cases.", "B_clean_title": ["ad", "edit", "activemodel", "activ", "model", ":error", "test", "case"], "A_body": "", "A_clean_body": [], "B_body": "- Added test cases to demo the difference between `include?` and `empty?`\n- Make `size` and `count` behave consistently.\n", "B_clean_body": ["ad", "test", "case", "demo", "differ", "between", "includ", "empti", "make", "size", "count", "behav", "consist"], "title_sim": [0.41687416073943595], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.03333556604437779, 0.03333556604437779], "location_sim": [0.33587786259541985, 0.33587786259541985], "pattern": 0, "time": 601}, {"A_title": "Fix includes on association with a scope", "A_clean_title": ["fix", "includ", "associ", "scope"], "B_title": "Fix eager loading a has_many association with a join and order clause", "B_clean_title": ["fix", "eager", "load", "ha", "mani", "associ", "join", "order", "claus"], "A_body": "Fix includes on association with a scope containing joins along with conditions on the joined assoiciation.\n\nCurrently when you try to call includes on an association with a scope containing joins in it, joins will not be included in the query.\n\nThis is a fix for that issue.\n", "A_clean_body": ["fix", "includ", "associ", "scope", "contain", "join", "along", "condit", "join", "assoici", "current", "when", "you", "tri", "call", "includ", "associ", "scope", "contain", "join", "it", "join", "will", "not", "includ", "queri", "thi", "fix", "that", "issu"], "B_body": "A has_many association ordering on a joined table would omit the join\nwhen eager loaded.\n\n```\nclass Character < ActiveRecord::Base\n  has_many :appearances, -> { joins(:books).order(\"books.published_on\") }\nend\n\nCharacter.where(name: \"Gandalf\").includes(:appearances).first\n=> SQLite3::SQLException: no such column: books.published_on:\n  SELECT \"appearances\".* FROM \"appearances\"\n  WHERE \"appearances\".\"character_id\" IN (1)\n  ORDER BY \"books\".\"published_on\"\n```\n", "B_clean_body": ["ha", "mani", "associ", "order", "join", "tabl", "would", "omit", "join", "when", "eager", "load", "class", "charact", "activerecord", "activ", "record", ":base", "ha", "mani", "appear", "join", "book", "order", "book", "publish", "end", "charact", "where", "name", "gandalf", "includ", "appear", "first", "sqlite3", "sq", "lite3", ":sqlexcept", ":sql", "except", "no", "such", "column", "book", "publish", "select", "appear", "appear", "where", "appear", "charact", "id", "order", "by", "book", "publish"], "title_sim": [0.22604125292786725], "body_sim": [0.3683974453673399], "file_list_sim": 0.2857142857142857, "overlap_files_len": 2, "code_sim": [0.38227251946392105, 0.30750804360464407], "location_sim": [0.49473684210526314, 1.0], "pattern": 0, "time": 487}, {"A_title": "adjust api_behavior to display updated data after a patch/put request", "A_clean_title": ["adjust", "api", "behavior", "display", "updat", "data", "after", "patch", "put", "request"], "B_title": "Respond to PUT/PATCH API request with :ok", "B_clean_title": ["respond", "put", "patch", "api", "request", "ok"], "A_body": "Hi! This is not a brand new request: sometime last year a similar thing was proposed, but at the time it perhaps made sense to leave rails the way it was. I'd argue that, with some recent trends in application development, it might now be worthwhile to revisit the issue.\n\nNamely, at the moment, an API update (PATCH/PUT request) yields :no_content. This is technically a correct approach according to Roy Fielding's HTTP Protocols (http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) and as pointed out by Steve Klabnik thusly in March 2013:\n\n\"If an existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate successful completion of the request.\"\n\nAt the moment, we see a 204 response in Rails. Again, technically correct. However, the past year and a half have heralded a rise in the use of a SOA approach to software engineering, especially in the Rails application community. Given the increase in the sheer number of APIs, the time spent editing APIs, and the instances of updates made through APIs that accompany this trend, we want to make it as convenient as possible in Rails for folks to develop, use, and read APIs\u2014including checking their work. By changing the api_behavior method to show the updated data (200 request) after data is updated through an API, rather than a no_content (204 request), we save API users the step of manually checking the updated data in their rails console or database editor to make sure it's correct. This way, one doesn't need to use a .jbuilder view, other view, or series of code lines in their API to display updated data: the default respond_with command will just do it for them.\n\nA note: I had the added line respond to both PATCH and PUT, just in case, but I can also imagine why you might want it to just be PATCH at this point. \n", "A_clean_body": ["hi", "thi", "not", "brand", "new", "request", "sometim", "last", "year", "similar", "thing", "wa", "propos", "but", "at", "time", "it", "perhap", "made", "sens", "leav", "rail", "way", "it", "wa", "'d", "argu", "that", "some", "recent", "trend", "applic", "develop", "it", "might", "now", "worthwhil", "revisit", "issu", "name", "at", "moment", "api", "updat", "patch", "put", "request", "yield", "no", "content", "thi", "technic", "correct", "approach", "accord", "roy", "field", "'s", "http", "protocol", "http", "w3", "sec9", "html", "www", "org", "protocol", "rfc2616", "rfc2616", "as", "point", "out", "by", "steve", "klabnik", "thusli", "march", "2013", "exist", "resourc", "modifi", "either", "200", "ok", "or", "204", "no", "content", "respons", "code", "sent", "indic", "success", "complet", "request", "at", "moment", "we", "see", "204", "respons", "rail", "again", "technic", "correct", "howev", "past", "year", "half", "have", "herald", "rise", "use", "soa", "approach", "softwar", "engin", "especi", "rail", "applic", "commun", "given", "increas", "sheer", "number", "api", "ap", "time", "spent", "edit", "api", "ap", "instanc", "updat", "made", "through", "api", "ap", "that", "accompani", "thi", "trend", "we", "want", "make", "it", "as", "conveni", "as", "possibl", "rail", "folk", "develop", "use", "read", "apis\u2014includ", "ap", "is\u2014includ", "check", "their", "work", "by", "chang", "api", "behavior", "method", "show", "updat", "data", "200", "request", "after", "data", "updat", "through", "api", "rather", "than", "no", "content", "204", "request", "we", "save", "api", "user", "step", "manual", "check", "updat", "data", "their", "rail", "consol", "or", "databas", "editor", "make", "sure", "it", "'s", "correct", "thi", "way", "one", "n't", "need", "use", "jbuilder", "view", "other", "view", "or", "seri", "code", "line", "their", "api", "display", "updat", "data", "default", "respond", "command", "will", "just", "it", "them", "note", "had", "ad", "line", "respond", "both", "patch", "put", "just", "case", "but", "also", "imagin", "whi", "you", "might", "want", "it", "just", "patch", "at", "thi", "point"], "B_body": "This commits changes the behavior of `respond_to` for successful PUT/PATCH\nrequests on format associated with APIs, such as :xml and :json.\n\nPreviously, `respond_to` would just return :no_content (204) and no body.\nAfter this commit, it returns :ok (200) and the entire updated object as\nthe response body.\n\nThe rationale behind this commit is that a PUT, POST or PATCH call may make\nmodifications to fields of the underlying resource that weren't part of the\nprovided parameters (for example: created_at or updated_at timestamps).\n\nThis commit prevents an API consumer from having to hit the API again for an\nupdated representation. Rails already provides the created representation after\na POST, so it is coherent to have the same behavior on PUT and PATCH.\n\nSee discussion at https://github.com/rails/rails/issues/12096\n", "B_clean_body": ["thi", "commit", "chang", "behavior", "respond", "success", "put", "patch", "request", "format", "associ", "api", "ap", "such", "as", "xml", "json", "previous", "respond", "would", "just", "return", "no", "content", "204", "no", "bodi", "after", "thi", "commit", "it", "return", "ok", "200", "entir", "updat", "object", "as", "respons", "bodi", "rational", "behind", "thi", "commit", "that", "put", "post", "or", "patch", "call", "may", "make", "modif", "field", "underli", "resourc", "that", "were", "n't", "part", "provid", "paramet", "exampl", "creat", "at", "or", "updat", "at", "timestamp", "thi", "commit", "prevent", "api", "consum", "have", "hit", "api", "again", "updat", "represent", "rail", "alreadi", "provid", "creat", "represent", "after", "post", "so", "it", "coher", "have", "same", "behavior", "put", "patch", "see", "discuss", "at", "http", "github", "com", "rail", "rail", "issu", "12096"], "title_sim": [0.5406968049990897], "body_sim": [0.6149378743408815], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.5782583980176563, 0.8149284685785924], "location_sim": [0.32, 1.0], "pattern": 1, "time": 320}, {"A_title": "Add test cases for `safe_constantize`", "A_clean_title": ["add", "test", "case", "safe", "constant"], "B_title": "safe_constantize - Added Object scoped missing test cases", "B_clean_title": ["safe", "constant", "ad", "object", "scope", "miss", "test", "case"], "A_body": "The issue was fixed by 7a41295, but there are no tests covering it.\n\nCloses #15570\n", "A_clean_body": ["issu", "wa", "fix", "by", "7a41295", "but", "there", "are", "no", "test", "cover", "it", "close", "15570"], "B_body": "For more details please see #15570\n\nCloses #15570\n", "B_clean_body": ["more", "detail", "pleas", "see", "15570", "close", "15570"], "title_sim": [0.6327779775551607], "body_sim": [0.3303455305926281], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0000000000000002, 1.0000000000000002], "location_sim": [1.0, 1.0], "pattern": 1, "time": 2}, {"A_title": "ActionMailer: support overriding template name in multipart", "A_clean_title": ["actionmail", "action", "mailer", "support", "overrid", "templat", "name", "multipart"], "B_title": "ActionMailer::Base#mail should allow overriding template_name for default template rendering when a block is passed", "B_clean_title": ["actionmail", "action", "mailer", ":base", "mail", "allow", "overrid", "templat", "name", "default", "templat", "render", "when", "block", "pass"], "A_body": "Implicit rendering in multipart blocks now also uses the template name from the options hash instead of always using the action name.\n\nSo you can now write\n\n```\nmail(template_name: template_name) do |format|\n  format.text\n  format.html\nend\n```\n", "A_clean_body": ["implicit", "render", "multipart", "block", "now", "also", "use", "templat", "name", "option", "hash", "instead", "alway", "action", "name", "so", "you", "now", "write", "mail", "templat", "name", "templat", "name", "|format|", "format", "text", "format", "html", "end"], "B_body": "", "B_clean_body": [], "title_sim": [0.7867840223044308], "body_sim": [0.0], "file_list_sim": 0.4, "overlap_files_len": 2, "code_sim": [0.6673088805314923, 0.30937711980588284], "location_sim": [0.3217391304347826, 0.6271186440677966], "pattern": 0, "time": 333}, {"A_title": "Add support for Postgresql datatype jsonb", "A_clean_title": ["add", "support", "postgresql", "datatyp", "jsonb"], "B_title": "PostgreSQL jsonb support", "B_clean_title": ["postgresql", "postgr", "sql", "jsonb", "support"], "A_body": "Hello,\n\nWhile working on a [lightning talk](https://gist.github.com/pcreux/cd6efb47f8bc439054bb) on the [postgresql datatype jsonb](http://www.postgresql.org/docs/9.4/static/datatype-json.html) I added support for jsonb to active record.\n\njsonb is available in Postgresql 9.4 beta that has been released on May 15, 2014.\n", "A_clean_body": ["hello", "while", "work", "lightn", "talk", "http", "github", "gist", "com", "pcreux", "cd6efb47f8bc439054bb", "postgresql", "datatyp", "jsonb", "http", "postgresql", "json", "html", "www", "org", "doc", "static", "datatyp", "ad", "support", "jsonb", "activ", "record", "jsonb", "avail", "postgresql", "beta", "that", "ha", "been", "releas", "may", "15", "2014"], "B_body": "Adding support to ActiveRecord for jsonb column type when using Postgresql 9.4+\n\nFor details about Json vs Jsonb implementations:\n\nhttp://www.postgresql.org/docs/9.4/static/datatype-json.html   \n\nFor ease of testing, I've setup a Vagrant box with PostgreSQL 9.4 Beta 1 & a Ruby 2.1 environment ready to go if that's your thing:\n\nvagrant init chris-teague/centos-postgresql94-ruby21   \n", "B_clean_body": ["ad", "support", "activerecord", "activ", "record", "jsonb", "column", "type", "when", "postgresql", "4+", "detail", "about", "json", "vs", "jsonb", "implement", "http", "postgresql", "json", "html", "www", "org", "doc", "static", "datatyp", "eas", "test", "'ve", "setup", "vagrant", "box", "postgresql", "postgr", "sql", "beta", "rubi", "environ", "readi", "go", "that", "'s", "your", "thing", "vagrant", "init", "chri", "postgresql94", "ruby21", "teagu", "cento"], "title_sim": [0.7448295095623892], "body_sim": [0.7097827666486891], "file_list_sim": 0.23076923076923078, "overlap_files_len": 3, "code_sim": [0.5364649558531831, 0.5914324361580766], "location_sim": [0.3805668016194332, 0.7430830039525692], "pattern": 1, "time": 38}, {"A_title": "warning removed: mismatched indentations", "A_clean_title": ["warn", "remov", "mismatch", "indent"], "B_title": "Fix warning: mismatched indentations at 'end' with 'class' at 2", "B_clean_title": ["fix", "warn", "mismatch", "indent", "at", "'end", "'class", "at"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.7258231935590789], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Fixes build 4008.1", "A_clean_title": ["fix", "build", "4008"], "B_title": "Fixes possible backward incompatibility", "B_clean_title": ["fix", "possibl", "backward", "incompat"], "A_body": "This fixex build 4008.1[1] because of the changes made in\n\n4001835db00ce44cb75bca33ec02cd76b8ccc790\n\n[1] http://travis-ci.org/#!/rails/rails/jobs/1429671\n", "A_clean_body": ["thi", "fixex", "build", "4008", "becaus", "chang", "made", "4001835db00ce44cb75bca33ec02cd76b8ccc790", "http", "travi", "ci", "org", "rail", "rail", "job", "1429671"], "B_body": "", "B_clean_body": [], "title_sim": [0.17168091620139334], "body_sim": [0.0], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "Added `reverse_merge`/`reverse_merge!` to AC::Parameters:", "A_clean_title": ["ad", "revers", "merg", "revers", "merg", "ac", ":paramet"], "B_title": "add ActionController::Parameters#reverse_merge", "B_clean_title": ["add", "actioncontrol", "action", "control", ":paramet", "revers", "merg"], "A_body": "Hey guys \ud83d\udc4b ,\r\n\r\nAdded `reverse_merge`/`reverse_merge!` to AC::Parameters:\r\n\r\n- This PR adds the `reverse_merge` and `reverse_merge!` methods to `ActionController::Parameters`\r\n- Fixes #28353\r\n\r\nQ | A\r\n--| --\r\nBranch | Master\r\nFixes | #28353\r\nNew feature? | yes\r\nTests pass?\t| \r\nBC breaks? | no\r\n", "A_clean_body": ["hey", "guy", "ad", "revers", "merg", "revers", "merg", "ac", ":paramet", "thi", "pr", "add", "revers", "merg", "revers", "merg", "method", "actioncontrol", "action", "control", ":paramet", "fix", "28353", "branch", "master", "fix", "28353", "new", "featur", "ye", "test", "pass", "bc", "break", "no"], "B_body": "### Summary\r\n\r\nCurrenty, ActionController::Parameters dosen't have #reverse_merge and #reverse_merge!.\r\n\r\nBy using reverse_merge, you can write behaviors like default values.\r\n\r\n```ruby\r\n# before\r\nparams[:age] = 30 unless params[:age]\r\n\r\n# after\r\nparams.reverse_merge(age: 30)\r\n```\r\n\r\n", "B_clean_body": ["summari", "currenti", "actioncontrol", "action", "control", ":paramet", "dose", "n't", "have", "revers", "merg", "revers", "merg", "by", "revers", "merg", "you", "write", "behavior", "like", "default", "valu", "rubi", "befor", "param", "age", "30", "unless", "param", "age", "after", "param", "revers", "merg", "age", "30"], "title_sim": [0.6535755279416632], "body_sim": [0.4855110199191479], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.9463310431099886, 0.9463310431099886], "location_sim": [0.6793893129770993, 0.6793893129770993], "pattern": 0, "time": 100}, {"A_title": "Fix stated default value for escape_html_entities_in_json", "A_clean_title": ["fix", "state", "default", "valu", "escap", "html", "entiti", "json"], "B_title": "Fix default value in guide [ci skip]", "B_clean_title": ["fix", "default", "valu", "guid", "ci", "skip"], "A_body": "With a fresh Rails 4.2.6 app, the effective value of this configuration is true, whereas the documentation says it is false:\n\n``` bash\n$ rails -v\nRails 4.2.6\n\n$ rails new foobar\n...\n\n$ cd foobar\n\n$ rails console\nLoading development environment (Rails 4.2.6)\n>> Rails.application.config.active_support.escape_html_entities_in_json\n=> nil\n>> ActiveSupport.escape_html_entities_in_json\n=> true\n>> x = { \"foo & <>\" => \"foo & <>\" }\n=> {\"foo & <>\"=>\"foo & <>\"}\n>> puts x.to_json\n{\"foo \\u0026 \\u003c\\u003e\":\"foo \\u0026 \\u003c\\u003e\"}\n=> nil\n>> ActiveSupport.escape_html_entities_in_json = false\n=> false\n>> puts x.to_json\n{\"foo & <>\":\"foo & <>\"}\n=> nil\n```\n\nThe default value for this is defined here:\nhttps://github.com/rails/rails/blob/4-2-stable/activesupport/lib/active_support/json/encoding.rb#L172\n", "A_clean_body": ["fresh", "rail", "app", "effect", "valu", "thi", "configur", "true", "wherea", "document", "say", "it", "fals", "bash", "rail", "rail", "rail", "new", "foobar", "cd", "foobar", "rail", "consol", "load", "develop", "environ", "rail", "rail", "applic", "config", "activ", "support", "escap", "html", "entiti", "json", "nil", "activesupport", "activ", "support", "escap", "html", "entiti", "json", "true", "foo", "foo", "foo", "foo", "put", "json", "foo", "u0026", "u003c", "u003", "foo", "u0026", "u003c", "u003", "nil", "activesupport", "activ", "support", "escap", "html", "entiti", "json", "fals", "fals", "put", "json", "foo", "foo", "nil", "default", "valu", "thi", "defin", "here", "http", "rb", "github", "com", "rail", "rail", "blob", "stabl", "activesupport", "lib", "activ", "support", "json", "encod", "l172"], "B_body": "", "B_clean_body": [], "title_sim": [0.31409889327398754], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 382}, {"A_title": "Make dependencies.rb add a name to NameError", "A_clean_title": ["make", "depend", "rb", "add", "name", "nameerror", "name", "error"], "B_title": "Fix a bug where AS::Dependencies changes the behaivior of NameError#name", "B_clean_title": ["fix", "bug", "where", "as", ":depend", "chang", "behaivior", "nameerror", "name", "error", "name"], "A_body": "In order to use `.name` on #15762, we need to be consistent and set it when we raise a `NameError` on `Dependencies` module.\nreview @tenderlove @matthewd @fxn\n", "A_clean_body": ["order", "use", "name", "15762", "we", "need", "consist", "set", "it", "when", "we", "rais", "nameerror", "name", "error", "depend", "modul", "review", "tenderlov", "matthewd", "fxn"], "B_body": "I noticed that NameError objects loses a const name after `require 'active_support/dependencies'`. The following example replicates the bug fixed in this commit:\n\n``` ruby\nbegin\n  DoesNotExist\nrescue NameError => e\n  e.name # => :DoesNotExist\nend\n\nclass A; end\n\nbegin\n  A::DoesNotExistNeither\nrescue NameError => e\n  e.name # => :DoesNotExistNeither\nend\n\nrequire 'active_support/dependencies'\n\nbegin\n  DoesNotExist\nrescue NameError => e\n  e.name # => nil\nend\n\nbegin\n  A::DoesNotExistNeither\nrescue NameError => e\n  e.name # => nil\nend\n```\n\nThis commit changes AS::Dependencies to not just raise NameError but create an object first and raise the object so `NameError#name` will never be `nil`.\n\nI'll send other pull requests if I find this bug in more places in Rails.\n", "B_clean_body": ["notic", "that", "nameerror", "name", "error", "object", "lose", "const", "name", "after", "requir", "'activ", "support", "depend", "follow", "exampl", "replic", "bug", "fix", "thi", "commit", "rubi", "begin", "doesnotexist", "not", "exist", "rescu", "nameerror", "name", "error", "name", "doesnotexist", "not", "exist", "end", "class", "end", "begin", ":doesnotexistneith", ":doe", "not", "exist", "neither", "rescu", "nameerror", "name", "error", "name", "doesnotexistneith", "not", "exist", "neither", "end", "requir", "'activ", "support", "dependencies'", "begin", "doesnotexist", "not", "exist", "rescu", "nameerror", "name", "error", "name", "nil", "end", "begin", ":doesnotexistneith", ":doe", "not", "exist", "neither", "rescu", "nameerror", "name", "error", "name", "nil", "end", "thi", "commit", "chang", "as", ":depend", "not", "just", "rais", "nameerror", "name", "error", "but", "creat", "object", "first", "rais", "object", "so", "nameerror", "name", "error", "name", "will", "never", "nil", "'ll", "send", "other", "pull", "request", "find", "thi", "bug", "more", "place", "rail"], "title_sim": [0.6610203515156399], "body_sim": [0.48194380431217], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.7452148748338283, 0.8210099123873091], "location_sim": [0.5970149253731343, 0.6557377049180327], "pattern": 0, "time": 30}, {"A_title": "Nanoseconds support for DateTime#end_of_* methods", "A_clean_title": ["nanosecond", "support", "datetim", "date", "time", "end", "method"], "B_title": "Make Time and DateTime #end_of_* methods consistent", "B_clean_title": ["make", "time", "datetim", "date", "time", "end", "method", "consist"], "A_body": "The behaviour of DateTime#end_of_\\* methods is different from\nTime#end_of_*. DateTime unlike Time doesn't take seconds fraction into count.\n\n``` ruby\nTime.now.end_of_day.usec # => 999999.999\nDateTime.now.end_of_day.usec # => 0\n```\n\nIt leads into unexpected behaviour like:\n\n``` ruby\nDateTime.now.end_of_day.to_time == Time.now.end_of_day # => false\n\nclass Campaign < ActiveRecord::Base; end\n\nCampaign.create!(..., finishes_at: Time.now.end_of_month)\nCampaign.where(finishes_at: DateTime.now.end_of_month) # => [] \n```\n\nThis patch makes the behaviour of these methods consistent for both classes, so that Time and DateTime become more mutually changeable.\n", "A_clean_body": ["behaviour", "datetim", "date", "time", "end", "method", "differ", "time", "end", "datetim", "date", "time", "unlik", "time", "n't", "take", "second", "fraction", "into", "count", "rubi", "time", "now", "usec", "end", "day", "999999", "999", "datetim", "now", "usec", "date", "time", "end", "day", "it", "lead", "into", "unexpect", "behaviour", "like", "rubi", "datetim", "now", "date", "time", "end", "day", "time", "time", "now", "end", "day", "fals", "class", "campaign", "activerecord", "activ", "record", ":base", "end", "campaign", "creat", "finish", "at", "time", "now", "end", "month", "campaign", "where", "finish", "at", "datetim", "now", "date", "time", "end", "month", "thi", "patch", "make", "behaviour", "these", "method", "consist", "both", "class", "so", "that", "time", "datetim", "date", "time", "becom", "more", "mutual", "changeabl"], "B_body": "Before:\n  Time.now.end_of_month.to_datetime != DateTime.now.end_of_month,\n\nAfter: \n  Time.now.end_of_month.to_datetime == DateTime.now.end_of_month\n\nThat's because of Time using sec_fractions for end_of_\\* methods, while DateTime's methods ignored sec_fractions (even though it's supported by the class). \n\nThis fixes https://github.com/rails/rails/pull/16955\n", "B_clean_body": ["befor", "time", "now", "end", "month", "datetim", "datetim", "now", "date", "time", "end", "month", "after", "time", "now", "end", "month", "datetim", "datetim", "now", "date", "time", "end", "month", "that", "'s", "becaus", "time", "sec", "fraction", "end", "method", "while", "datetim", "date", "time", "'s", "method", "ignor", "sec", "fraction", "even", "though", "it", "'s", "support", "by", "class", "thi", "fix", "http", "github", "com", "rail", "rail", "pull", "16955"], "title_sim": [0.8268868427669662], "body_sim": [0.9073746198341607], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.7943694717413308, 0.7943694717413308], "location_sim": [0.650887573964497, 0.650887573964497], "pattern": -1, "time": 59}, {"A_title": "`cache_key` respects the limit in a relation even if a relation is not loaded", "A_clean_title": ["cach", "key", "respect", "limit", "relat", "even", "relat", "not", "load"], "B_title": "collection_cache_key now respects limit()", "B_clean_title": ["collect", "cach", "key", "now", "respect", "limit"], "A_body": "`cache_key` includes the size of a relation. But if a relation is not\r\nloadded, the size is not respected even if a relation has a limit. It\r\nshould be respected for consistency.", "A_clean_body": ["cach", "key", "includ", "size", "relat", "but", "relat", "not", "load", "size", "not", "respect", "even", "relat", "ha", "limit", "it", "respect", "consist"], "B_body": "As recently discussed in https://github.com/rails/rails/issues/27326 and previously discussed in https://github.com/rails/rails/pull/21503, the implementation of `collection_cache_key` that was merged with https://github.com/rails/rails/pull/20884 would ignore `limit()` relations.\r\n\r\nThis had the effect of many scenarios where the collection_cache_key query was _slower_ than the actual ActiveRecord query it was supposed to be avoiding.\r\n\r\nFor example, in a publishing CMS that has 100,000 `Articles`, the front page might say something like `Article.last(5)`, but the `collection_cache_key` would grind away to find the `COUNT` and `MAX` of _all_ 100,000 timestamps!\r\n\r\n(In our company\u2019s application, the SQL for the cache_key queries was about 8x slower than just loading the AR objects directly, even after making custom database indices to make the cache_key as fast as possible.)\r\n\r\nThis branch includes a failing test illustrating this issue, and a patch that fixes it.\r\n\r\n(cc @sgrif)", "B_clean_body": ["as", "recent", "discuss", "http", "github", "com", "rail", "rail", "issu", "27326", "previous", "discuss", "http", "github", "com", "rail", "rail", "pull", "21503", "implement", "collect", "cach", "key", "that", "wa", "merg", "http", "github", "com", "rail", "rail", "pull", "20884", "would", "ignor", "limit", "relat", "thi", "had", "effect", "mani", "scenario", "where", "collect", "cach", "key", "queri", "wa", "slower", "than", "actual", "activerecord", "activ", "record", "queri", "it", "wa", "suppos", "avoid", "exampl", "publish", "cm", "that", "ha", "100,000", "articl", "front", "page", "might", "say", "someth", "like", "articl", "last", "but", "collect", "cach", "key", "would", "grind", "away", "find", "count", "max", "all", "100,000", "timestamp", "our", "compani", "applic", "sql", "cach", "key", "queri", "wa", "about", "8x", "slower", "than", "just", "load", "ar", "object", "directli", "even", "after", "make", "custom", "databas", "indic", "make", "cach", "key", "as", "fast", "as", "possibl", "thi", "branch", "includ", "fail", "test", "illustr", "thi", "issu", "patch", "that", "fix", "it", "cc", "sgrif"], "title_sim": [0.5481378709131821], "body_sim": [0.29083237096432907], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.7298308978516669, 0.7298308978516669], "location_sim": [0.42696629213483145, 0.42696629213483145], "pattern": 0, "time": 126}, {"A_title": "[WIP] Publish \"Active Record and PostgreSQL guide\"", "A_clean_title": ["wip", "publish", "activ", "record", "postgresql", "postgr", "sql", "guid"], "B_title": "Add Active Record and PostgreSQL to guides table of contents [ci-skip]", "B_clean_title": ["add", "activ", "record", "postgresql", "postgr", "sql", "guid", "tabl", "content", "ci", "skip"], "A_body": "- Ref #25217\n\nPlease help me with reviewing this guide, and getting it out the door :)\n", "A_clean_body": ["ref", "25217", "pleas", "help", "me", "review", "thi", "guid", "get", "it", "out", "door"], "B_body": "This commit also changes the formatting of code samples a little bit so\nthat they are more adapter to the limited width of Guides webpage.\n", "B_clean_body": ["thi", "commit", "also", "chang", "format", "code", "sampl", "littl", "bit", "so", "that", "they", "are", "more", "adapt", "limit", "width", "guid", "webpag"], "title_sim": [0.5835871197590345], "body_sim": [0.26321510170227447], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.6181818181818182, 0.6181818181818182], "pattern": 0, "time": 121}, {"A_title": "AR::Base#attributes! returns hash with indifferent access", "A_clean_title": ["ar", ":base", "attribut", "return", "hash", "indiffer", "access"], "B_title": "ActiveRecord::Base#attributes return HashWithIndifferentAccess instance instead of Hash instance.", "B_clean_title": ["activerecord", "activ", "record", ":base", "attribut", "return", "hashwithindifferentaccess", "hash", "indiffer", "access", "instanc", "instead", "hash", "instanc"], "A_body": "Reopening [this issue](https://github.com/rails/rails/pull/551) as @jeremy said he would consider this change for Rails 4 and as many people seem to want this change.    Appended a bang so as to not break API compatibility.\n", "A_clean_body": ["reopen", "thi", "issu", "http", "github", "com", "rail", "rail", "pull", "551", "as", "jeremi", "said", "he", "would", "consid", "thi", "chang", "rail", "as", "mani", "peopl", "seem", "want", "thi", "chang", "append", "bang", "so", "as", "not", "break", "api", "compat"], "B_body": "In current behavior, ActiveRecord::Base#attributes return Hash instance.\n\nBut instance[] / instance[]= support not only string key but also symbol key.\nAnd other many api support string / symbol key.\n\nI think ActiveRecord::Base#attributes also return HWIA instance to support string / symbol keys.\n", "B_clean_body": ["current", "behavior", "activerecord", "activ", "record", ":base", "attribut", "return", "hash", "instanc", "but", "instanc", "instanc", "support", "not", "onli", "string", "key", "but", "also", "symbol", "key", "other", "mani", "api", "support", "string", "symbol", "key", "think", "activerecord", "activ", "record", ":base", "attribut", "also", "return", "hwia", "instanc", "support", "string", "symbol", "key"], "title_sim": [0.7979032658908651], "body_sim": [0.11173522738294826], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.6863156453925454, 0.7146770545600015], "location_sim": [0.0, 0.0], "pattern": 0, "time": 97}, {"A_title": "handle `:namespace` form option in collection labels", "A_clean_title": ["handl", "namespac", "form", "option", "collect", "label"], "B_title": "Fix collection labels not including form namespace.", "B_clean_title": ["fix", "collect", "label", "not", "includ", "form", "namespac"], "A_body": "originally this issue was opened in Simple Form https://github.com/plataformatec/simple_form/issues/884\n", "A_clean_body": ["origin", "thi", "issu", "wa", "open", "simpl", "form", "http", "github", "com", "plataformatec", "simpl", "form", "issu", "884"], "B_body": "Present in Rails 4-0-stable and in master.\n\nThis bug would prevent clicks on labels for collection form elements (radio buttons and check boxes) from selecting the associated input because the label's \"for\" attribute doesn't include the form namespace.\n\nThe bug can be replicated with the following code.\n\n``` erb\n<%= form_for Struct.new(:terms).new, :as => 'fakemodel', :url => '', :namespace => 'NAMESPACE' do |f| %>\n  <%= f.label :terms %> <em>Non-collection label has correct ID that includes namespace</em></br>\n  <%= f.collection_radio_buttons :terms, [\"Test option\"], :to_s, :to_s %> <em>Collection label has incorrect FOR attribute value that doesn't include the namespace</em>\n<% end %>\n```\n\nI'm unsure of how to test this as the form_collections_helper_test.rb doesn't seem to have any way to set up the form options. Any suggestions are welcome.\n", "B_clean_body": ["present", "rail", "stabl", "master", "thi", "bug", "would", "prevent", "click", "label", "collect", "form", "element", "radio", "button", "check", "box", "select", "associ", "input", "becaus", "label", "'s", "attribut", "n't", "includ", "form", "namespac", "bug", "replic", "follow", "code", "erb", "form", "struct", "new", "term", "new", "as", "'fakemodel", "url", "namespac", "'namespac", "|f|", "label", "term", "em", "non", "collect", "label", "ha", "correct", "id", "that", "includ", "namespac", "em", "br", "collect", "radio", "button", "term", "test", "option", "em", "collect", "label", "ha", "incorrect", "attribut", "valu", "that", "n't", "includ", "namespac", "em", "end", "'m", "unsur", "how", "test", "thi", "as", "rb", "form", "collect", "helper", "test", "n't", "seem", "have", "ani", "way", "set", "up", "form", "option", "ani", "suggest", "are", "welcom"], "title_sim": [0.8629514517766892], "body_sim": [0.1560390866467259], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.22461979989994282, 0.8668584184177334], "location_sim": [0.20512820512820512, 1.0], "pattern": 0, "time": 30}, {"A_title": "Support operator class on PostgreSQL index creation", "A_clean_title": ["support", "oper", "class", "postgresql", "postgr", "sql", "index", "creation"], "B_title": "Add support for PostgreSQL index operator classes", "B_clean_title": ["add", "support", "postgresql", "postgr", "sql", "index", "oper", "class"], "A_body": "The use case for this is for example when you try to create a gin/gist index on a text column. Before this PR I had to do:\n\n``` ruby\nclass AddFulltextIndexesToUsers < ActiveRecord::Migration\n  def up\n    execute <<-SQL\n      CREATE  INDEX \"index_users_on_bio\" ON \"users\" USING gin (\"bio\" gin_trgm_ops)\n    SQL\n  end\n\n  def down\n    execute <<-SQL\n      DROP INDEX \"index_users_on_bio\"\n    SQL\n  end\nend\n```\n\nnow I can do\n\n``` ruby\nclass AddFulltextIndexesToUsers < ActiveRecord::Migration\n  def change\n    add_index  :users, :bio,  using: 'gin', opclass: \"gin_trgm_ops\"\n  end\nend\n```\n", "A_clean_body": ["use", "case", "thi", "exampl", "when", "you", "tri", "creat", "gin", "gist", "index", "text", "column", "befor", "thi", "pr", "had", "rubi", "class", "addfulltextindexestous", "add", "fulltext", "index", "user", "activerecord", "activ", "record", ":migrat", "def", "up", "execut", "sql", "creat", "index", "index", "user", "bio", "user", "gin", "bio", "gin", "trgm", "op", "sql", "end", "def", "down", "execut", "sql", "drop", "index", "index", "user", "bio", "sql", "end", "end", "now", "rubi", "class", "addfulltextindexestous", "add", "fulltext", "index", "user", "activerecord", "activ", "record", ":migrat", "def", "chang", "add", "index", "user", "bio", "'gin", "opclass", "gin", "trgm", "op", "end", "end"], "B_body": "This adds support for setting and dumping the index operator class when using the PostgreSQL adapter.\nThis is especially useful for search, because it is needed to make use of the operators provided by the pg_trgm extension and also the builtin pattern_ops classes that enable LIKE/REGEX queries on non-C-locale columns.\n\nThe current code checks that the operator class is a valid opclass provided by the current database, but it does not yet check wether the combination of index type and operator class is valid. This would be possible by using a slightly more comlicated query for determining the valid opclasses:\n\n``` SQL\nSELECT am.amname AS index_method,\n       opc.opcname AS opclass_name\n    FROM pg_am am, pg_opclass opc\n    WHERE opc.opcmethod = am.oid\n    ORDER BY index_method, opclass_name;\n```\n\nThe code is very loosely based on a previous implementation in the postgres_ext 1.0 gem which provided an index_opclass option when working with Rails 3.2.x.\n\n**Usage Examples:**\n\n``` ruby\nadd_index :people, :last_name, opclass: :varchar_pattern_ops\nadd_index :people, :last_name, using: :gist, opclass: :gist_trgm_ops\n```\n\n[Relevant Postgres Docs: Operator Classes and Operator Families](http://www.postgresql.org/docs/9.3/static/indexes-opclass.html)\n", "B_clean_body": ["thi", "add", "support", "set", "dump", "index", "oper", "class", "when", "postgresql", "postgr", "sql", "adapt", "thi", "especi", "use", "search", "becaus", "it", "need", "make", "use", "oper", "provid", "by", "pg", "trgm", "extens", "also", "builtin", "pattern", "op", "class", "that", "enabl", "like", "regex", "queri", "non", "local", "column", "current", "code", "check", "that", "oper", "class", "valid", "opclass", "provid", "by", "current", "databas", "but", "it", "not", "yet", "check", "wether", "combin", "index", "type", "oper", "class", "valid", "thi", "would", "possibl", "by", "slightli", "more", "comlic", "queri", "determin", "valid", "opclass", "sql", "select", "am", "amnam", "as", "index", "method", "opc", "opcnam", "as", "opclass", "name", "pg", "am", "am", "pg", "opclass", "opc", "where", "opc", "opcmethod", "am", "oid", "order", "by", "index", "method", "opclass", "name", "code", "veri", "loos", "base", "previou", "implement", "postgr", "ext", "gem", "which", "provid", "index", "opclass", "option", "when", "work", "rail", "**usag", "exampl", "rubi", "add", "index", "peopl", "last", "name", "opclass", "varchar", "pattern", "op", "add", "index", "peopl", "last", "name", "gist", "opclass", "gist", "trgm", "op", "relev", "postgr", "doc", "oper", "class", "oper", "famili", "http", "postgresql", "opclass", "html", "www", "org", "doc", "static", "index"], "title_sim": [0.9774910213766673], "body_sim": [0.5413138212177755], "file_list_sim": 0.18181818181818182, "overlap_files_len": 2, "code_sim": [0.714867071388588, 0.7174520019515641], "location_sim": [0.20346320346320346, 0.41228070175438597], "pattern": 0, "time": 91}, {"A_title": "Show subclass name in the migration error instead of the Class", "A_clean_title": ["show", "subclass", "name", "migrat", "error", "instead", "class"], "B_title": "show correct class name in migration inherited directly error", "B_clean_title": ["show", "correct", "class", "name", "migrat", "inherit", "directli", "error"], "A_body": "- self.class is class Class which is not really useful in the error message.\r\n\r\nr? @matthewd \r\n\r\nShould I add a test for this?", "A_clean_body": ["self", "class", "class", "class", "which", "not", "realli", "use", "error", "messag", "matthewd", "add", "test", "thi"], "B_body": "Follow up to 249f71a\r\n", "B_clean_body": ["follow", "up", "249f71a"], "title_sim": [0.7726412751392399], "body_sim": [-0.015607829089532798], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.3038826141145263, 1.0], "location_sim": [0.5833333333333334, 1.0], "pattern": 0, "time": 5}, {"A_title": "`ActiveRecord::Base#becomes` should retain the errors but use new base.", "A_clean_title": ["activerecord", "activ", "record", ":base", "becom", "retain", "error", "but", "use", "new", "base"], "B_title": "AR::Base#becomes should change errors base to new object", "B_clean_title": ["ar", ":base", "becom", "chang", "error", "base", "new", "object"], "A_body": "Upgrading of https://github.com/rails/rails/pull/3438\n\nAccording to documentation of [ActiveModel::Errors#initialize](https://github.com/rails/rails/blob/master/activemodel/lib/active_model/errors.rb#L65-L76)\n\n> Pass in the instance of the object that is using the errors object.\n\nSome subclass can have different validations and fields. And it is a place for potential errors. See new test for example.\n", "A_clean_body": ["upgrad", "http", "github", "com", "rail", "rail", "pull", "3438", "accord", "document", "activemodel", "activ", "model", ":error", "initi", "http", "rb", "github", "com", "rail", "rail", "blob", "master", "activemodel", "lib", "activ", "model", "error", "l65", "l76", "pass", "instanc", "object", "that", "error", "object", "some", "subclass", "have", "differ", "valid", "field", "it", "place", "potenti", "error", "see", "new", "test", "exampl"], "B_body": "The current implementation of AR::Base#becomes throws an exception, whenever the new class validates something, the super class doesn't 'know' e.g. the presence of an associated object.\n\n``` ruby\nclass Company < ActiveRecord::Base\nend\n\nclass Client < Company\n  belongs_to :account\n  validates_presence_of :account\nend\n\ncompany = Company.new\nclient = company.becomes(Client)\nclient.valid?\n\n=> NoMethodError: undefined method `account' for #<Company:0x0000010383acd0>\n\n```\n\nThis happens because since https://github.com/rails/rails/pull/3438 AR::Base#becomes copies the errors information, but doesn't change the base instance variable of the related ActiveModel::Errors object to the transformed object.\n\nIn my opinion, there are two alternatives:\n1. Fix the bug: I attached a pull request with a failing test and bugfix\n2. Revert https://github.com/rails/rails/pull/3438 . The whole behaviour could be misleading, because your errors object could contain messages of validations, which were overwritten by the new class.\n", "B_clean_body": ["current", "implement", "ar", ":base", "becom", "throw", "except", "whenev", "new", "class", "valid", "someth", "super", "class", "n't", "'know", "presenc", "associ", "object", "rubi", "class", "compani", "activerecord", "activ", "record", ":base", "end", "class", "client", "compani", "belong", "account", "valid", "presenc", "account", "end", "compani", "compani", "new", "client", "compani", "becom", "client", "client", "valid", "nomethoderror", "no", "method", "error", "undefin", "method", "account", "company:0x0000010383acd0", "thi", "happen", "becaus", "sinc", "http", "github", "com", "rail", "rail", "pull", "3438", "ar", ":base", "becom", "copi", "error", "inform", "but", "n't", "chang", "base", "instanc", "variabl", "relat", "activemodel", "activ", "model", ":error", "object", "transform", "object", "my", "opinion", "there", "are", "two", "altern", "fix", "bug", "attach", "pull", "request", "fail", "test", "bugfix", "revert", "http", "github", "com", "rail", "rail", "pull", "3438", "whole", "behaviour", "could", "mislead", "becaus", "your", "error", "object", "could", "contain", "messag", "valid", "which", "were", "overwritten", "by", "new", "class"], "title_sim": [0.664951460458526], "body_sim": [0.43956344104816647], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.12492558406505708, 1.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 1007}, {"A_title": "Update ActiveJob adapter for sucker_punch 2.0", "A_clean_title": ["updat", "activejob", "activ", "job", "adapt", "sucker", "punch"], "B_title": "ActiveJob - Sucker Punch adapter - Enqueue_at implementation", "B_clean_title": ["activejob", "activ", "job", "sucker", "punch", "adapt", "enqueu", "at", "implement"], "A_body": "This PR includes two changes for 2.0.0:\n- Breaking API change around `async.perform` --> `perform_async`\n- New addition of `perform_in`, which now allows end users of the\n  adapter to use the `enqueued_at` public API method.\n\ncc @brandonhilkert \nr? @eileencodes \n", "A_clean_body": ["thi", "pr", "includ", "two", "chang", "break", "api", "chang", "around", "async", "perform", "perform", "async", "new", "addit", "perform", "which", "now", "allow", "end", "user", "adapt", "use", "enqueu", "at", "public", "api", "method", "cc", "brandonhilkert", "eileencod"], "B_body": "Adds `enqueue_at` implementation for the `sucker_punch` adapter.\n", "B_clean_body": ["add", "enqueu", "at", "implement", "sucker", "punch", "adapt"], "title_sim": [0.9106962028211733], "body_sim": [0.13923081529692558], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.6916960769301167, 0.7021208885845839], "location_sim": [0.4166666666666667, 1.0], "pattern": 0, "time": 362}, {"A_title": "Add DS_Store to gitignore file", "A_clean_title": ["add", "ds", "store", "gitignor", "file"], "B_title": "Add an ignore file", "B_clean_title": ["add", "ignor", "file"], "A_body": "[ci skip]\nIn reference to rails/rails/#22683\n", "A_clean_body": ["ci", "skip", "refer", "rail", "rail", "22683"], "B_body": "I added an ignore file(`.DS_Store`).\n", "B_clean_body": ["ad", "ignor", "file", "ds", "store"], "title_sim": [0.2863369681671257], "body_sim": [-0.019614894079985127], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "Remove mentions of docrails", "A_clean_title": ["remov", "mention", "docrail"], "B_title": "[ci skip] Remove (404) links to rails/docrails", "B_clean_title": ["ci", "skip", "remov", "404", "link", "rail", "docrail"], "A_body": "The rails/docrails GitHub repo has moved from public to private status\nrecently, so it makes sense to remove references to it in the\ndocumentation, to avoid confusion.\n\n[ci skip]\n", "A_clean_body": ["rail", "docrail", "github", "git", "hub", "repo", "ha", "move", "public", "privat", "statu", "recent", "so", "it", "make", "sens", "remov", "refer", "it", "document", "avoid", "confus", "ci", "skip"], "B_body": "Since https://github.com/rails/docrails is not publicly available,\nare we better off without \"404 Not Found\" links in the documentation?\n", "B_clean_body": ["sinc", "http", "github", "com", "rail", "docrail", "not", "publicli", "avail", "are", "we", "better", "off", "without", "404", "not", "found", "link", "document"], "title_sim": [0.45806993168603743], "body_sim": [0.08990557070332668], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 6}, {"A_title": "Cable message encoding", "A_clean_title": ["cabl", "messag", "encod"], "B_title": "Improve Action Cable message encoding + decoding", "B_clean_title": ["improv", "action", "cabl", "messag", "encod", "decod"], "A_body": "- Introduce a connection coder responsible for encoding Cable messages\n  as WebSocket messages, defaulting to `ActiveSupport::JSON` and duck-typing to any object responding to `#encode` and `#decode`.\n- Consolidate encoding responsibility to the connection. No longer\n  explicitly JSON-encode from channels or other sources. Pass Cable\n  messages as Hashes to `#transmit` and rely on it to encode.\n- Introduce stream encoders responsible for decoding pubsub messages.\n  Preserve the currently raw encoding, but make it easy to use JSON.\n  Same duck type as the connection encoder.\n- Revert recent data normalization/quoting (#23649) which treated\n  `identifier` and `data` values as nested JSON objects rather than as\n  opaque JSON-encoded strings. That dealt us an awkward hand where we'd\n  decode JSON strings\u2026 or not, but always encode as JSON. Embedding\n  JSON object values directly is preferably, no extra JSON encoding,\n  but that should be a purposeful protocol version change rather than\n  ambiguously, inadvertently supporting multiple message formats.\n", "A_clean_body": ["introduc", "connect", "coder", "respons", "encod", "cabl", "messag", "as", "websocket", "web", "socket", "messag", "default", "activesupport", "activ", "support", ":json", "duck", "type", "ani", "object", "respond", "encod", "decod", "consolid", "encod", "respons", "connect", "no", "longer", "explicitli", "json", "encod", "channel", "or", "other", "sourc", "pass", "cabl", "messag", "as", "hash", "transmit", "reli", "it", "encod", "introduc", "stream", "encod", "respons", "decod", "pubsub", "messag", "preserv", "current", "raw", "encod", "but", "make", "it", "easi", "use", "json", "same", "duck", "type", "as", "connect", "encod", "revert", "recent", "data", "normal", "quot", "23649", "which", "treat", "identifi", "data", "valu", "as", "nest", "json", "object", "rather", "than", "as", "opaqu", "json", "encod", "string", "that", "dealt", "us", "awkward", "hand", "where", "we'd", "decod", "json", "strings\u2026", "or", "not", "but", "alway", "encod", "as", "json", "embed", "json", "object", "valu", "directli", "prefer", "no", "extra", "json", "encod", "but", "that", "purpos", "protocol", "version", "chang", "rather", "than", "ambigu", "inadvert", "support", "multipl", "messag", "format"], "B_body": "- This centralizes all parsing and processing methods in\n  a `ActionCable::Connection::Utils` concern, which is then `include`d for\n  use within the library.\n- All payload parsing/processing is done immediately in\n  `ActionCable::Connection::Base#receive`\n- `ActionCable::Connection::Subscriptions` once again uses `id_key` as\n  the identifier for subscriptions within the global hash. This was only\n  changed in the first place to accomodate payload parsing/processing.\n\nSee #23649 and #24040 for previous discussion regarding this.\n\nLikely still more work to be done with this, but this is a start at\ntrying to organize this logic in a way that is easier to understand.\n", "B_clean_body": ["thi", "central", "all", "pars", "process", "method", "actionc", "action", "cabl", ":connect", ":util", "concern", "which", "then", "includ", "use", "within", "librari", "all", "payload", "pars", "process", "done", "immedi", "actionc", "action", "cabl", ":connect", ":base", "receiv", "actionc", "action", "cabl", ":connect", ":subscript", "onc", "again", "use", "id", "key", "as", "identifi", "subscript", "within", "global", "hash", "thi", "wa", "onli", "chang", "first", "place", "accomod", "payload", "pars", "process", "see", "23649", "24040", "previou", "discuss", "regard", "thi", "like", "still", "more", "work", "done", "thi", "but", "thi", "start", "at", "tri", "organ", "thi", "logic", "way", "that", "easier", "understand"], "title_sim": [0.8819733799975928], "body_sim": [0.1265707301290676], "file_list_sim": 0.2857142857142857, "overlap_files_len": 6, "code_sim": [0.1133516185001833, 0.10149084196230931], "location_sim": [0.30559006211180123, 0.75], "pattern": 1, "time": 4}, {"A_title": "Add an :if_exists option to drop_table", "A_clean_title": ["add", "exist", "option", "drop", "tabl"], "B_title": "Add `force` option to `drop_table` for ignoring a missing table", "B_clean_title": ["add", "forc", "option", "drop", "tabl", "ignor", "miss", "tabl"], "A_body": "I think `drop_table` can benefit from an `if_exists: true` option, that does a `DROP TABLE IF EXISTS`. If nothing else, it can be useful for a bunch of tests that do this manually ([to](https://github.com/rails/rails/blob/master/activerecord/test/cases/migration/rename_table_test.rb#L86-L87) [name](https://github.com/rails/rails/blob/master/activerecord/test/cases/migration/table_and_index_test.rb#L9) [a](https://github.com/rails/rails/blob/master/activerecord/test/cases/adapters/mysql2/schema_migrations_test.rb#L19) [few](https://github.com/rails/rails/blob/master/activerecord/test/cases/migration/create_join_table_test.rb#L15)). The `DROP TABLE IF EXISTS` syntax seems to be supported in the popular database engines. I checked MySQL, PostgreSQL, SQLite, MS SQL Server and Oracle.\n\nI'm not sure if `if_exists` is the best name for this option. Suggestions are welcome, if you feel that this is a useful contribution.\n\n/cc @senny \n", "A_clean_body": ["think", "drop", "tabl", "benefit", "exist", "true", "option", "that", "drop", "tabl", "exist", "noth", "it", "use", "bunch", "test", "that", "thi", "manual", "http", "rb", "github", "tabl", "test", "com", "rail", "rail", "blob", "master", "activerecord", "test", "case", "migrat", "renam", "l86", "l87", "name", "http", "rb", "github", "index", "test", "com", "rail", "rail", "blob", "master", "activerecord", "test", "case", "migrat", "tabl", "l9", "http", "rb", "github", "migrat", "test", "com", "rail", "rail", "blob", "master", "activerecord", "test", "case", "adapt", "mysql2", "schema", "l19", "few", "http", "rb", "github", "join", "tabl", "test", "com", "rail", "rail", "blob", "master", "activerecord", "test", "case", "migrat", "creat", "l15", "drop", "tabl", "exist", "syntax", "seem", "support", "popular", "databas", "engin", "check", "mysql", "my", "sql", "postgresql", "postgr", "sql", "sqlite", "sq", "lite", "ms", "sql", "server", "oracl", "'m", "not", "sure", "exist", "best", "name", "thi", "option", "suggest", "are", "welcom", "you", "feel", "that", "thi", "use", "contribut", "cc", "senni"], "B_body": "sometimes you don't know if a previous migration ran, so it's useful\nto unconditionally drop a table\n", "B_clean_body": ["sometim", "you", "n't", "know", "previou", "migrat", "ran", "so", "it", "'s", "use", "uncondit", "drop", "tabl"], "title_sim": [0.6506615545944018], "body_sim": [0.3566927793381905], "file_list_sim": 0.375, "overlap_files_len": 3, "code_sim": [0.6135946697147088, 0.36339541337385056], "location_sim": [0.35555555555555557, 0.6956521739130435], "pattern": 0, "time": 71}, {"A_title": "Prevent `RangeError` for `belongs_to` associations", "A_clean_title": ["prevent", "rangeerror", "rang", "error", "belong", "associ"], "B_title": "Prevent raising RangeError in AR presence validation", "B_clean_title": ["prevent", "rais", "rangeerror", "rang", "error", "ar", "presenc", "valid"], "A_body": "Currently to access `belongs_to` associations raises a `RangeError` if\nforeign key attribute has out of range value.\nIt should return a nil value rather than raising a `RangeError`.\n\nFixes #20140.\n", "A_clean_body": ["current", "access", "belong", "associ", "rais", "rangeerror", "rang", "error", "foreign", "key", "attribut", "ha", "out", "rang", "valu", "it", "return", "nil", "valu", "rather", "than", "rais", "rangeerror", "rang", "error", "fix", "20140"], "B_body": "### Summary\n\nAfter updating ActiveRecord version from 4.1 in my application I noticed a strange behavior. If I call `#valid?` method for an ActiveRecord model, it may raise an unexpected `RangeError` exception. For example:\n\n``` ruby\nuser = User.create!(account: Account.first!)\n\nuser.account_id = 10_000_000_000\nuser.valid? \n# => RangeError: 10000000000 is out of range for ActiveRecord::Type::Integer with limit 4\n```\n\nWhat happened was that during a `presence` validation for association it called a method `ensure_in_range` several times, which checks whether a value in a DB type range or not.\n\nTo fix this issue I would suggest catching the exception and adding `:invalid` attribute error to a record.\n### Other Information\n\nHere is a stack trace when I run tests without these changes:\n\n```\nRangeError: 10000000000 is out of range for ActiveModel::Type::Integer with limit 4\n    rails/activemodel/lib/active_model/type/integer.rb:49:in `ensure_in_range'\n    rails/activemodel/lib/active_model/type/integer.rb:27:in `serialize'\n    rails/activerecord/lib/active_record/attribute.rb:51:in `value_for_database'\n    rails/activerecord/lib/active_record/relation/query_attribute.rb:11:in `value_for_database'\n    rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:191:in `block in exec_query'\n    rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:191:in `map'\n    rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:191:in `exec_query'\n    rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:377:in `select_prepared'\n    rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:39:in `select_all'\n    rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:70:in `select_all'\n    rails/activerecord/lib/active_record/querying.rb:39:in `find_by_sql'\n    rails/activerecord/lib/active_record/statement_cache.rb:109:in `execute'\n    rails/activerecord/lib/active_record/associations/singular_association.rb:59:in `get_records'\n    rails/activerecord/lib/active_record/associations/singular_association.rb:63:in `find_target'\n    rails/activerecord/lib/active_record/associations/association.rb:138:in `load_target'\n    rails/activerecord/lib/active_record/associations/association.rb:53:in `reload'\n    rails/activerecord/lib/active_record/associations/singular_association.rb:15:in `reader'\n    rails/activerecord/lib/active_record/associations/builder/association.rb:111:in `man'\n    rails/activemodel/lib/active_model/errors.rb:483:in `generate_message'\n    rails/activemodel/lib/active_model/errors.rb:500:in `normalize_message'\n    rails/activemodel/lib/active_model/errors.rb:331:in `add'\n    rails/activemodel/lib/active_model/validations/presence.rb:7:in `validate_each'\n    rails/activerecord/lib/active_record/validations/presence.rb:15:in `block in validate'\n    rails/activerecord/lib/active_record/validations/presence.rb:5:in `each'\n    rails/activerecord/lib/active_record/validations/presence.rb:5:in `validate'\n    rails/activesupport/lib/active_support/callbacks.rb:405:in `public_send'\n    rails/activesupport/lib/active_support/callbacks.rb:405:in `block in make_lambda'\n    rails/activesupport/lib/active_support/callbacks.rb:169:in `call'\n    rails/activesupport/lib/active_support/callbacks.rb:169:in `block (2 levels) in halting'\n    rails/activesupport/lib/active_support/callbacks.rb:547:in `call'\n    rails/activesupport/lib/active_support/callbacks.rb:547:in `block (2 levels) in default_terminator'\n    rails/activesupport/lib/active_support/callbacks.rb:546:in `catch'\n    rails/activesupport/lib/active_support/callbacks.rb:546:in `block in default_terminator'\n    rails/activesupport/lib/active_support/callbacks.rb:170:in `call'\n    rails/activesupport/lib/active_support/callbacks.rb:170:in `block in halting'\n    rails/activesupport/lib/active_support/callbacks.rb:454:in `call'\n    rails/activesupport/lib/active_support/callbacks.rb:454:in `block in call'\n    rails/activesupport/lib/active_support/callbacks.rb:454:in `each'\n    rails/activesupport/lib/active_support/callbacks.rb:454:in `call'\n    rails/activesupport/lib/active_support/callbacks.rb:101:in `__run_callbacks__'\n    rails/activesupport/lib/active_support/callbacks.rb:750:in `_run_validate_callbacks'\n    rails/activemodel/lib/active_model/validations.rb:408:in `run_validations!'\n    rails/activemodel/lib/active_model/validations/callbacks.rb:113:in `block in run_validations!'\n    rails/activesupport/lib/active_support/callbacks.rb:97:in `__run_callbacks__'\n    rails/activesupport/lib/active_support/callbacks.rb:750:in `_run_validation_callbacks'\n    rails/activemodel/lib/active_model/validations/callbacks.rb:113:in `run_validations!'\n    rails/activemodel/lib/active_model/validations.rb:338:in `valid?'\n    rails/activerecord/lib/active_record/validations.rb:65:in `valid?'\n    test/cases/validations/association_validation_test.rb:97:in `block in test_validates_presence_of_belongs_to_association__out_of_range_error'\n    rails/activerecord/test/cases/validations_repair_helper.rb:14:in `repair_validations'\n    test/cases/validations/association_validation_test.rb:90:in `test_validates_presence_of_belongs_to_association__out_of_range_error'\n```\n\nProbably similar issues https://github.com/rails/rails/issues/20140, https://github.com/rails/rails/issues/21309.\n", "B_clean_body": ["summari", "after", "updat", "activerecord", "activ", "record", "version", "my", "applic", "notic", "strang", "behavior", "call", "valid", "method", "activerecord", "activ", "record", "model", "it", "may", "rais", "unexpect", "rangeerror", "rang", "error", "except", "exampl", "rubi", "user", "user", "creat", "account", "account", "first", "user", "account", "id", "10", "000", "000", "000", "user", "valid", "rangeerror", "rang", "error", "10000000000", "out", "rang", "activerecord", "activ", "record", ":type", ":integ", "limit", "what", "happen", "wa", "that", "dure", "presenc", "valid", "associ", "it", "call", "method", "ensur", "rang", "sever", "time", "which", "check", "whether", "valu", "db", "type", "rang", "or", "not", "fix", "thi", "issu", "would", "suggest", "catch", "except", "ad", "invalid", "attribut", "error", "record", "other", "inform", "here", "stack", "trace", "when", "run", "test", "without", "these", "chang", "rangeerror", "rang", "error", "10000000000", "out", "rang", "activemodel", "activ", "model", ":type", ":integ", "limit", "rb:49", "rail", "activemodel", "lib", "activ", "model", "type", "integ", "ensur", "range'", "rb:27", "rail", "activemodel", "lib", "activ", "model", "type", "integ", "serialize'", "rb:51", "rail", "activerecord", "lib", "activ", "record", "attribut", "valu", "database'", "rb:11", "attribut", "rail", "activerecord", "lib", "activ", "record", "relat", "queri", "valu", "database'", "rb:191", "adapt", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "sqlite3", "block", "exec", "query'", "rb:191", "adapt", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "sqlite3", "map'", "rb:191", "adapt", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "sqlite3", "exec", "query'", "rb:377", "statement", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "abstract", "databas", "select", "prepared'", "rb:39", "statement", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "abstract", "databas", "select", "all'", "rb:70", "cach", "rail", "activerecord", "lib", "activ", "record", "connect", "adapt", "abstract", "queri", "select", "all'", "rb:39", "rail", "activerecord", "lib", "activ", "record", "queri", "find", "by", "sql'", "rb:109", "cach", "rail", "activerecord", "lib", "activ", "record", "statement", "execute'", "rb:59", "associ", "rail", "activerecord", "lib", "activ", "record", "associ", "singular", "get", "records'", "rb:63", "associ", "rail", "activerecord", "lib", "activ", "record", "associ", "singular", "find", "target'", "rb:138", "rail", "activerecord", "lib", "activ", "record", "associ", "associ", "load", "target'", "rb:53", "rail", "activerecord", "lib", "activ", "record", "associ", "associ", "reload'", "rb:15", "associ", "rail", "activerecord", "lib", "activ", "record", "associ", "singular", "reader'", "rb:111", "rail", "activerecord", "lib", "activ", "record", "associ", "builder", "associ", "man'", "rb:483", "rail", "activemodel", "lib", "activ", "model", "error", "gener", "message'", "rb:500", "rail", "activemodel", "lib", "activ", "model", "error", "normal", "message'", "rb:331", "rail", "activemodel", "lib", "activ", "model", "error", "add'", "rb:7", "rail", "activemodel", "lib", "activ", "model", "valid", "presenc", "valid", "each'", "rb:15", "rail", "activerecord", "lib", "activ", "record", "valid", "presenc", "block", "validate'", "rb:5", "rail", "activerecord", "lib", "activ", "record", "valid", "presenc", "each'", "rb:5", "rail", "activerecord", "lib", "activ", "record", "valid", "presenc", "validate'", "rb:405", "rail", "activesupport", "lib", "activ", "support", "callback", "public", "send'", "rb:405", "rail", "activesupport", "lib", "activ", "support", "callback", "block", "make", "lambda'", "rb:169", "rail", "activesupport", "lib", "activ", "support", "callback", "call'", "rb:169", "rail", "activesupport", "lib", "activ", "support", "callback", "block", "level", "halting'", "rb:547", "rail", "activesupport", "lib", "activ", "support", "callback", "call'", "rb:547", "rail", "activesupport", "lib", "activ", "support", "callback", "block", "level", "default", "terminator'", "rb:546", "rail", "activesupport", "lib", "activ", "support", "callback", "catch'", "rb:546", "rail", "activesupport", "lib", "activ", "support", "callback", "block", "default", "terminator'", "rb:170", "rail", "activesupport", "lib", "activ", "support", "callback", "call'", "rb:170", "rail", "activesupport", "lib", "activ", "support", "callback", "block", "halting'", "rb:454", "rail", "activesupport", "lib", "activ", "support", "callback", "call'", "rb:454", "rail", "activesupport", "lib", "activ", "support", "callback", "block", "call'", "rb:454", "rail", "activesupport", "lib", "activ", "support", "callback", "each'", "rb:454", "rail", "activesupport", "lib", "activ", "support", "callback", "call'", "rb:101", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "callback", "rb:750", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "valid", "callbacks'", "rb:408", "rail", "activemodel", "lib", "activ", "model", "valid", "run", "valid", "rb:113", "rail", "activemodel", "lib", "activ", "model", "valid", "callback", "block", "run", "valid", "rb:97", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "callback", "rb:750", "rail", "activesupport", "lib", "activ", "support", "callback", "run", "valid", "callbacks'", "rb:113", "rail", "activemodel", "lib", "activ", "model", "valid", "callback", "run", "valid", "rb:338", "rail", "activemodel", "lib", "activ", "model", "valid", "valid", "rb:65", "rail", "activerecord", "lib", "activ", "record", "valid", "valid", "rb:97", "valid", "test", "test", "case", "valid", "associ", "block", "test", "valid", "presenc", "belong", "associ", "out", "rang", "error'", "rb:14", "repair", "helper", "rail", "activerecord", "test", "case", "valid", "repair", "validations'", "rb:90", "valid", "test", "test", "case", "valid", "associ", "test", "valid", "presenc", "belong", "associ", "out", "rang", "error'", "probabl", "similar", "issu", "http", "github", "com", "rail", "rail", "issu", "20140", "http", "github", "com", "rail", "rail", "issu", "21309"], "title_sim": [0.6336011879355924], "body_sim": [0.24132747029582904], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.3091173401795186, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 38}, {"A_title": "When .find_each is called without a block, return an Enumerator.", "A_clean_title": ["when", "find", "each", "call", "without", "block", "return", "enumer"], "B_title": "Make .find_each return an Enumerator if no block given", "B_clean_title": ["make", "find", "each", "return", "enumer", "no", "block", "given"], "A_body": "This lets us do things like call: .find_each.with_index\n", "A_clean_body": ["thi", "let", "us", "thing", "like", "call", "find", "each", "index"], "B_body": "Previously, find_each required a block. This is in-congruent with other enumerable behavior, which can be chained.\n\nBy returning a potentially lazy enumerable, the benefit of memory management is maintained, but with the added benefit of chain-able operations.\n", "B_clean_body": ["previous", "find", "each", "requir", "block", "thi", "congruent", "other", "enumer", "behavior", "which", "chain", "by", "return", "potenti", "lazi", "enumer", "benefit", "memori", "manag", "maintain", "but", "ad", "benefit", "chain", "abl", "oper"], "title_sim": [0.8052132195517129], "body_sim": [0.061395942802996824], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.5986691821038247, 0.5986691821038247], "location_sim": [1.0, 1.0], "pattern": 0, "time": 6}, {"A_title": "modified documentation of `start_year` and `end_year` options for `date_select` helper [ci skip]", "A_clean_title": ["modifi", "document", "start", "year", "end", "year", "option", "date", "select", "helper", "ci", "skip"], "B_title": "Fix documentation for end_year option of date_helper [ci skip]", "B_clean_title": ["fix", "document", "end", "year", "option", "date", "helper", "ci", "skip"], "A_body": "Fixes #13552\n", "A_clean_body": ["fix", "13552"], "B_body": "- While editing an existing record, end_year is equal to current_selected_year + 5 by default.\n- Fixes #13552\n", "B_clean_body": ["while", "edit", "exist", "record", "end", "year", "equal", "current", "select", "year", "by", "default", "fix", "13552"], "title_sim": [0.8752397754092688], "body_sim": [0.2319830850995567], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.8898527399252889, 0.8898527399252889], "location_sim": [1.0, 1.0], "pattern": 1, "time": 0}, {"A_title": "Fix `rake db:schema:load` with subdirectories", "A_clean_title": ["fix", "rake", "db", "schema", "load", "subdirectori"], "B_title": "db:schema:load with migrations in subdirectories", "B_clean_title": ["db", "schema", "load", "migrat", "subdirectori"], "A_body": "Related #25174.\r\n\r\n`db:schema:load` doesn't work with subdirectories like previous\r\n`db:migrate:status`. `Migrator.migration_files` should be used in\r\n`assume_migrated_upto_version` to fix the issue.\r\n\r\n@pixeltrix Could you also review this?", "A_clean_body": ["relat", "25174", "db", "schema", "load", "n't", "work", "subdirectori", "like", "previou", "db", "migrat", "statu", "migrat", "migrat", "file", "use", "assum", "migrat", "upto", "version", "fix", "issu", "pixeltrix", "could", "you", "also", "review", "thi"], "B_body": "Getting pending migrations errors after running\n\n```\n$ rake db:schema:load\n```\n\nwhen `db/migrate` directory contains any migrations in its subdirectories.\n\nExample directories structure:\n\n```\ndb/\n    migrate/\n        archive/\n            1_create_people.rb\n            2_add_age_to_people.rb\n        3_add_phone_number_to_people.rb\n```\n\nIf the `db/migrate` directory contains any migrations in its subdirectories, their versions are not inserted into `schema_migrations` table.\n\nAs for the example above, `ActiveRecord::ConnectionAdapters::SchemaStatements.assume_migrated_upto_version` method inserts only the 3rd version into the `schema_migrations` table.\nBut `ActiveRecord::Migrator.migrations` method expects the table to include all of the 3 versions. 1 and 2 are perceived as pending and this fact causes the pending migrations error.\n\nThe `assume_migrated_upto_version` fetched migrations files using\n\n``` ruby\npaths = migrations_paths.map {|p| \"#{p}/[0-9]*_*.rb\" }\n```\n\nSo there was no subdirectories support.\nThe behaviour is fixed by\n\n``` ruby\npaths = migrations_paths.map {|p| \"#{p}/**/[0-9]*_*.rb\" }\n```\n\nAdded a test case.\n", "B_clean_body": ["get", "pend", "migrat", "error", "after", "run", "rake", "db", "schema", "load", "when", "db", "migrat", "directori", "contain", "ani", "migrat", "it", "subdirectori", "exampl", "directori", "structur", "db", "migrat", "archiv", "rb", "creat", "peopl", "rb", "add", "age", "peopl", "rb", "add", "phone", "number", "peopl", "db", "migrat", "directori", "contain", "ani", "migrat", "it", "subdirectori", "their", "version", "are", "not", "insert", "into", "schema", "migrat", "tabl", "as", "exampl", "abov", "activerecord", "activ", "record", ":connectionadapt", ":connect", "adapt", ":schemastat", ":schema", "statement", "assum", "migrat", "upto", "version", "method", "insert", "onli", "3rd", "version", "into", "schema", "migrat", "tabl", "but", "activerecord", "activ", "record", ":migrat", "migrat", "method", "expect", "tabl", "includ", "all", "version", "are", "perceiv", "as", "pend", "thi", "fact", "caus", "pend", "migrat", "error", "assum", "migrat", "upto", "version", "fetch", "migrat", "file", "rubi", "path", "map", "migrat", "path", "|p|", "rb", "so", "there", "wa", "no", "subdirectori", "support", "behaviour", "fix", "by", "rubi", "path", "map", "migrat", "path", "|p|", "rb", "ad", "test", "case"], "title_sim": [0.8074328688613361], "body_sim": [0.7667126876869836], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.5906759919056103, 0.1228430401653198], "location_sim": [0.30526315789473685, 0.58], "pattern": 0, "time": 1117}, {"A_title": "Fix ActionCable \"Rebroadcasting a Message\" code example", "A_clean_title": ["fix", "actionc", "action", "cabl", "rebroadcast", "messag", "code", "exampl"], "B_title": "Update ActionCable Rebroadcasting a Message documentation", "B_clean_title": ["updat", "actionc", "action", "cabl", "rebroadcast", "messag", "document"], "A_body": "In ActionCable's guide: [Rebroadcasting a Message](http://guides.rubyonrails.org/action_cable_overview.html#rebroadcasting-a-message), the example does not work.\n\n`stream_for \"chat_#{params[:room]}\"` will stream from `chat_:room`, but `ChatChannel.broadcast_to(\"chat_#{params[:room]}\", ...)` will broadcast to `chat:chat_:room`.\n\nSwitching to `stream_for` will make it stream from `chat:chat_:room` and fix the example.\n", "A_clean_body": ["actionc", "action", "cabl", "'s", "guid", "rebroadcast", "messag", "http", "rubyonrail", "html", "guid", "cabl", "overview", "org", "action", "rebroadcast", "messag", "exampl", "not", "work", "stream", "chat", "param", "room", "will", "stream", "chat", "room", "but", "chatchannel", "chat", "channel", "broadcast", "chat", "param", "room", "will", "broadcast", "chat", "chat", "room", "switch", "stream", "will", "make", "it", "stream", "chat", "chat", "room", "fix", "exampl"], "B_body": "### Summary\n\nReplace broadcast_to with ActionCable.server.broadcast to be inline with its partner, #stream_from.\n", "B_clean_body": ["summari", "replac", "broadcast", "actionc", "server", "broadcast", "action", "cabl", "inlin", "it", "partner", "stream"], "title_sim": [0.8985069447655311], "body_sim": [0.4884720669670709], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 7}, {"A_title": "Preserve class on HashWithIndifferentAccess#select", "A_clean_title": ["preserv", "class", "hashwithindifferentaccess", "hash", "indiffer", "access", "select"], "B_title": "HashWithIndifferentAccess#select working as intended", "B_clean_title": ["hashwithindifferentaccess", "hash", "indiffer", "access", "select", "work", "as", "intend"], "A_body": "Previously, calling #select on an instance of HashWithIndifferentAccess could\nlead to unexpected behaviour as it returned an instance of Hash. This is\nbecause Ruby's implementation makes a copy as an instance of Hash.\n\nThis commit defines #select on HashWithIndifferentAccess to return a\nhash of the correct class.\n", "A_clean_body": ["previous", "call", "select", "instanc", "hashwithindifferentaccess", "hash", "indiffer", "access", "could", "lead", "unexpect", "behaviour", "as", "it", "return", "instanc", "hash", "thi", "becaus", "rubi", "'s", "implement", "make", "copi", "as", "instanc", "hash", "thi", "commit", "defin", "select", "hashwithindifferentaccess", "hash", "indiffer", "access", "return", "hash", "correct", "class"], "B_body": "Before this commit, #reject returned a HashWithIndifferentAccess, whereas #select returned a Hash. Now #select also returns a HashWithIndifferentAccess.\n\nI think the behavior was confusing, refactoring some code I changed a couple of `hash_with_indifferent_access.reject { |k,v| v.blank? }` by a `hash_with_indifferent_access.select { |k,v| v.present? }` because I found it a lot more readable in the context it was, and was surprised that the behavior changed.\n\nI'm not sure if testing both bang methods is necessary, but I thought it might not hurt.\n\nHope to hear what you think.\n\nFixes #10723\n", "B_clean_body": ["befor", "thi", "commit", "reject", "return", "hashwithindifferentaccess", "hash", "indiffer", "access", "wherea", "select", "return", "hash", "now", "select", "also", "return", "hashwithindifferentaccess", "hash", "indiffer", "access", "think", "behavior", "wa", "confus", "refactor", "some", "code", "chang", "coupl", "reject", "hash", "indiffer", "access", "|k", "v|", "blank", "by", "select", "hash", "indiffer", "access", "|k", "v|", "present", "becaus", "found", "it", "lot", "more", "readabl", "context", "it", "wa", "wa", "surpris", "that", "behavior", "chang", "'m", "not", "sure", "test", "both", "bang", "method", "necessari", "but", "thought", "it", "might", "not", "hurt", "hope", "hear", "what", "you", "think", "fix", "10723"], "title_sim": [0.709193170037492], "body_sim": [0.7452114415415938], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.2868233785943449, 0.2868233785943449], "location_sim": [0.0, 0.0], "pattern": 0, "time": 1}, {"A_title": "Includes HABTM returns correct size now", "A_clean_title": ["includ", "habtm", "return", "correct", "size", "now"], "B_title": "Includes HABTM returns correct size now. Fixes #16032", "B_clean_title": ["includ", "habtm", "return", "correct", "size", "now", "fix", "16032"], "A_body": "It's caused by the join dependency, only instantiates one HABTM object because the join table hasn't a primary key.\nUpdated commit from @bigxiang commit dbaa837\n\nFixes #16032.\n\nExamples:\n\n```\nbefore:\n\nProject.first.salaried_developers.size # => 3\nProject.includes(:salaried_developers).first.salaried_developers.size # => 1\n\nafter:\n\nProject.first.salaried_developers.size # => 3\nProject.includes(:salaried_developers).first.salaried_developers.size # => 3\n```\n", "A_clean_body": ["it", "'s", "caus", "by", "join", "depend", "onli", "instanti", "one", "habtm", "object", "becaus", "join", "tabl", "ha", "n't", "primari", "key", "updat", "commit", "bigxiang", "commit", "dbaa837", "fix", "16032", "exampl", "befor", "project", "first", "size", "salari", "develop", "project", "includ", "salari", "develop", "first", "size", "salari", "develop", "after", "project", "first", "size", "salari", "develop", "project", "includ", "salari", "develop", "first", "size", "salari", "develop"], "B_body": "Includes HABTM returns correct size now. It's caused by the join dependency only instantiates one HABTM object because the join table hasn't a primary key.\n\nFixes #16032.\n### Examples:\n\nbefore:\n\n``` ruby\n    Project.first.salaried_developers.size # => 3\n    Project.includes(:salaried_developers).first.salaried_developers.size # => 1\n```\n\nafter:\n\n``` ruby\n    Project.first.salaried_developers.size # => 3\n    Project.includes(:salaried_developers).first.salaried_developers.size # => 3\n```\n", "B_clean_body": ["includ", "habtm", "return", "correct", "size", "now", "it", "'s", "caus", "by", "join", "depend", "onli", "instanti", "one", "habtm", "object", "becaus", "join", "tabl", "ha", "n't", "primari", "key", "fix", "16032", "exampl", "befor", "rubi", "project", "first", "size", "salari", "develop", "project", "includ", "salari", "develop", "first", "size", "salari", "develop", "after", "rubi", "project", "first", "size", "salari", "develop", "project", "includ", "salari", "develop", "first", "size", "salari", "develop"], "title_sim": [0.9791750686650652], "body_sim": [0.9697747436182443], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.9873346122889143, 0.9873346122889143], "location_sim": [0.8833333333333333, 0.8833333333333333], "pattern": 1, "time": 181}, {"A_title": "take association conditions into account, When deleting through records", "A_clean_title": ["take", "associ", "condit", "into", "account", "when", "delet", "through", "record"], "B_title": "When deleting through records, take into account association conditions", "B_clean_title": ["when", "delet", "through", "record", "take", "into", "account", "associ", "condit"], "A_body": "", "A_clean_body": [], "B_body": "Fixes #18424.\n\nWhen deleting through records, it didn't take into account the\nconditions that may have been affecting join model table, but was\ndefined in association definition.\n", "B_clean_body": ["fix", "18424", "when", "delet", "through", "record", "it", "did", "n't", "take", "into", "account", "condit", "that", "may", "have", "been", "affect", "join", "model", "tabl", "but", "wa", "defin", "associ", "definit"], "title_sim": [1.0], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.8325079666192824, 1.0], "location_sim": [0.6990291262135923, 1.0], "pattern": 0, "time": 0}, {"A_title": "Rename ActiveModel::Model to ActiveModel::BasicModel", "A_clean_title": ["renam", "activemodel", "activ", "model", ":model", "activemodel", "activ", "model", ":basicmodel", ":basic", "model"], "B_title": "Rename ActiveModel::Model to ActiveModel::BasicModel", "B_clean_title": ["renam", "activemodel", "activ", "model", ":model", "activemodel", "activ", "model", ":basicmodel", ":basic", "model"], "A_body": "", "A_clean_body": [], "B_body": "This module provides the sets of features required to support the ActiveModel API and no more. Its naming is meant to be reminiscent of Ruby's Object and BasicObject.\n", "B_clean_body": ["thi", "modul", "provid", "set", "featur", "requir", "support", "activemodel", "activ", "model", "api", "no", "more", "it", "name", "meant", "reminisc", "rubi", "'s", "object", "basicobject", "basic", "object"], "title_sim": [1.0], "body_sim": [0.0], "file_list_sim": 0.5555555555555556, "overlap_files_len": 5, "code_sim": [0.46960293248073126, 0.37082815949710235], "location_sim": [0.5934426229508196, 0.8008849557522124], "pattern": 0, "time": 231}, {"A_title": "Update activesupport/lib/active_support/json/backends/okjson.rb", "A_clean_title": ["updat", "rb", "activesupport", "lib", "activ", "support", "json", "backend", "okjson"], "B_title": "Update activesupport/lib/active_support/json/backends/okjson.rb", "B_clean_title": ["updat", "rb", "activesupport", "lib", "activ", "support", "json", "backend", "okjson"], "A_body": "Okjson not parsing \" ' \" (single quote character). Writing a method and adding conditions for the same.\nFor example the following Json response will not be parsed properly : \n[{'key' : 'value'}]\nbut if the response uses double quotes(\") instead of single quotes (') it will work properly.\nThis commit will also take care of responses returned with single quotes.\n", "A_clean_body": ["okjson", "not", "pars", "singl", "quot", "charact", "write", "method", "ad", "condit", "same", "exampl", "follow", "json", "respons", "will", "not", "pars", "properli", "'key", "'valu", "but", "respons", "use", "doubl", "quot", "instead", "singl", "quot", "it", "will", "work", "properli", "thi", "commit", "will", "also", "take", "care", "respons", "return", "singl", "quot"], "B_body": "handling single quote in json data while decoding. Ex : {'key' : 'value'}\nIssue: #9186\n", "B_clean_body": ["handl", "singl", "quot", "json", "data", "while", "decod", "ex", "'key", "'valu", "issu", "9186"], "title_sim": [1.0000000000000002], "body_sim": [0.5612654751170439], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.7176562588604802, 0.7176562588604802], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "`delgated` => `delegated`", "A_clean_title": ["delgat", "deleg"], "B_title": "`delgated` => `delegated`", "B_clean_title": ["delgat", "deleg"], "A_body": "", "A_clean_body": [], "B_body": "`delgated` => `delegated`\n", "B_clean_body": ["delgat", "deleg"], "title_sim": [0.0], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [0.6666666666666666, 0.6666666666666666], "pattern": 0, "time": 0}]