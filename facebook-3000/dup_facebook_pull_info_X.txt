[{"A_title": "Fix lint", "A_clean_title": ["fix", "lint"], "B_title": "Fix a lint error", "B_clean_title": ["fix", "lint", "error"], "A_body": "Whitespace.", "A_clean_body": ["whitespac"], "B_body": "", "B_clean_body": [], "title_sim": [0.6284458392005966], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "remove &nbsp; and use space instead", "A_clean_title": ["remov", "nbsp", "use", "space", "instead"], "B_title": "Fix spacing in documentation", "B_clean_title": ["fix", "space", "document"], "A_body": "", "A_clean_body": [], "B_body": "Replace non-breaking space by space in refs and the dom.\r\n\r\nFixes:\r\n![image](https://cloud.githubusercontent.com/assets/132/23370341/a2076bd2-fd14-11e6-8c92-bbf55d10fd30.png)\r\n", "B_clean_body": ["replac", "non", "break", "space", "by", "space", "ref", "dom", "fix", "imag", "http", "fd14", "11e6", "8c92", "githubusercont", "bbf55d10fd30", "png", "cloud", "com", "asset", "132", "23370341", "a2076bd2"], "title_sim": [0.12004233141323457], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 1}, {"A_title": "Add capture to supported attributes", "A_clean_title": ["add", "captur", "support", "attribut"], "B_title": "add capture property #3948", "B_clean_title": ["add", "captur", "properti", "3948"], "A_body": "Fixes #3948\n", "A_clean_body": ["fix", "3948"], "B_body": "see #3948 \n", "B_clean_body": ["see", "3948"], "title_sim": [0.40039060154820316], "body_sim": [-0.007952359780521261], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.814869036199639, 0.814869036199639], "location_sim": [1.0, 1.0], "pattern": 1, "time": 0}, {"A_title": "Ignore transitionend events originating from children", "A_clean_title": ["ignor", "transitionend", "event", "origin", "children"], "B_title": "Only stop if the transition on this element ended", "B_clean_title": ["onli", "stop", "transit", "thi", "element", "end"], "A_body": "On Mobile Safari, in `ReactCSSTransitionGroupChild.js`, `transitionend` events from child nodes would bubble up to the `endListener` causing a premature DOM removal if the transition durations were not in sync.\n", "A_clean_body": ["mobil", "safari", "reactcsstransitiongroupchild", "js", "react", "css", "transit", "group", "child", "transitionend", "event", "child", "node", "would", "bubbl", "up", "endlisten", "end", "listen", "caus", "prematur", "dom", "remov", "transit", "durat", "were", "not", "sync"], "B_body": "This way it doesn't end when some random element elsewhere on the page has an ending transition.\n\nIt must be noted that this is not a complete fix. If you have multiple transitions on the element, it still ends when the first ends.\n\nI ran into this not working (the transition ends almost immediately, because some unrelated transition ends). This fixes it for me, but I was wondering whether this cornercase was considered, and whether the other cornercase (multiple transitions) was considered.\n\nI think it's very hard to get this correct, and think it might be better to make the timeout explicit, or at least allow to set it explicit, and fall back to this behaviour. But I'm really interested in feedback on this one.\n", "B_clean_body": ["thi", "way", "it", "n't", "end", "when", "some", "random", "element", "elsewher", "page", "ha", "end", "transit", "it", "must", "note", "that", "thi", "not", "complet", "fix", "you", "have", "multipl", "transit", "element", "it", "still", "end", "when", "first", "end", "ran", "into", "thi", "not", "work", "transit", "end", "almost", "immedi", "becaus", "some", "unrel", "transit", "end", "thi", "fix", "it", "me", "but", "wa", "wonder", "whether", "thi", "cornercas", "wa", "consid", "whether", "other", "cornercas", "multipl", "transit", "wa", "consid", "think", "it", "'s", "veri", "hard", "get", "thi", "correct", "think", "it", "might", "better", "make", "timeout", "explicit", "or", "at", "least", "allow", "set", "it", "explicit", "fall", "back", "thi", "behaviour", "but", "'m", "realli", "interest", "feedback", "thi", "one"], "title_sim": [0.0072598944970940354], "body_sim": [0.36926861904180164], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.43544802894186396, 0.43544802894186396], "location_sim": [1.0, 1.0], "pattern": 0, "time": 157}, {"A_title": "updateComponent should update the context iff it has changed", "A_clean_title": ["updatecompon", "updat", "compon", "updat", "context", "iff", "it", "ha", "chang"], "B_title": "Unit Test for Context Updates", "B_clean_title": ["unit", "test", "context", "updat"], "A_body": "This fixes a bug where children of a component won't get context updates.\n", "A_clean_body": ["thi", "fix", "bug", "where", "children", "compon", "wo", "n't", "get", "context", "updat"], "B_body": "Fixes #4218\n\nBut not well\n", "B_clean_body": ["fix", "4218", "but", "not", "well"], "title_sim": [0.7107282228881253], "body_sim": [0.17371867165007102], "file_list_sim": 0.6, "overlap_files_len": 3, "code_sim": [0.8396032097031464, 0.9728963282109045], "location_sim": [0.23487544483985764, 0.3188405797101449], "pattern": 0, "time": 0}, {"A_title": "Fix primitive values comparison of shallowEqual", "A_clean_title": ["fix", "primit", "valu", "comparison", "shallowequ", "shallow", "equal"], "B_title": "Fixed shallowEqual for arguments that are not objects", "B_clean_title": ["fix", "shallowequ", "shallow", "equal", "argument", "that", "are", "not", "object"], "A_body": "see #3369\n", "A_clean_body": ["see", "3369"], "B_body": "Fixed shallowEqual implementation to handle the case when inputs are not objects.\n\nIf either argument is not an object and unequal, then shallowEqual should return false.\nIf only one argument is an object, then shallowEqual should return false.\n\nFixes #3369\n", "B_clean_body": ["fix", "shallowequ", "shallow", "equal", "implement", "handl", "case", "when", "input", "are", "not", "object", "either", "argument", "not", "object", "unequ", "then", "shallowequ", "shallow", "equal", "return", "fals", "onli", "one", "argument", "object", "then", "shallowequ", "shallow", "equal", "return", "fals", "fix", "3369"], "title_sim": [0.3792480255637019], "body_sim": [0.0697522743194949], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.8663871296797685, 0.8663871296797685], "location_sim": [1.0, 1.0], "pattern": 1, "time": 0}, {"A_title": "Fix some ESlint warnings", "A_clean_title": ["fix", "some", "eslint", "slint", "warn"], "B_title": "Lint/cleanup", "B_clean_title": ["lint", "cleanup"], "A_body": "CONTRIBUTING.md should do `grunt lint` to your codes.\nBut, It has many warnings (max-len) now.\n\n```\n\u279c grunt lint\nRunning \"eslint\" task\n>> Lint passed (but may contain warnings)\n:\n\u2716 104 problems (0 errors, 104 warnings)\n```\n\nThis pull request is fixing it.\n\n```\n \u279c  grunt lint\nRunning \"eslint\" task\n>> Lint passed (but may contain warnings)\n\nDone, without errors.\n```\n\nAll warnings are about 'max-len'.\nTherefore, this changes are for formatting codes.\n", "A_clean_body": ["contribut", "md", "grunt", "lint", "your", "code", "but", "it", "ha", "mani", "warn", "max", "len", "now", "grunt", "lint", "run", "eslint", "task", "lint", "pass", "but", "may", "contain", "warn", "104", "problem", "error", "104", "warn", "thi", "pull", "request", "fix", "it", "grunt", "lint", "run", "eslint", "task", "lint", "pass", "but", "may", "contain", "warn", "done", "without", "error", "all", "warn", "are", "about", "'max", "len", "therefor", "thi", "chang", "are", "format", "code"], "B_body": "Lint was not happy about some files. So I made him happy again (partially).\n\nI was not quite sure what the format was when placing expressions over multiple llines. So If there some tabs necessary or other things, please let me know, I will update it asap :).\n", "B_clean_body": ["lint", "wa", "not", "happi", "about", "some", "file", "so", "made", "him", "happi", "again", "partial", "wa", "not", "quit", "sure", "what", "format", "wa", "when", "place", "express", "over", "multipl", "lline", "so", "there", "some", "tab", "necessari", "or", "other", "thing", "pleas", "let", "me", "know", "will", "updat", "it", "asap"], "title_sim": [0.1884217754202264], "body_sim": [0.16798914962515918], "file_list_sim": 0.1875, "overlap_files_len": 3, "code_sim": [0.0, 0.0], "location_sim": [0.5241228070175439, 1.0], "pattern": 0, "time": 14}, {"A_title": "Ignore transition end events from nested nodes (fixes ReactCSSTransitionGroup behaviour)", "A_clean_title": ["ignor", "transit", "end", "event", "nest", "node", "fix", "reactcsstransitiongroup", "react", "css", "transit", "group", "behaviour"], "B_title": "Only stop if the transition on this element ended", "B_clean_title": ["onli", "stop", "transit", "thi", "element", "end"], "A_body": "This commit fixes pretty common problem: when you have nested node with CSS transition (non `ReactCSSTransitionGroupChild`), end event bubbles up to the parent that leads to prematurely node removal.\n\nE.g modal window (wrapped into `ReactCSSTransitionGroupChild`) going to move up and then disappear after pressing \"close window\". But right after window (with that button) move a bit up button gets mouse out event, that leads to background transition (on hover \u2192 normal state) that leads to transition end event. End event bubbles up and modal window get's it. Boom, modal window removed earlier than it should be.\n", "A_clean_body": ["thi", "commit", "fix", "pretti", "common", "problem", "when", "you", "have", "nest", "node", "css", "transit", "non", "reactcsstransitiongroupchild", "react", "css", "transit", "group", "child", "end", "event", "bubbl", "up", "parent", "that", "lead", "prematur", "node", "remov", "modal", "window", "wrap", "into", "reactcsstransitiongroupchild", "react", "css", "transit", "group", "child", "go", "move", "up", "then", "disappear", "after", "press", "close", "window", "but", "right", "after", "window", "that", "button", "move", "bit", "up", "button", "get", "mous", "out", "event", "that", "lead", "background", "transit", "hover", "normal", "state", "that", "lead", "transit", "end", "event", "end", "event", "bubbl", "up", "modal", "window", "get", "'s", "it", "boom", "modal", "window", "remov", "earlier", "than", "it"], "B_body": "This way it doesn't end when some random element elsewhere on the page has an ending transition.\n\nIt must be noted that this is not a complete fix. If you have multiple transitions on the element, it still ends when the first ends.\n\nI ran into this not working (the transition ends almost immediately, because some unrelated transition ends). This fixes it for me, but I was wondering whether this cornercase was considered, and whether the other cornercase (multiple transitions) was considered.\n\nI think it's very hard to get this correct, and think it might be better to make the timeout explicit, or at least allow to set it explicit, and fall back to this behaviour. But I'm really interested in feedback on this one.\n", "B_clean_body": ["thi", "way", "it", "n't", "end", "when", "some", "random", "element", "elsewher", "page", "ha", "end", "transit", "it", "must", "note", "that", "thi", "not", "complet", "fix", "you", "have", "multipl", "transit", "element", "it", "still", "end", "when", "first", "end", "ran", "into", "thi", "not", "work", "transit", "end", "almost", "immedi", "becaus", "some", "unrel", "transit", "end", "thi", "fix", "it", "me", "but", "wa", "wonder", "whether", "thi", "cornercas", "wa", "consid", "whether", "other", "cornercas", "multipl", "transit", "wa", "consid", "think", "it", "'s", "veri", "hard", "get", "thi", "correct", "think", "it", "might", "better", "make", "timeout", "explicit", "or", "at", "least", "allow", "set", "it", "explicit", "fall", "back", "thi", "behaviour", "but", "'m", "realli", "interest", "feedback", "thi", "one"], "title_sim": [0.47215189766816507], "body_sim": [0.4770783466422864], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.3860978571003733, 0.3860978571003733], "location_sim": [1.0, 1.0], "pattern": 0, "time": 158}, {"A_title": "Fixing jQuery, Velocity compatibility", "A_clean_title": ["fix", "jqueri", "queri", "veloc", "compat"], "B_title": "Another fix for #4876, TransitionGroup errors", "B_clean_title": ["anoth", "fix", "4876", "transitiongroup", "transit", "group", "error"], "A_body": "this fixes https://github.com/facebook/react/issues/5296\n", "A_clean_body": ["thi", "fix", "http", "github", "com", "facebook", "react", "issu", "5296"], "B_body": "If the component has unmounted before a transition completes, sometimes the ref is undefined therefore it will throw. By adding a check to make sure we actually successfully got the ref, we avoid the error.\n\nThis is a fix for [4876](https://github.com/facebook/react/issues/4876)\n", "B_clean_body": ["compon", "ha", "unmount", "befor", "transit", "complet", "sometim", "ref", "undefin", "therefor", "it", "will", "throw", "by", "ad", "check", "make", "sure", "we", "actual", "success", "got", "ref", "we", "avoid", "error", "thi", "fix", "4876", "http", "github", "com", "facebook", "react", "issu", "4876"], "title_sim": [0.11649465663475828], "body_sim": [0.38883899999346555], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [0.6666666666666666, 0.6666666666666666], "pattern": -1, "time": 5}, {"A_title": "Documentation: Fixed typo / grammar in 'clone with props'", "A_clean_title": ["document", "fix", "typo", "grammar", "'clone", "prop"], "B_title": "Fix minor typo in `cloneWithProps` doc", "B_clean_title": ["fix", "minor", "typo", "clonewithprop", "clone", "prop", "doc"], "A_body": "As per grammar rules, you use 'a' before words that begin with a consonant sound and 'an' before words that begin with a vowel sound, hence, 'an element' rather than 'a element'.\n", "A_clean_body": ["as", "per", "grammar", "rule", "you", "use", "befor", "word", "that", "begin", "conson", "sound", "'an", "befor", "word", "that", "begin", "vowel", "sound", "henc", "'an", "element", "rather", "than", "element"], "B_body": "", "B_clean_body": [], "title_sim": [0.47173547791778814], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.6666666666666666, 1.0], "pattern": 0, "time": 8}, {"A_title": "Fix #5929. Set default prop when prop is undefined while cloning", "A_clean_title": ["fix", "5929", "set", "default", "prop", "when", "prop", "undefin", "while", "clone"], "B_title": "Fix #5929. Resolve to default props when config key is set to undefined in cloneElement", "B_clean_title": ["fix", "5929", "resolv", "default", "prop", "when", "config", "key", "set", "undefin", "cloneel", "clone", "element"], "A_body": "Set default props if a passed in prop is undefined while using cloneElement, the same as what happens when doing createElement.\n", "A_clean_body": ["set", "default", "prop", "pass", "prop", "undefin", "while", "cloneel", "clone", "element", "same", "as", "what", "happen", "when", "do", "createel", "creat", "element"], "B_body": "Fix #5929. Resolve to default props when config key is set to undefined in cloneElement\n\n```\nvar Foo = React.createClass({\n   getDefaultProps: function() {\n      return {foo: 'bar'};\n   },\n   render: function() {\n      return React.createElement('span', null, this.props.prop);\n   },\n});\n\nclonedElement = React.cloneElement(React.createElement(Foo, {foo: 'foo'}), {foo: undefined});\nconsole.log(element.props.foo); // Should be 'bar' instead of undefined\n```\n", "B_clean_body": ["fix", "5929", "resolv", "default", "prop", "when", "config", "key", "set", "undefin", "cloneel", "clone", "element", "var", "foo", "react", "createclass", "creat", "class", "getdefaultprop", "get", "default", "prop", "function", "return", "foo", "'bar", "render", "function", "return", "react", "createel", "creat", "element", "'span", "null", "thi", "prop", "prop", "clonedel", "clone", "element", "react", "cloneel", "clone", "element", "react", "createel", "creat", "element", "foo", "foo", "'foo", "foo", "undefin", "consol", "log", "element", "prop", "foo", "'bar", "instead", "undefin"], "title_sim": [0.7401764707596162], "body_sim": [0.9077029426472023], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.7339003913472635, 0.977264732957214], "location_sim": [0.0, 0.0], "pattern": 1, "time": 6}, {"A_title": "Adding \"appear\" phase to ReactTransitionGroup and ReactCSSTransitionGroup", "A_clean_title": ["ad", "appear", "phase", "reacttransitiongroup", "react", "transit", "group", "reactcsstransitiongroup", "react", "css", "transit", "group"], "B_title": "Add componentWillEnterOnMount to ReactTransitionGroup children", "B_clean_title": ["add", "componentwillenteronmount", "compon", "will", "enter", "mount", "reacttransitiongroup", "react", "transit", "group", "children"], "A_body": "\"appear\" differs from \"enter\" in that all children of a transition group at mount time will \"appear\" but will not \"enter\". All children later added to an existing transition group will \"enter\" but not \"appear\".\n\nThis extra transition phase allows for animation-on-mount effects.\n\nA mirroring \"appear\" prop has been added to ReactCSSTransitionGroup, however for reverse-compatibility (and because \"appear\" is less common) it defaults to false.\n\nThanks to @appsforartists for his work investigating the possible ways to implement this.\n", "A_clean_body": ["appear", "differ", "enter", "that", "all", "children", "transit", "group", "at", "mount", "time", "will", "appear", "but", "will", "not", "enter", "all", "children", "later", "ad", "exist", "transit", "group", "will", "enter", "but", "not", "appear", "thi", "extra", "transit", "phase", "allow", "anim", "mount", "effect", "mirror", "appear", "prop", "ha", "been", "ad", "reactcsstransitiongroup", "react", "css", "transit", "group", "howev", "revers", "compat", "becaus", "appear", "less", "common", "it", "default", "fals", "thank", "appsforartist", "hi", "work", "investig", "possibl", "way", "implement", "thi"], "B_body": "Presently, ReactTransitionGroup will trigger `enter` and `leave` states for children that are modified while the `TransitionGroup` is active, but doesn't provide any hooks for similar animations at mount time.\n\nThis is problematic for implementing transitions [like this](https://material-design.storage.googleapis.com/publish/v_1/quantumexternal/0B08MbvYZK1iNTGRLb2Zud2RUNFE/animation-meaningfultransitions-hierarchicaltiming-4do_large_xhdpi.webm) while also making sure your nodes are present at mount-time for SEO purposes.  \n\n@leebyron suggested adding a separate state to differentiate nodes that are present at mount-time from ones that are added later.  Obviously, `componentWillEnter` already had a well-defined behavior, so to stay as consistent as possible without interfering with it, I've used the name `componentWillEnterOnMount` for the callback.  The implementation is identical to `componentWillEnter`, except for the different state and callback names.  (There's probably room to refactor them in the future, but this works for a proof-of-concept.)\n\nI'm also happy to add `transitionMount` to `CSSTransitionGroupChild`.\n\nObviously, docs and tests will need to come.  I'm opening this now to anchor the conversation.\n", "B_clean_body": ["present", "reacttransitiongroup", "react", "transit", "group", "will", "trigger", "enter", "leav", "state", "children", "that", "are", "modifi", "while", "transitiongroup", "transit", "group", "activ", "but", "n't", "provid", "ani", "hook", "similar", "anim", "at", "mount", "time", "thi", "problemat", "implement", "transit", "like", "thi", "http", "meaningfultransit", "hierarchicaltim", "materi", "design", "storag", "googleapi", "webm", "4do", "larg", "xhdpi", "com", "publish", "quantumextern", "0b08mbvyzk1intgrlb2zud2runf", "anim", "0b08mbv", "yzk1i", "ntgr", "lb2zud2runf", "while", "also", "make", "sure", "your", "node", "are", "present", "at", "mount", "time", "seo", "purpos", "leebyron", "suggest", "ad", "separ", "state", "differenti", "node", "that", "are", "present", "at", "mount", "time", "one", "that", "are", "ad", "later", "obvious", "componentwillent", "compon", "will", "enter", "alreadi", "had", "well", "defin", "behavior", "so", "stay", "as", "consist", "as", "possibl", "without", "interf", "it", "'ve", "use", "name", "componentwillenteronmount", "compon", "will", "enter", "mount", "callback", "implement", "ident", "componentwillent", "compon", "will", "enter", "except", "differ", "state", "callback", "name", "there", "'s", "probabl", "room", "refactor", "them", "futur", "but", "thi", "work", "proof", "concept", "'m", "also", "happi", "add", "transitionmount", "transit", "mount", "csstransitiongroupchild", "css", "transit", "group", "child", "obvious", "doc", "test", "will", "need", "come", "'m", "open", "thi", "now", "anchor", "convers"], "title_sim": [0.31988245146995514], "body_sim": [0.6644322072632556], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.3351596406622629, 0.5533514110705763], "location_sim": [0.6145251396648045, 0.9482758620689655], "pattern": 0, "time": 0}, {"A_title": "Fix event target for input change events.  Fixes #4288\n", "A_clean_title": ["fix", "event", "target", "input", "chang", "event", "fix", "4288"], "B_title": "[NEEDS WORK] Try to fix #4288", "B_clean_title": ["need", "work", "tri", "fix", "4288"], "A_body": "Fix event target for input change events.  Fixes #4288\n", "A_clean_body": ["fix", "event", "target", "input", "chang", "event", "fix", "4288"], "B_body": "This is my attempt at fixing the #4288 regression in `0.14.0-beta1`.\n\nI also included a fix for onBeforeInput which I expect has the same bug as onChange.\n\nHowever I could not get the test system to work (change listeners aren't fired by the mock input event like they're supposed to).\n\nSomeone more experienced than me is going to have to write a test for this bug that actually works.\n", "B_clean_body": ["thi", "my", "attempt", "at", "fix", "4288", "regress", "beta1", "14", "also", "includ", "fix", "onbeforeinput", "befor", "input", "which", "expect", "ha", "same", "bug", "as", "onchang", "chang", "howev", "could", "not", "get", "test", "system", "work", "chang", "listen", "are", "n't", "fire", "by", "mock", "input", "event", "like", "they", "'re", "suppos", "someon", "more", "experienc", "than", "me", "go", "have", "write", "test", "thi", "bug", "that", "actual", "work"], "title_sim": [0.19278105991195563], "body_sim": [0.4480672644256574], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.6451733310661028, 1.0], "location_sim": [0.6583333333333333, 1.0], "pattern": 1, "time": 2}, {"A_title": "Grammar correction in ReactDOMInput.js warning", "A_clean_title": ["grammar", "correct", "reactdominput", "js", "react", "dom", "input", "warn"], "B_title": "Change warning text: 'a uncontrolled' --> 'an uncontrolled'", "B_clean_title": ["chang", "warn", "text", "uncontrol", "'an", "uncontrol"], "A_body": "Changed \"**a** uncontrolled input\" to \"**an** uncontrolled input\".\n", "A_clean_body": ["chang", "**a**", "uncontrol", "input", "**an**", "uncontrol", "input"], "B_body": "Changes new React 15 warning regarding controlled component status switching to properly use \"an\" rather than \"a\" before \"uncontrolled,\" which begins with a vowel sound.\n", "B_clean_body": ["chang", "new", "react", "15", "warn", "regard", "control", "compon", "statu", "switch", "properli", "use", "rather", "than", "befor", "uncontrol", "which", "begin", "vowel", "sound"], "title_sim": [0.14679575457138008], "body_sim": [0.6395788787572124], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.8888888888888888, 1.0], "pattern": 0, "time": 6}, {"A_title": "Add feature flag to disable Fiber-only features", "A_clean_title": ["add", "featur", "flag", "disabl", "fiber", "onli", "featur"], "B_title": "[Fiber] Throw on undefined component output", "B_clean_title": ["fiber", "throw", "undefin", "compon", "output"], "A_body": "Disables Fiber-only render return types", "A_clean_body": ["disabl", "fiber", "onli", "render", "return", "type"], "B_body": "This removes an (in my opinion) unnecessary duplicate warning from Stack so that I don't have to reimplement it in Fiber. Then it changes Fiber to throw on undefined component output.\r\n\r\nSee individual commits. Only the last commit affects Fiber, the rest are tweaking Stack and tests.", "B_clean_body": ["thi", "remov", "my", "opinion", "unnecessari", "duplic", "warn", "stack", "so", "that", "n't", "have", "reimplement", "it", "fiber", "then", "it", "chang", "fiber", "throw", "undefin", "compon", "output", "see", "individu", "commit", "onli", "last", "commit", "affect", "fiber", "rest", "are", "tweak", "stack", "test"], "title_sim": [0.09116171606353234], "body_sim": [0.2864388307511388], "file_list_sim": 0.5454545454545454, "overlap_files_len": 6, "code_sim": [0.43345020603149764, 0.841038290663959], "location_sim": [0.3283018867924528, 0.8246445497630331], "pattern": 0, "time": 14}, {"A_title": "Improve error messages for invalid element types", "A_clean_title": ["improv", "error", "messag", "invalid", "element", "type"], "B_title": "A more descriptive createElement warning", "B_clean_title": ["more", "descript", "createel", "creat", "element", "warn"], "A_body": "cc @mkonicek https://twitter.com/martinkonicek/status/810917317639110661", "A_clean_body": ["cc", "mkonicek", "http", "twitter", "com", "martinkonicek", "statu", "810917317639110661"], "B_body": "See #7307\n\nThis PR creates a doc to explain the possible causes of a `createElement` warning when used with invalid types.\n", "B_clean_body": ["see", "7307", "thi", "pr", "creat", "doc", "explain", "possibl", "caus", "createel", "creat", "element", "warn", "when", "use", "invalid", "type"], "title_sim": [0.19867841149796062], "body_sim": [0.041589470923562945], "file_list_sim": 0.3333333333333333, "overlap_files_len": 3, "code_sim": [0.30244350097477257, 0.26986890806078667], "location_sim": [0.4142538975501114, 0.7848101265822784], "pattern": 0, "time": 140}, {"A_title": "Bailout if the element and the context is unchanged properly", "A_clean_title": ["bailout", "element", "context", "unchang", "properli"], "B_title": "Don't skip reconcilation if context differs", "B_clean_title": ["n't", "skip", "reconcil", "context", "differ"], "A_body": "Currently, We use `===` to check if a context is changed [before bailing out](https://github.com/facebook/react/blob/master/src/renderers/shared/stack/reconciler/ReactReconciler.js#L130), but we [create a new context](https://github.com/facebook/react/blob/master/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L673) everytime a compnent is updated, regardless the origin context provided by the consumer is unchanged. \n\nAs a result, `===` would always return `false` unless the context is `undefined`. That is, when there is a context, a component would never be bailed out. Specifically, If we use `react-redux`, `react-router`, `react-intl` or any other lib which provides a context, we would get no bailout optimization.\n\nTo fix this, I suggest we use `shallowEqual` instead of `===`. But I am not sure it would introduce a breaking change or not. I have made this change in this PR along with a test.\n", "A_clean_body": ["current", "we", "use", "check", "context", "chang", "befor", "bail", "out", "http", "js", "github", "com", "facebook", "react", "blob", "master", "src", "render", "share", "stack", "reconcil", "reactreconcil", "react", "reconcil", "l130", "but", "we", "creat", "new", "context", "http", "js", "github", "com", "facebook", "react", "blob", "master", "src", "render", "share", "stack", "reconcil", "reactcompositecompon", "react", "composit", "compon", "l673", "everytim", "compnent", "updat", "regardless", "origin", "context", "provid", "by", "consum", "unchang", "as", "result", "would", "alway", "return", "fals", "unless", "context", "undefin", "that", "when", "there", "context", "compon", "would", "never", "bail", "out", "specif", "we", "use", "react", "redux", "react", "router", "react", "intl", "or", "ani", "other", "lib", "which", "provid", "context", "we", "would", "get", "no", "bailout", "optim", "fix", "thi", "suggest", "we", "use", "shallowequ", "shallow", "equal", "instead", "but", "am", "not", "sure", "it", "would", "introduc", "break", "chang", "or", "not", "have", "made", "thi", "chang", "thi", "pr", "along", "test"], "B_body": "This adds a reconciliation bailout condition asserting that context has not changed, which fixes the other half of @ryanflorence's discovery in https://github.com/facebook/react/issues/4218.\n\nFor those following along, the first half of this bug was fixed in https://github.com/facebook/react/pull/4221.  The assertion that there may be a bug in the reconciler turned out to be due to a bug in jest: https://github.com/facebook/jest/issues/429 (if you're bored and want to have fun, see if you can identify the 'fix' in this diff that avoids that bug).  But I digress...\n\nThis diff results in a divergence between dev and prod behavior (specifically, more components will rerender more often in dev) because we no longer bail out of reconciliation in dev mode due to https://github.com/facebook/react/pull/3516/files causing there to always be a context variable change.  This means not only that we should start running React unit tests in both dev and prod mode, but also has ramifications for developers who only test in dev before shipping their components to prod.\n\n@sebmarkbage @spicyj \n", "B_clean_body": ["thi", "add", "reconcili", "bailout", "condit", "assert", "that", "context", "ha", "not", "chang", "which", "fix", "other", "half", "ryanflor", "'s", "discoveri", "http", "github", "com", "facebook", "react", "issu", "4218", "those", "follow", "along", "first", "half", "thi", "bug", "wa", "fix", "http", "github", "com", "facebook", "react", "pull", "4221", "assert", "that", "there", "may", "bug", "reconcil", "turn", "out", "due", "bug", "jest", "http", "github", "com", "facebook", "jest", "issu", "429", "you", "'re", "bore", "want", "have", "fun", "see", "you", "identifi", "'fix", "thi", "diff", "that", "avoid", "that", "bug", "but", "digress", "thi", "diff", "result", "diverg", "between", "dev", "prod", "behavior", "specif", "more", "compon", "will", "rerend", "more", "often", "dev", "becaus", "we", "no", "longer", "bail", "out", "reconcili", "dev", "mode", "due", "http", "github", "com", "facebook", "react", "pull", "3516", "file", "caus", "there", "alway", "context", "variabl", "chang", "thi", "mean", "not", "onli", "that", "we", "start", "run", "react", "unit", "test", "both", "dev", "prod", "mode", "but", "also", "ha", "ramif", "develop", "who", "onli", "test", "dev", "befor", "ship", "their", "compon", "prod", "sebmarkbag", "spicyj"], "title_sim": [0.31323726058179546], "body_sim": [0.504966273729325], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.5263291176340408, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 445}, {"A_title": "Make jsfiddle iframes work on https pages", "A_clean_title": ["make", "jsfiddl", "ifram", "work", "http", "page"], "B_title": "Using https URLs for embedded fiddles", "B_clean_title": ["http", "url", "ur", "ls", "embed", "fiddl"], "A_body": "When viewing https://facebook.github.io/react/blog/2013/11/05/thinking-in-react.html, none of the jsfiddle iframes show up because they are pointing to http links. Using a protocol-relative URL works for both http and https access.\n", "A_clean_body": ["when", "view", "http", "github", "react", "html", "facebook", "io", "react", "blog", "2013", "11", "05", "think", "none", "jsfiddl", "ifram", "show", "up", "becaus", "they", "are", "point", "http", "link", "protocol", "rel", "url", "work", "both", "http", "http", "access"], "B_body": "Official announcement from jsfiddle:\nhttps://twitter.com/jsfiddle/status/565041134435852289\n", "B_clean_body": ["offici", "announc", "jsfiddl", "http", "twitter", "com", "jsfiddl", "statu", "565041134435852289"], "title_sim": [0.03497274986190603], "body_sim": [0.2588567940229988], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.44680851063829785, 1.0], "pattern": 0, "time": 0}, {"A_title": "Add callback validation to fiber-based renderers", "A_clean_title": ["add", "callback", "valid", "fiber", "base", "render"], "B_title": "[Fiber]Fix tests for mount/update callback errors", "B_clean_title": ["fiber", "fix", "test", "mount", "updat", "callback", "error"], "A_body": "Moved `ReactFiberClassComponent` `validateCallback()` helper function into a standalone util used by both fiber and stack implementations. Validation now happens in `ReactFiberUpdateQueue` so that non-DOM renderers will also benefit from it.\r\n\r\nThis fixes 2 failing fiber tests.", "A_clean_body": ["move", "reactfiberclasscompon", "react", "fiber", "class", "compon", "validatecallback", "valid", "callback", "helper", "function", "into", "standalon", "util", "use", "by", "both", "fiber", "stack", "implement", "valid", "now", "happen", "reactfiberupdatequeu", "react", "fiber", "updat", "queue", "so", "that", "non", "dom", "render", "will", "also", "benefit", "it", "thi", "fix", "fail", "fiber", "test"], "B_body": "This PR fixes some failing Fiber tests.\r\n\r\nThis is passing `callerName` to validate callback arguments.\r\n`callerName` is being passed as an optional argument. Should I annotate it as a required argument?", "B_clean_body": ["thi", "pr", "fix", "some", "fail", "fiber", "test", "thi", "pass", "callernam", "caller", "name", "valid", "callback", "argument", "callernam", "caller", "name", "be", "pass", "as", "option", "argument", "annot", "it", "as", "requir", "argument"], "title_sim": [0.4882982064272811], "body_sim": [0.23135758377856888], "file_list_sim": 0.36363636363636365, "overlap_files_len": 4, "code_sim": [0.03506125782362322, 0.012063509463917437], "location_sim": [0.08780487804878048, 0.2033898305084746], "pattern": 0, "time": 36}, {"A_title": "Fix a typo in the working-with-the-browser docs", "A_clean_title": ["fix", "typo", "work", "browser", "doc"], "B_title": "Adding note about onScroll on IE8", "B_clean_title": ["ad", "note", "about", "onscrol", "scroll", "ie8"], "A_body": "", "A_clean_body": [], "B_body": "Adding note about onScroll on IE8.\nFixes #631\n", "B_clean_body": ["ad", "note", "about", "onscrol", "scroll", "ie8", "fix", "631"], "title_sim": [0.012746529092163329], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 3}, {"A_title": "Warn when setState called within getChildContext", "A_clean_title": ["warn", "when", "setstat", "set", "state", "call", "within", "getchildcontext", "get", "child", "context"], "B_title": "Fix #6114 - Calling setState inside getChildContext should warn", "B_clean_title": ["fix", "6114", "call", "setstat", "set", "state", "insid", "getchildcontext", "get", "child", "context", "warn"], "A_body": "Fix for #6114\n\nI guess that we should reject update to prevent \"maximum call stack\" error.\n@jimfb what are you think?\n", "A_clean_body": ["fix", "6114", "guess", "that", "we", "reject", "updat", "prevent", "maximum", "call", "stack", "error", "jimfb", "what", "are", "you", "think"], "B_body": "It doesn't pass one of the tests, but I'm curious if this is the right direction or not.\n", "B_clean_body": ["it", "n't", "pass", "one", "test", "but", "'m", "curiou", "thi", "right", "direct", "or", "not"], "title_sim": [0.8257359268834006], "body_sim": [0.14424207182692345], "file_list_sim": 0.3333333333333333, "overlap_files_len": 2, "code_sim": [0.6576338225637924, 0.703254996723516], "location_sim": [0.11224489795918367, 0.21359223300970873], "pattern": 1, "time": 2}, {"A_title": "Update tutorial.md", "A_clean_title": ["updat", "tutori", "md"], "B_title": "[tutorial] Use ids in comments data", "B_clean_title": ["tutori", "use", "id", "comment", "data"], "A_body": "If following tutorial then get the error: Each child in an array or iterator should have a unique \"key\" prop. This change brings the code within the html file  inline with the example.js\n", "A_clean_body": ["follow", "tutori", "then", "get", "error", "each", "child", "array", "or", "iter", "have", "uniqu", "key", "prop", "thi", "chang", "bring", "code", "within", "html", "file", "inlin", "exampl", "js"], "B_body": "Just the same bits from https://github.com/reactjs/react-tutorial/pull/96, minus a comment and with simplified ids for illustrative purposes.\n\nSee previous discussion in #5257\n\nTODO: Update the code in the translated pages. Will do once we're certain on the code.\n", "B_clean_body": ["just", "same", "bit", "http", "tutori", "pull", "96", "github", "com", "reactj", "react", "minu", "comment", "simplifi", "id", "illustr", "purpos", "see", "previou", "discuss", "5257", "todo", "updat", "code", "translat", "page", "will", "onc", "we", "'re", "certain", "code"], "title_sim": [-0.0001539728217000166], "body_sim": [0.10045576123342638], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.04243364896027553, 0.04243364896027553], "location_sim": [0.36, 0.36], "pattern": 0, "time": 0}, {"A_title": "Fixes #5959 - jquery-bootstrap example uses handleHidden which does not exist", "A_clean_title": ["fix", "5959", "jqueri", "bootstrap", "exampl", "use", "handlehidden", "handl", "hidden", "which", "not", "exist"], "B_title": "Added handleHidden method to BootstrapModal in examples", "B_clean_title": ["ad", "handlehidden", "handl", "hidden", "method", "bootstrapmod", "bootstrap", "modal", "exampl"], "A_body": "Fixes #5959. I've fixed this by adding a hook into the modal's `hidden.bs.modal` event.\n", "A_clean_body": ["fix", "5959", "'ve", "fix", "thi", "by", "ad", "hook", "into", "modal", "'s", "hidden", "bs", "modal", "event"], "B_body": "Added `handleHidden` method for #5959 \n", "B_clean_body": ["ad", "handlehidden", "handl", "hidden", "method", "5959"], "title_sim": [0.6434955910295743], "body_sim": [0.3637970487957595], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.36562357211451296, 0.36562357211451296], "location_sim": [0.43137254901960786, 0.43137254901960786], "pattern": 1, "time": 0}, {"A_title": "Improve validateDOMNesting message for whitespace", "A_clean_title": ["improv", "validatedomnest", "valid", "dom", "nest", "messag", "whitespac"], "B_title": "No whitespace warning", "B_clean_title": ["no", "whitespac", "warn"], "A_body": "For #5071.\n", "A_clean_body": ["5071"], "B_body": "Resolves #6995 \n\nIncludes some misc. lint fixes. Will squash if accepted.\n\ncc @spicyj @jimfb \n", "B_clean_body": ["resolv", "6995", "includ", "some", "misc", "lint", "fix", "will", "squash", "accept", "cc", "spicyj", "jimfb"], "title_sim": [0.04939870973882822], "body_sim": [0.0], "file_list_sim": 0.75, "overlap_files_len": 3, "code_sim": [0.37787447438619454, 0.44325240060125354], "location_sim": [0.48130841121495327, 0.6912751677852349], "pattern": -1, "time": 58}, {"A_title": "Warn for callback refs on functional components (Stack + Fiber)", "A_clean_title": ["warn", "callback", "ref", "function", "compon", "stack", "fiber"], "B_title": "Warn for functional refs on stateless functional components", "B_clean_title": ["warn", "function", "ref", "stateless", "function", "compon"], "A_body": "**For the changelog, this also implements #7267 in Stack.**\r\nIt implements it for Fiber too, in addition to other Stack-related Fiber warnings and invariants.\r\n\r\n==========\r\n\r\nWhile working on the fiber implementation of ReactTestRenderer I came across this warning which is not yet implemented for fiber.\r\n\r\nInitial questions:\r\n\r\n* Are there any areas of the fiber impl where errors and warnings are expected to live? This is the first instance added to BeginWork which I think may indicate this warning should exist elsewhere\r\n* This doesn\u2019t actually stop any ref from being attached. How should that be done?\r\n* A related test seems to show refs throwing an error if used on a top-level SFC. Should that exist in the same area of the code or elsewhere?", "A_clean_body": ["**for", "changelog", "thi", "also", "implement", "7267", "stack", "it", "implement", "it", "fiber", "too", "addit", "other", "stack", "relat", "fiber", "warn", "invari", "while", "work", "fiber", "implement", "reacttestrender", "react", "test", "render", "came", "across", "thi", "warn", "which", "not", "yet", "implement", "fiber", "initi", "question", "are", "there", "ani", "area", "fiber", "impl", "where", "error", "warn", "are", "expect", "live", "thi", "first", "instanc", "ad", "beginwork", "begin", "work", "which", "think", "may", "indic", "thi", "warn", "exist", "elsewher", "thi", "doesn", "actual", "stop", "ani", "ref", "be", "attach", "how", "that", "done", "relat", "test", "seem", "show", "ref", "throw", "error", "use", "top", "level", "sfc", "that", "exist", "same", "area", "code", "or", "elsewher"], "B_body": "Resolves https://github.com/facebook/react/issues/7267\n\nCurrently React warns if you do:\n\n``` js\n<StatelessComponent ref='foo' />\n```\n\nBut it doesn't warn if you do\n\n``` js\n<StatelessComponent ref={node => { /* ... */ }} />\n```\n\nIt seems like a generally good idea to have a consistent warning when using `refs` with any SFC.\n", "B_clean_body": ["resolv", "http", "github", "com", "facebook", "react", "issu", "7267", "current", "react", "warn", "you", "js", "statelesscompon", "stateless", "compon", "ref='foo", "but", "it", "n't", "warn", "you", "js", "statelesscompon", "stateless", "compon", "ref=", "node", "it", "seem", "like", "gener", "good", "idea", "have", "consist", "warn", "when", "ref", "ani", "sfc"], "title_sim": [0.6534847154241937], "body_sim": [0.3233024362580926], "file_list_sim": 0.05555555555555555, "overlap_files_len": 1, "code_sim": [0.3889401163042608, 0.5968982980837901], "location_sim": [0.12910284463894967, 1.0], "pattern": 1, "time": 163}, {"A_title": "Flow 0.34", "A_clean_title": ["flow", "34"], "B_title": "Update Flow version to v0.34.0", "B_clean_title": ["updat", "flow", "version", "v0", "34"], "A_body": "", "A_clean_body": [], "B_body": "This PR is to update Flowtype version to `v0.34.0` and fix some errors.\r\n\r\nIn Flowtype `v0.34.0`, dictionary types are treated as `invariant`.\r\n\r\n* https://github.com/facebook/flow/releases/tag/v0.34.0\r\n\r\nIn the following case, it has to explicit covariance with `+`.\r\n\r\n* ReactNativeAttributePayload.js\r\n\r\n```js\r\ntype AttributeConfiguration =\r\n  { [key: string]: (\r\n    CustomAttributeConfiguration | AttributeConfiguration /*| boolean*/\r\n  ) };\r\n```\r\n\r\nBut I avoid the error by using `$FlowFixMe` comment because it's needed some works like this.\r\n\r\n1. The covariant syntax(`+`) causes a parse error in ESLint.\r\n2. To fix it, we have to update `babylon` for parse covariant syntax with `+`.\r\n3. `2.` causes other ESLint errors, which are `no-undef` for type parameters.\r\n4. To fix them, We have to use `eslint-plugin-flowtype`.\r\n5. To install `eslint-plugin-flowtype`, We have to update ESLint to `>=2.0.0` because of `peerDependencies`.\r\n7. `5.` causes other ESLint errors, We have to fix them. \r\n\r\nCan I work on this?\r\nIf so, I'll work on this as other PRs. ", "B_clean_body": ["thi", "pr", "updat", "flowtyp", "version", "v0", "34", "fix", "some", "error", "flowtyp", "v0", "34", "dictionari", "type", "are", "treat", "as", "invari", "http", "34", "github", "com", "facebook", "flow", "releas", "tag", "v0", "follow", "case", "it", "ha", "explicit", "covari", "reactnativeattributepayload", "js", "react", "nativ", "attribut", "payload", "js", "type", "attributeconfigur", "attribut", "configur", "key", "string", "customattributeconfigur", "custom", "attribut", "configur", "attributeconfigur", "attribut", "configur", "boolean*", "but", "avoid", "error", "by", "flowfixm", "flow", "fix", "me", "comment", "becaus", "it", "'s", "need", "some", "work", "like", "thi", "covari", "syntax", "caus", "pars", "error", "eslint", "es", "lint", "fix", "it", "we", "have", "updat", "babylon", "pars", "covari", "syntax", "caus", "other", "eslint", "es", "lint", "error", "which", "are", "no", "undef", "type", "paramet", "fix", "them", "we", "have", "use", "eslint", "plugin", "flowtyp", "instal", "eslint", "plugin", "flowtyp", "we", "have", "updat", "eslint", "es", "lint", "=2", "becaus", "peerdepend", "peer", "depend", "caus", "other", "eslint", "es", "lint", "error", "we", "have", "fix", "them", "work", "thi", "so", "'ll", "work", "thi", "as", "other", "pr", "rs"], "title_sim": [0.4016819913071912], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 4, "code_sim": [0.0558622156931813, 0.0558622156931813], "location_sim": [0.3235294117647059, 0.3235294117647059], "pattern": -1, "time": 8}, {"A_title": "Fix lint for eslint 1.7", "A_clean_title": ["fix", "lint", "eslint"], "B_title": "Grunt lint and syntax fixes", "B_clean_title": ["grunt", "lint", "syntax", "fix"], "A_body": "Travis was failing.\n", "A_clean_body": ["travi", "wa", "fail"], "B_body": "- Consistent spacing for class functions in examples/\n- Consistency for render(), spaced to avoid line overflow in `basic-click-counter/index.html`\n- Fixed grunt lint errors in `ResponderTouchHistoryStore.js`, `ReactEmptyComponent-test.js`\n", "B_clean_body": ["consist", "space", "class", "function", "exampl", "consist", "render", "space", "avoid", "line", "overflow", "basic", "click", "html", "counter", "index", "fix", "grunt", "lint", "error", "respondertouchhistorystor", "js", "respond", "touch", "histori", "store", "reactemptycompon", "react", "empti", "compon", "test", "js"], "title_sim": [0.2942116253206135], "body_sim": [-0.026437605066974054], "file_list_sim": 0.4, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.125, 0.4827586206896552], "pattern": 0, "time": 1}, {"A_title": "Add support to JSX transform for <hyphenated-tags>", "A_clean_title": ["add", "support", "jsx", "transform", "hyphen", "tag"], "B_title": "Allow jsx to write tags with bracket, instead of dot, notation.", "B_clean_title": ["allow", "jsx", "write", "tag", "bracket", "instead", "dot", "notat"], "A_body": "This really only adds support for tags in our knownTags list. If we want\nto support SVG fully we'll need to do that OR we do like we do for\nstyles and force camelCase.\n\nTested with `<font-face/>` which produces `React.DOM[\"font-face\"]`. See #938 for even more.\n", "A_clean_body": ["thi", "realli", "onli", "add", "support", "tag", "our", "knowntag", "known", "tag", "list", "we", "want", "support", "svg", "fulli", "we", "'ll", "need", "that", "or", "we", "like", "we", "style", "forc", "camelcas", "camel", "case", "test", "font", "face", "which", "produc", "react", "dom", "font", "face", "see", "938", "even", "more"], "B_body": "This will allow for hyphenated tags in the future as something like\n`React.DOM[\"font-face\"](content, mountNode)`\ninstead of the invalid\n`React.DOM.font-face.(content, mountNode)`\nMany SVG tags have hyphenated tags so this would be a good thing to have.\n", "B_clean_body": ["thi", "will", "allow", "hyphen", "tag", "futur", "as", "someth", "like", "react", "dom", "font", "face", "content", "mountnod", "mount", "node", "instead", "invalid", "face", "react", "dom", "font", "content", "mountnod", "mount", "node", "mani", "svg", "tag", "have", "hyphen", "tag", "so", "thi", "would", "good", "thing", "have"], "title_sim": [0.5710795129574974], "body_sim": [0.5575584637791923], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.31287994508382566, 0.37074511669076093], "location_sim": [0.3719512195121951, 0.6354166666666666], "pattern": 0, "time": 66}, {"A_title": "Better warnings for nested propTypes", "A_clean_title": ["better", "warn", "nest", "proptyp", "prop", "type"], "B_title": "Nicer warning for arrayOf propTypes checker", "B_clean_title": ["nicer", "warn", "arrayof", "array", "proptyp", "prop", "type", "checker"], "A_body": "`arrayOf`, `shape` and `objectOf` warnings now display the full path of the invalid key.\n\nExamples:\n\n```\nPropTypes.shape({ key: PropTypes.number })({ key: 'bar' }, 'testProp', 'testComponent');\n// Invalid prop `testProp.key` of type `string` supplied to `testComponent`, expected `number`.\nPropTypes.arrayOf(PropTypes.number)(['foo'], 'testProp', 'testComponent');\n// Invalid prop `testProp[0]` of type `string` supplied to `testComponent`, expected `number`.\n```\n", "A_clean_body": ["arrayof", "array", "shape", "objectof", "object", "warn", "now", "display", "full", "path", "invalid", "key", "exampl", "proptyp", "shape", "prop", "type", "key", "proptyp", "number", "prop", "type", "key", "'bar", "'testprop", "'test", "prop", "'testcompon", "'test", "compon", "invalid", "prop", "testprop", "key", "test", "prop", "type", "string", "suppli", "testcompon", "test", "compon", "expect", "number", "proptyp", "arrayof", "prop", "type", "array", "proptyp", "number", "prop", "type", "'foo", "'testprop", "'test", "prop", "'testcompon", "'test", "compon", "invalid", "prop", "testprop", "test", "prop", "type", "string", "suppli", "testcompon", "test", "compon", "expect", "number"], "B_body": "Every type checker follows the signature (props, propName, ...), through\nwhich the value `props[propName]` is retrieved. This works badly with\n`arrayOf` since it'd pass the index of the item as the prop name; the\nwarning message will therefore show \"Invalid prop `1` of bla\" instead of\nthe more helpful \"Invalid prop `myProp` of bla\". This fixes that.\nIdeally we'd pass the prop value as an argument, but it's too many\nchanges.\n", "B_clean_body": ["everi", "type", "checker", "follow", "signatur", "prop", "propnam", "prop", "name", "through", "which", "valu", "prop", "propnam", "prop", "name", "retriev", "thi", "work", "badli", "arrayof", "array", "sinc", "it", "'d", "pass", "index", "item", "as", "prop", "name", "warn", "messag", "will", "therefor", "show", "invalid", "prop", "bla", "instead", "more", "help", "invalid", "prop", "myprop", "my", "prop", "bla", "thi", "fix", "that", "ideal", "we", "'d", "pass", "prop", "valu", "as", "argument", "but", "it", "'s", "too", "mani", "chang"], "title_sim": [0.611797666649379], "body_sim": [0.6608128467621699], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.17626341204970306, 0.14916457038243633], "location_sim": [0.22, 0.25], "pattern": 0, "time": 22}, {"A_title": "Update tutorial.md", "A_clean_title": ["updat", "tutori", "md"], "B_title": "Update tutorial.md", "B_clean_title": ["updat", "tutori", "md"], "A_body": "Fixes to Tutorial in https://facebook.github.io/react/tutorial/tutorial.html\r\n\r\n![image](https://cloud.githubusercontent.com/assets/338917/21510453/8d8d538a-cc61-11e6-9b67-b5710ef3853d.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/338917/21510437/67f432a6-cc61-11e6-86db-79223cd64e9d.png)", "A_clean_body": ["fix", "tutori", "http", "github", "html", "facebook", "io", "react", "tutori", "tutori", "imag", "http", "cc61", "11e6", "9b67", "githubusercont", "b5710ef3853d", "png", "cloud", "com", "asset", "338917", "21510453", "8d8d538a", "imag", "http", "cc61", "11e6", "86db", "githubusercont", "79223cd64e9d", "png", "cloud", "com", "asset", "338917", "21510437", "67f432a6"], "B_body": "*Before* submitting a pull request, please make sure the following is done...\r\n\r\n1. Fork the repo and create your branch from `master`.\r\n2. If you've added code that should be tested, add tests!\r\n3. If you've changed APIs, update the documentation.\r\n4. Ensure the test suite passes (`npm test`).\r\n5. Make sure your code lints (`npm run lint`) - we've done our best to make sure these rules match our internal linting guidelines.\r\n6. If you haven't already, complete the [CLA](https://code.facebook.com/cla).\r\n\r\nfix \"unknown: Unexpected token\" in \"codepen.io\".", "B_clean_body": ["*before*", "submit", "pull", "request", "pleas", "make", "sure", "follow", "done", "fork", "repo", "creat", "your", "branch", "master", "you", "'ve", "ad", "code", "that", "test", "add", "test", "you", "'ve", "chang", "api", "ap", "updat", "document", "ensur", "test", "suit", "pass", "npm", "test", "make", "sure", "your", "code", "lint", "npm", "run", "lint", "we", "'ve", "done", "our", "best", "make", "sure", "these", "rule", "match", "our", "intern", "lint", "guidelin", "you", "have", "n't", "alreadi", "complet", "cla", "http", "facebook", "code", "com", "cla", "fix", "unknown", "unexpect", "token", "codepen", "io"], "title_sim": [0.9999999999999999], "body_sim": [0.09778865688666413], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.6363636363636364, 0.6363636363636364], "pattern": 0, "time": 40}, {"A_title": "Add support to JSX transform for <hyphenated-tags>", "A_clean_title": ["add", "support", "jsx", "transform", "hyphen", "tag"], "B_title": "Add naive custom element support", "B_clean_title": ["add", "naiv", "custom", "element", "support"], "A_body": "This really only adds support for tags in our knownTags list. If we want\nto support SVG fully we'll need to do that OR we do like we do for\nstyles and force camelCase.\n\nTested with `<font-face/>` which produces `React.DOM[\"font-face\"]`. See #938 for even more.\n", "A_clean_body": ["thi", "realli", "onli", "add", "support", "tag", "our", "knowntag", "known", "tag", "list", "we", "want", "support", "svg", "fulli", "we", "'ll", "need", "that", "or", "we", "like", "we", "style", "forc", "camelcas", "camel", "case", "test", "font", "face", "which", "produc", "react", "dom", "font", "face", "see", "938", "even", "more"], "B_body": "JSX will render `<custom-element />` as `custom-element()`. Rendering it as `CustomElement()` sounds like a better idea, because it is syntactically correct. If we operate on an assumption, that custom elements names map to React displayNames with this convention, we can build React-driven web component:\n\n```\n/** @jsx React.DOM */\nvar MyComponent = React.createClass({\n  render: function(){\n    return (<p>Hello {this.props.name}</p>);\n  }\n});\n\nvar MyComponentPrototype = Object.create(HTMLElement.prototype);\n\nMyComponentPrototype.attachedCallback = function(){\n  var props = {};\n  Array.prototype.forEach.call(this.attributes, function(attr){\n    props[attr.name] = attr.value;\n  });\n  React.renderComponent(MyComponent(props), this);\n};\n\ndocument.registerElement('my-component', { prototype: MyComponentPrototype });\n```\n", "B_clean_body": ["jsx", "will", "render", "custom", "element", "as", "custom", "element", "render", "it", "as", "customel", "custom", "element", "sound", "like", "better", "idea", "becaus", "it", "syntact", "correct", "we", "oper", "assumpt", "that", "custom", "element", "name", "map", "react", "displaynam", "display", "name", "thi", "convent", "we", "build", "react", "driven", "web", "compon", "jsx", "react", "dom", "var", "mycompon", "my", "compon", "react", "createclass", "creat", "class", "render", "function", "return", "hello", "thi", "prop", "name", "var", "mycomponentprototyp", "my", "compon", "prototyp", "object", "creat", "htmlelement", "prototyp", "html", "element", "mycomponentprototyp", "attachedcallback", "my", "compon", "prototyp", "attach", "callback", "function", "var", "prop", "array", "prototyp", "foreach", "call", "each", "thi", "attribut", "function", "attr", "prop", "attr", "name", "attr", "valu", "react", "rendercompon", "render", "compon", "mycompon", "my", "compon", "prop", "thi", "document", "registerel", "regist", "element", "'mi", "compon", "prototyp", "mycomponentprototyp", "my", "compon", "prototyp"], "title_sim": [0.16322996425321012], "body_sim": [0.15055433404330695], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.19346494379249196, 0.17214818089125378], "location_sim": [0.47333333333333333, 0.9466666666666667], "pattern": 0, "time": 64}, {"A_title": "Improve warning in ReactUpdateQueue", "A_clean_title": ["improv", "warn", "reactupdatequeu", "react", "updat", "queue"], "B_title": "Added component displayName to warning message in ReactUpdateQueue.js", "B_clean_title": ["ad", "compon", "displaynam", "display", "name", "warn", "messag", "reactupdatequeu", "js", "react", "updat", "queue"], "A_body": "Now it references name correctly for ES2015 class components. #7127 fixed `ReactNoopUpdateQueue` (https://github.com/facebook/react/pull/7127/files#diff-109c4407d9919fdeda99c9eedd2099beR26) but not `ReactUpdateQueue`.\n", "A_clean_body": ["now", "it", "refer", "name", "correctli", "es2015", "class", "compon", "7127", "fix", "reactnoopupdatequeu", "react", "noop", "updat", "queue", "http", "github", "com", "facebook", "react", "pull", "7127", "file", "diff", "109c4407d9919fdeda99c9eedd2099ber26", "109c4407d9919fdeda99c9eedd2099b", "r26", "but", "not", "reactupdatequeu", "react", "updat", "queue"], "B_body": "ref https://github.com/facebook/react/issues/3878\nNew message will look like this:\n\n> Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. Please check the code for the ExampleApplication component. This is a no-op.\n", "B_clean_body": ["ref", "http", "github", "com", "facebook", "react", "issu", "3878", "new", "messag", "will", "look", "like", "thi", "warn", "setstat", "set", "state", "onli", "updat", "mount", "or", "mount", "compon", "thi", "usual", "mean", "you", "call", "setstat", "set", "state", "unmount", "compon", "pleas", "check", "code", "exampleappl", "exampl", "applic", "compon", "thi", "no", "op"], "title_sim": [0.5016270854112266], "body_sim": [0.39338395345397786], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.013564756706176594, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 427}, {"A_title": "Key dynamic children in tutorial.", "A_clean_title": ["key", "dynam", "children", "tutori"], "B_title": "Add missing index for array in tutorial", "B_clean_title": ["add", "miss", "index", "array", "tutori"], "A_body": "I don't think my explanation is great for a tutorial since it doesn't really introduce the concept of reordering or clobbering, but keying your dynamic children seems necessary to avoid warnings and sounds like its generally recommended.  Therefore, it seems like this is the appropriate place to introduce this concept.\n\nBesides improving the explanation for this to make a little more introductory, it seems like this should be added to the tutorial.  If the maintainers agree, should I update any other example files?\n", "A_clean_body": ["n't", "think", "my", "explan", "great", "tutori", "sinc", "it", "n't", "realli", "introduc", "concept", "reorder", "or", "clobber", "but", "key", "your", "dynam", "children", "seem", "necessari", "avoid", "warn", "sound", "like", "it", "gener", "recommend", "therefor", "it", "seem", "like", "thi", "appropri", "place", "introduc", "thi", "concept", "besid", "improv", "explan", "thi", "make", "littl", "more", "introductori", "it", "seem", "like", "thi", "ad", "tutori", "maintain", "agre", "updat", "ani", "other", "exampl", "file"], "B_body": "Hello, I was reading and following steps in the tutorial. I realised the example missed an `key` property, otherwise I got this error in the console:\n\n`Warning: Each child in an array or iterator should have a unique \"key\" prop. Check the render method of CommentList. See https://fb.me/react-warning-keys for more information.`\n", "B_clean_body": ["hello", "wa", "read", "follow", "step", "tutori", "realis", "exampl", "miss", "key", "properti", "otherwis", "got", "thi", "error", "consol", "warn", "each", "child", "array", "or", "iter", "have", "uniqu", "key", "prop", "check", "render", "method", "commentlist", "comment", "list", "see", "http", "warn", "key", "fb", "me", "react", "more", "inform"], "title_sim": [0.04036714685374717], "body_sim": [0.283715481674986], "file_list_sim": 0.16666666666666666, "overlap_files_len": 1, "code_sim": [0.13242694844326935, 0.11577287145135391], "location_sim": [0.24615384615384617, 0.6956521739130435], "pattern": 0, "time": 10}, {"A_title": "Handle className correctly for SVG nodes", "A_clean_title": ["handl", "classnam", "class", "name", "correctli", "svg", "node"], "B_title": "set className with setAttribute for SVG compat", "B_clean_title": ["set", "classnam", "class", "name", "setattribut", "set", "attribut", "svg", "compat"], "A_body": "Bring back the DOM mutator to check if the className we're writing\nto is actually a string.\n\nFor SVG nodes, the className property is not of type string but\nand SVGAnimatedString and writing to the property will cause\na \"TypeError: setting a property that has only a getter\"\n(See http://jsfiddle.net/ca47V/ )\n\nThis first checks if the className property is indeed a string\nand uses setAttribute() / removeAttribute() otherwise.\n", "A_clean_body": ["bring", "back", "dom", "mutat", "check", "classnam", "class", "name", "we", "'re", "write", "actual", "string", "svg", "node", "classnam", "class", "name", "properti", "not", "type", "string", "but", "svganimatedstr", "svg", "anim", "string", "write", "properti", "will", "caus", "typeerror", "type", "error", "set", "properti", "that", "ha", "onli", "getter", "see", "http", "jsfiddl", "net", "ca47v", "thi", "first", "check", "classnam", "class", "name", "properti", "inde", "string", "use", "setattribut", "set", "attribut", "removeattribut", "remov", "attribut", "otherwis"], "B_body": "Fixes SVG bug where changes to the className prop are not changed in the svg element.\n", "B_clean_body": ["fix", "svg", "bug", "where", "chang", "classnam", "class", "name", "prop", "are", "not", "chang", "svg", "element"], "title_sim": [0.18553559430026795], "body_sim": [0.21829328538193776], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.4626216831728044, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 32}, {"A_title": "Added callback chain in TransitionGroup addon", "A_clean_title": ["ad", "callback", "chain", "transitiongroup", "transit", "group", "addon"], "B_title": "Fix ReactTransitionGroup behavior when removing several children at once", "B_clean_title": ["fix", "reacttransitiongroup", "react", "transit", "group", "behavior", "when", "remov", "sever", "children", "at", "onc"], "A_body": "This added to prevent that the state gets updated before the last changes was not yet processed.\nThis should close #3111.\n\nHonestly I could not create an unit tests which reproduces the fault as described in #3111. If someone could point me in the right direction, I will extend this issue with the necessary unit tests.\n\nI tested this through play testing. Builded, created a single html page as given in the jsfiddle in #3111 and tested it like that. \n", "A_clean_body": ["thi", "ad", "prevent", "that", "state", "get", "updat", "befor", "last", "chang", "wa", "not", "yet", "process", "thi", "close", "3111", "honestli", "could", "not", "creat", "unit", "test", "which", "reproduc", "fault", "as", "describ", "3111", "someon", "could", "point", "me", "right", "direct", "will", "extend", "thi", "issu", "necessari", "unit", "test", "test", "thi", "through", "play", "test", "build", "creat", "singl", "html", "page", "as", "given", "jsfiddl", "3111", "test", "it", "like", "that"], "B_body": "If several children complete leaving before rendering TransitionGroup,\nonly the last one was removed. This could easily happen if\ncallback in componentWillLeave is called synchronously and several items\nare removed from array. The other case is when ReactCSSTransitionGroup\nhas transitionLeave={false} and array is also cleaned up.\n\nThe bug was happening because this.state.children was used as a base for\nchildren removal and it wasn't updated until the render, so only the last\nremoval was actually happening.\n\nFix involves keeping the updated children state between invocations of\n_handleDoneLeaving. After updating this.state and rendering,\nupdatedState is cleaned up and ready for subsequent array modifications.\n\nTest case included.\n", "B_clean_body": ["sever", "children", "complet", "leav", "befor", "render", "transitiongroup", "transit", "group", "onli", "last", "one", "wa", "remov", "thi", "could", "easili", "happen", "callback", "componentwillleav", "compon", "will", "leav", "call", "synchron", "sever", "item", "are", "remov", "array", "other", "case", "when", "reactcsstransitiongroup", "react", "css", "transit", "group", "ha", "transitionleave=", "transit", "leave=", "fals", "array", "also", "clean", "up", "bug", "wa", "happen", "becaus", "thi", "state", "children", "wa", "use", "as", "base", "children", "remov", "it", "wa", "n't", "updat", "until", "render", "so", "onli", "last", "remov", "wa", "actual", "happen", "fix", "involv", "keep", "updat", "children", "state", "between", "invoc", "handledoneleav", "handl", "done", "leav", "after", "updat", "thi", "state", "render", "updatedst", "updat", "state", "clean", "up", "readi", "subsequ", "array", "modif", "test", "case", "includ"], "title_sim": [0.16933322856532235], "body_sim": [0.3245815108514191], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.1506326655218792, 0.08753124750961105], "location_sim": [0.33884297520661155, 0.7321428571428571], "pattern": 0, "time": 101}, {"A_title": "Add failing test for state merging when sCU is false", "A_clean_title": ["add", "fail", "test", "state", "merg", "when", "scu", "cu", "fals"], "B_title": "[Fiber] Move memoization to begin phase", "B_clean_title": ["fiber", "move", "memoiz", "begin", "phase"], "A_body": "", "A_clean_body": [], "B_body": "Because `memoizedProps` and `memoizedState` are read from the instance, the\r\ninstance's input pointers (`props`, `state`, `context`) should be updated even\r\nwhen `shouldComponentUpdate` causes a bail-out.\r\n\r\n## Update\r\n\r\nThe scope of this PR changed a bit. The main change is to move memoization to the begin phase, right after reconciliation.\r\n\r\nCurrently we update the memoized inputs (props, state) during the complete phase, as we go back up the tree. That means we can't reuse work until of its children have completed.\r\n\r\nBy moving memoization to the begin phase, we can do a shallow bailout, reusing a unit of work even if there's still work to do in its children.\r\n\r\nMemoization now happens whenever a fiber's `child` property is updated; typically, right after reconciling. It's also updated when `shouldComponentUpdate` returns false, because that indicates that the given state and props are equal to the memoized state and props.", "B_clean_body": ["becaus", "memoizedprop", "memoiz", "prop", "memoizedst", "memoiz", "state", "are", "read", "instanc", "instanc", "'s", "input", "pointer", "prop", "state", "context", "updat", "even", "when", "shouldcomponentupd", "compon", "updat", "caus", "bail", "out", "updat", "scope", "thi", "pr", "chang", "bit", "main", "chang", "move", "memoiz", "begin", "phase", "right", "after", "reconcili", "current", "we", "updat", "memoiz", "input", "prop", "state", "dure", "complet", "phase", "as", "we", "go", "back", "up", "tree", "that", "mean", "we", "ca", "n't", "reus", "work", "until", "it", "children", "have", "complet", "by", "move", "memoiz", "begin", "phase", "we", "shallow", "bailout", "reus", "unit", "work", "even", "there", "'s", "still", "work", "it", "children", "memoiz", "now", "happen", "whenev", "fiber", "'s", "child", "properti", "updat", "typic", "right", "after", "reconcil", "it", "'s", "also", "updat", "when", "shouldcomponentupd", "compon", "updat", "return", "fals", "becaus", "that", "indic", "that", "given", "state", "prop", "are", "equal", "memoiz", "state", "prop"], "title_sim": [0.004693671356251014], "body_sim": [0.0], "file_list_sim": 0.2222222222222222, "overlap_files_len": 2, "code_sim": [0.291309565227315, 0.9359251348034728], "location_sim": [0.09696969696969697, 0.8421052631578947], "pattern": 0, "time": 13}, {"A_title": "Add documentation about empty functional components", "A_clean_title": ["add", "document", "about", "empti", "function", "compon"], "B_title": "Enable null return values in plain functions", "B_clean_title": ["enabl", "null", "return", "valu", "plain", "function"], "A_body": "The dev build has a warning about this, but there's no obvious course of action to actually make it work. Also, I think adding this to the docs makes migrating existing components easier.\n", "A_clean_body": ["dev", "build", "ha", "warn", "about", "thi", "but", "there", "'s", "no", "obviou", "cours", "action", "actual", "make", "it", "work", "also", "think", "ad", "thi", "doc", "make", "migrat", "exist", "compon", "easier"], "B_body": "Enable null return values in plain functions by removing support for inheritless classes, as per #5355.\n", "B_clean_body": ["enabl", "null", "return", "valu", "plain", "function", "by", "remov", "support", "inheritless", "class", "as", "per", "5355"], "title_sim": [0.13988022040510187], "body_sim": [0.05352961752869678], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.022320493281702648, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 77}, {"A_title": "Support SVG image, other related cleanup", "A_clean_title": ["support", "svg", "imag", "other", "relat", "cleanup"], "B_title": "Add support for SVG image tag", "B_clean_title": ["add", "support", "svg", "imag", "tag"], "A_body": "I got tired of dealing with PRs trying to add image. Then I decided to cleanup while I was there since we've had to do a few followup changes when changes in getMarkupWrap weren't made in both places.\n", "A_clean_body": ["got", "tire", "deal", "pr", "rs", "tri", "add", "imag", "then", "decid", "cleanup", "while", "wa", "there", "sinc", "we", "'ve", "had", "few", "followup", "chang", "when", "chang", "getmarkupwrap", "get", "markup", "wrap", "were", "n't", "made", "both", "place"], "B_body": "A support for SVG image tag. \n\nThis is used in : https://github.com/lhausermann/the-graph/commit/7f8af669de55ced79b8a4e1420f04281a21fcc82\n\nNote: This is not enough to be able to load an external SVG|PNG|JPG\nimage file. The main issue is we can not create valid JS to have\na property name \"xlink:href\". As today, we should use it using\na container object (say 'g') and set the image tag using\na dangerouslysetinnerhtml\n", "B_clean_body": ["support", "svg", "imag", "tag", "thi", "use", "http", "graph", "commit", "7f8af669de55ced79b8a4e1420f04281a21fcc82", "github", "com", "lhausermann", "note", "thi", "not", "enough", "abl", "load", "extern", "svg|png|jpg", "imag", "file", "main", "issu", "we", "not", "creat", "valid", "js", "have", "properti", "name", "xlink", "href", "as", "today", "we", "use", "it", "contain", "object", "say", "set", "imag", "tag", "dangerouslysetinnerhtml"], "title_sim": [0.5246606265016706], "body_sim": [0.24871370313740532], "file_list_sim": 0.08333333333333333, "overlap_files_len": 2, "code_sim": [0.1601658633091084, 0.6499010484490266], "location_sim": [0.1188118811881188, 1.0], "pattern": 0, "time": 262}, {"A_title": "Workaround for dealing with exceptions thrown in asynchronous render method", "A_clean_title": ["workaround", "deal", "except", "thrown", "asynchron", "render", "method"], "B_title": "Error boundaries", "B_clean_title": ["error", "boundari"], "A_body": "We provide a workaround for [this](https://github.com/facebook/react/issues/2461) issue by allowing the user to define a callback function to be executed whenever an exception is thrown inside the body of a `render` method. This function should be called `exceptionCallBack`, as in the following example, adapted from [this](https://github.com/facebook/react/issues/5549) issue:\n\n``` javascript\nvar a = false;\n\nvar MyComponent = React.createClass({\n    render: function() {\n        if (this.props.a) {\n            throw 'err';\n        }\n\n        return (      \n            <h1 onClick={ () => {a = true; run()} }>Hello {this.props.name}</h1>      \n        );\n    },\n    exceptionCallBack: function(e) {\n        console.log(e);\n    }   \n});\n\nfunction run() {\n    ReactDOM.render(\n        <MyComponent a={a} name={\"Rui Cardoso\"} />,\n        document.getElementById('example')\n    );\n}\n\nReactDOM.render(<MyComponent a={false} name={\"Rui Cardoso\"} />, document.getElementById('example'));\n```\n\nThis produces the expected result of **err** being logged to the console when the component is clicked.\n", "A_clean_body": ["we", "provid", "workaround", "thi", "http", "github", "com", "facebook", "react", "issu", "2461", "issu", "by", "allow", "user", "defin", "callback", "function", "execut", "whenev", "except", "thrown", "insid", "bodi", "render", "method", "thi", "function", "call", "exceptioncallback", "except", "call", "back", "as", "follow", "exampl", "adapt", "thi", "http", "github", "com", "facebook", "react", "issu", "5549", "issu", "javascript", "var", "fals", "var", "mycompon", "my", "compon", "react", "createclass", "creat", "class", "render", "function", "thi", "prop", "throw", "'err", "return", "h1", "onclick=", "click=", "true", "run", "hello", "thi", "prop", "name", "h1", "exceptioncallback", "except", "call", "back", "function", "consol", "log", "function", "run", "reactdom", "render", "react", "dom", "mycompon", "my", "compon", "a=", "name=", "rui", "cardoso", "document", "getelementbyid", "get", "element", "by", "id", "'exampl", "reactdom", "render", "react", "dom", "mycompon", "my", "compon", "a=", "fals", "name=", "rui", "cardoso", "document", "getelementbyid", "get", "element", "by", "id", "'exampl", "thi", "produc", "expect", "result", "**err**", "be", "log", "consol", "when", "compon", "click"], "B_body": "Implements error boundaries for initial render, which allow React components to become isolation boundaries.  If a child of an error bounadry crashes, the error boundary has the ability to handle the error and render something different (like an error message or a frown face).  This allows application authors to partition their app into regions, and a crash in a single region won't take down the entire page/application.\n\nFixes #2461\n", "B_clean_body": ["implement", "error", "boundari", "initi", "render", "which", "allow", "react", "compon", "becom", "isol", "boundari", "child", "error", "bounadri", "crash", "error", "boundari", "ha", "abil", "handl", "error", "render", "someth", "differ", "like", "error", "messag", "or", "frown", "face", "thi", "allow", "applic", "author", "partit", "their", "app", "into", "region", "crash", "singl", "region", "wo", "n't", "take", "down", "entir", "page", "applic", "fix", "2461"], "title_sim": [0.05265713026309682], "body_sim": [0.2751560470499429], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.11240102056407049, 0.12565095471648433], "location_sim": [0.0, 0.0], "pattern": 1, "time": 2}, {"A_title": "Fixes for 15.5 addons", "A_clean_title": ["fix", "15", "addon"], "B_title": "Added LinkedInput addon.", "B_clean_title": ["ad", "linkedinput", "link", "input", "addon"], "A_body": "See https://github.com/facebook/react/issues/9384 for details.", "A_clean_body": ["see", "http", "github", "com", "facebook", "react", "issu", "9384", "detail"], "B_body": "Added LinkedInput addon.  Goes here until @zpao decides how he wants to package/release it.\n", "B_clean_body": ["ad", "linkedinput", "link", "input", "addon", "goe", "here", "until", "zpao", "decid", "how", "he", "want", "packag", "releas", "it"], "title_sim": [-0.027882490609925824], "body_sim": [0.012046870092419735], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 472}, {"A_title": "Updated prod error code test to be fiber-compat", "A_clean_title": ["updat", "prod", "error", "code", "test", "fiber", "compat"], "B_title": "[Fiber] Throw on undefined component output", "B_clean_title": ["fiber", "throw", "undefin", "compon", "output"], "A_body": "This test previously returned `undefined` from `render()` to cause an error. Fiber allows this though so the test was failing. I've updated the test instead to trigger a different error that both Stack and Fiber share in common.", "A_clean_body": ["thi", "test", "previous", "return", "undefin", "render", "caus", "error", "fiber", "allow", "thi", "though", "so", "test", "wa", "fail", "'ve", "updat", "test", "instead", "trigger", "differ", "error", "that", "both", "stack", "fiber", "share", "common"], "B_body": "This removes an (in my opinion) unnecessary duplicate warning from Stack so that I don't have to reimplement it in Fiber. Then it changes Fiber to throw on undefined component output.\r\n\r\nSee individual commits. Only the last commit affects Fiber, the rest are tweaking Stack and tests.", "B_clean_body": ["thi", "remov", "my", "opinion", "unnecessari", "duplic", "warn", "stack", "so", "that", "n't", "have", "reimplement", "it", "fiber", "then", "it", "chang", "fiber", "throw", "undefin", "compon", "output", "see", "individu", "commit", "onli", "last", "commit", "affect", "fiber", "rest", "are", "tweak", "stack", "test"], "title_sim": [0.1479480146194565], "body_sim": [0.4362319976759409], "file_list_sim": 0.2222222222222222, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 6}, {"A_title": "Fix error in test logging", "A_clean_title": ["fix", "error", "test", "log"], "B_title": "Make it easy to run the browser tests on saucelabs", "B_clean_title": ["make", "it", "easi", "run", "browser", "test", "saucelab"], "A_body": "grunt.error.writeln doesn't exist.\n\nI think this is right. Can you confirm @subtleGradient an then I'll push this.\n", "A_clean_body": ["grunt", "error", "writeln", "n't", "exist", "think", "thi", "right", "you", "confirm", "subtlegradi", "subtl", "gradient", "then", "'ll", "push", "thi"], "B_body": "This adds a bunch of tasks for manually running the tests in a browser on saucelabs.\nI haven't enabled any of these for travis-ci yet. I plan to do that in a separate pull request.\n", "B_clean_body": ["thi", "add", "bunch", "task", "manual", "run", "test", "browser", "saucelab", "have", "n't", "enabl", "ani", "these", "travi", "ci", "yet", "plan", "that", "separ", "pull", "request"], "title_sim": [0.07030267920650086], "body_sim": [0.08919767423717552], "file_list_sim": 0.1, "overlap_files_len": 1, "code_sim": [0.12774769397763092, 0.2648559137509832], "location_sim": [0.13569321533923304, 1.0], "pattern": 0, "time": 0}, {"A_title": "Robust animation-end handling in ReactCSSTransitionGroup", "A_clean_title": ["robust", "anim", "end", "handl", "reactcsstransitiongroup", "react", "css", "transit", "group"], "B_title": "CSS transition fix", "B_clean_title": ["css", "transit", "fix"], "A_body": "As described in https://github.com/facebook/react/issues/1326, the transitionend event is buggy and prevents some animations from being cleaned-up. This PR, taking a lead from the Khan Academy's TimeoutTransitionGroup (https://github.com/Khan/react-components/blob/master/js/timeout-transition-group.jsx), requires developers to specify timeout durations for each kind of animation to ensure that they get cleaned-up. Enabling transitions without providing timeouts now logs a deprecation warning.\n\nThis solution isn't perfect, but in the absence of a more robust animation-event API, it's the best that can be done. This change allows developers to produce reliable animations with ReactCSSTransitionGroup which would otherwise be impossible.\n", "A_clean_body": ["as", "describ", "http", "github", "com", "facebook", "react", "issu", "1326", "transitionend", "event", "buggi", "prevent", "some", "anim", "be", "clean", "up", "thi", "pr", "take", "lead", "khan", "academi", "'s", "timeouttransitiongroup", "timeout", "transit", "group", "http", "transit", "compon", "blob", "master", "js", "timeout", "group", "jsx", "github", "com", "khan", "react", "requir", "develop", "specifi", "timeout", "durat", "each", "kind", "anim", "ensur", "that", "they", "get", "clean", "up", "enabl", "transit", "without", "provid", "timeout", "now", "log", "deprec", "warn", "thi", "solut", "n't", "perfect", "but", "absenc", "more", "robust", "anim", "event", "api", "it", "'s", "best", "that", "done", "thi", "chang", "allow", "develop", "produc", "reliabl", "anim", "reactcsstransitiongroup", "react", "css", "transit", "group", "which", "would", "otherwis", "imposs"], "B_body": "Hey React Team!\nI was playing around with transition groups and found that adding a call to requestAnimationFrame seems to help a lot with webkit transitionEnd events firing more consistently. I added a basic catch for browsers without the api call but this is a band-aid solution targeted at recent versions of evergreen browsers. [This chromium bug thread](https://code.google.com/p/chromium/issues/detail?id=388082) helped me a ton in diagnosing the issue on Chrome.\n", "B_clean_body": ["hey", "react", "team", "wa", "play", "around", "transit", "group", "found", "that", "ad", "call", "requestanimationfram", "request", "anim", "frame", "seem", "help", "lot", "webkit", "transitionend", "transit", "end", "event", "fire", "more", "consist", "ad", "basic", "catch", "browser", "without", "api", "call", "but", "thi", "band", "aid", "solut", "target", "at", "recent", "version", "evergreen", "browser", "thi", "chromium", "bug", "thread", "http", "googl", "code", "com", "chromium", "issu", "detail", "id=388082", "help", "me", "ton", "diagnos", "issu", "chrome"], "title_sim": [0.49922605507462287], "body_sim": [0.5018775647354219], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.024634559052272832, 0.002316462916490339], "location_sim": [0.2585551330798479, 0.6476190476190476], "pattern": 0, "time": 13}, {"A_title": "Clear transition timeouts when component unmounts. Fixes #4876", "A_clean_title": ["clear", "transit", "timeout", "when", "compon", "unmount", "fix", "4876"], "B_title": "Fixes #4876 bug where animation has not finished before component rem\u2026", "B_clean_title": ["fix", "4876", "bug", "where", "anim", "ha", "not", "finish", "befor", "compon", "rem\u2026"], "A_body": "I noticed this when testing, as react components are created and unmounted rapidly during tests. I think it makes sense to clear the timeouts set by the delay prop when the component is unmounted.\n", "A_clean_body": ["notic", "thi", "when", "test", "as", "react", "compon", "are", "creat", "unmount", "rapidli", "dure", "test", "think", "it", "make", "sens", "clear", "timeout", "set", "by", "delay", "prop", "when", "compon", "unmount"], "B_body": "\u2026oved from DOM\n", "B_clean_body": ["\u2026ove", "dom"], "title_sim": [0.2378372703252088], "body_sim": [0.04116529882478535], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.019095798095223195, 0.026453863698385465], "location_sim": [0.0, 0.0], "pattern": 1, "time": 35}, {"A_title": "Update getting-started.md", "A_clean_title": ["updat", "get", "start", "md"], "B_title": "Create section on using React with package managers.", "B_clean_title": ["creat", "section", "react", "packag", "manag"], "A_body": "Added babel-loader to the list of npm packages for proper webpack build\n", "A_clean_body": ["ad", "babel", "loader", "list", "npm", "packag", "proper", "webpack", "build"], "B_body": "Our \"getting started\" experience is pretty rough.  A user comes to our site wanting to learn about React, and we start telling them about es6, npm, babel, webpack, gulp, and a whole ton of other infrastructure-related stuff.  This is all super important and does belong in our documentation, but it's a bit much for a new user who just wants to get a \"Hello World\" example working.\n\nThis is the first step toward solving https://github.com/facebook/react/issues/5679.  It gives us a page where we can talk about configuring es6/npm/babel/webpack/gulp/bower with React.  We can freely add stuff to this page without worrying about complicating our getting-started-with-React experience.\n\ncc @zpao \n", "B_clean_body": ["our", "get", "start", "experi", "pretti", "rough", "user", "come", "our", "site", "want", "learn", "about", "react", "we", "start", "tell", "them", "about", "es6", "npm", "babel", "webpack", "gulp", "whole", "ton", "other", "infrastructur", "relat", "stuff", "thi", "all", "super", "import", "belong", "our", "document", "but", "it", "'s", "bit", "much", "new", "user", "who", "just", "want", "get", "hello", "world", "exampl", "work", "thi", "first", "step", "toward", "solv", "http", "github", "com", "facebook", "react", "issu", "5679", "it", "give", "us", "page", "where", "we", "talk", "about", "configur", "es6", "npm", "babel", "webpack", "gulp", "bower", "react", "we", "freeli", "add", "stuff", "thi", "page", "without", "worri", "about", "complic", "our", "get", "start", "react", "experi", "cc", "zpao"], "title_sim": [0.012765513293020659], "body_sim": [0.3403503648776549], "file_list_sim": 0.16666666666666666, "overlap_files_len": 1, "code_sim": [0.061693436512687765, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 43}, {"A_title": "Add React benchmarking infrastructure", "A_clean_title": ["add", "react", "benchmark", "infrastructur"], "B_title": "One-click benchmark runner script", "B_clean_title": ["one", "click", "benchmark", "runner", "script"], "A_body": "This is currently a WIP and is not yet complete.\r\n\r\nThe aim of this PR is to give us better tracking of performance and bundle sizes as we make changes to the React codebase. \r\n\r\nTo do this, new infrastructure is needed to validate our code changes against pre-defined benchmarks. We can do this using Google's Lighthouse tool, performance markers in the benchmarks, an automated build process. For now the benchmarking script does a build and benchmark run comparing the `local` React repo and a `remote merge base` React repo.\r\n\r\nThe end goal is to have this process run on a CI pipeline which can provide us feedback in builds/PRs so we have constant feedback in regards to performance improvements and regressions.\r\n\r\nTo test how this works, run:\r\n\r\n`yarn bench`\r\n\r\nFrom the branch on this PR. It should take a few minutes to run and report back the performance metrics of `local` and `remote merge base`.\r\n\r\nThere are still things that need to be finished:\r\n\r\n- [x] Provide a better visual output of results when `yarn bench` is run\r\n- [x] Add bundle size comparison checks and remove the existing code for showing branches from the Rollup build process (it will become redundant with this feature)\r\n- [x] Add more benchmarks other than the `functional-components` benchmark\r\n- [x] Add bootstrapped sampled data over results to help show confidence in figures\r\n- [x] Add additional CLI options to better refine bench runs", "A_clean_body": ["thi", "current", "wip", "not", "yet", "complet", "aim", "thi", "pr", "give", "us", "better", "track", "perform", "bundl", "size", "as", "we", "make", "chang", "react", "codebas", "thi", "new", "infrastructur", "need", "valid", "our", "code", "chang", "against", "pre", "defin", "benchmark", "we", "thi", "googl", "'s", "lighthous", "tool", "perform", "marker", "benchmark", "autom", "build", "process", "now", "benchmark", "script", "build", "benchmark", "run", "compar", "local", "react", "repo", "remot", "merg", "base", "react", "repo", "end", "goal", "have", "thi", "process", "run", "ci", "pipelin", "which", "provid", "us", "feedback", "build", "pr", "rs", "so", "we", "have", "constant", "feedback", "regard", "perform", "improv", "regress", "test", "how", "thi", "work", "run", "yarn", "bench", "branch", "thi", "pr", "it", "take", "few", "minut", "run", "report", "back", "perform", "metric", "local", "remot", "merg", "base", "there", "are", "still", "thing", "that", "need", "finish", "provid", "better", "visual", "output", "result", "when", "yarn", "bench", "run", "add", "bundl", "size", "comparison", "check", "remov", "exist", "code", "show", "branch", "rollup", "build", "process", "it", "will", "becom", "redund", "thi", "featur", "add", "more", "benchmark", "other", "than", "function", "compon", "benchmark", "add", "bootstrap", "sampl", "data", "over", "result", "help", "show", "confid", "figur", "add", "addit", "cli", "option", "better", "refin", "bench", "run"], "B_body": "It's a bit verbose to run our [benchmark script](https://github.com/facebook/react/blob/master/scripts/bench/README.md) now and I'm thinking about ways to make it easier (open to better ideas).\n\n> ```\n> ./scripts/bench/benchmark-runner [--dev]\n> ```\n> \n> It takes bundles from your local `build` folder and compares them with React's latest master build (from http://react.zpao.com/builds/master/latest/). Notice that it doesn't build React by default; you can run `npm run build` manually before invoking the benchmark runner (like `npm run build && ./scripts/bench/benchmark-runner`).\n\ncc @spicyj @gaearon @zpao \n", "B_clean_body": ["it", "'s", "bit", "verbos", "run", "our", "benchmark", "script", "http", "md", "github", "com", "facebook", "react", "blob", "master", "script", "bench", "readm", "now", "'m", "think", "about", "way", "make", "it", "easier", "open", "better", "idea", "runner", "script", "bench", "benchmark", "dev", "it", "take", "bundl", "your", "local", "build", "folder", "compar", "them", "react", "'s", "latest", "master", "build", "http", "zpao", "react", "com", "build", "master", "latest", "notic", "that", "it", "n't", "build", "react", "by", "default", "you", "run", "npm", "run", "build", "manual", "befor", "invok", "benchmark", "runner", "like", "npm", "run", "build", "runner", "script", "bench", "benchmark", "cc", "spicyj", "gaearon", "zpao"], "title_sim": [0.30124386722001756], "body_sim": [0.6050450605644708], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 218}, {"A_title": "[docs] Use marked instead of Showdown and escape HTML", "A_clean_title": ["doc", "use", "mark", "instead", "showdown", "escap", "html"], "B_title": "Add note about Markdown & XSS attacks", "B_clean_title": ["add", "note", "about", "markdown", "xss", "attack"], "A_body": "Fixes #3501.\n", "A_clean_body": ["fix", "3501"], "B_body": "This addresses #3501, adding a comment in the front-page Markdown example about XSS.\n", "B_clean_body": ["thi", "address", "3501", "ad", "comment", "front", "page", "markdown", "exampl", "about", "xss"], "title_sim": [0.012467263752265662], "body_sim": [-0.058433208746429786], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 19}, {"A_title": "Bug Fix: Sample Project reloads on empty form submission", "A_clean_title": ["bug", "fix", "sampl", "project", "reload", "empti", "form", "submiss"], "B_title": "Bump Commoner version to fix EMFILE errors", "B_clean_title": ["bump", "common", "version", "fix", "emfil", "error"], "A_body": "_Before_ submitting a pull request, please make sure the following is done...\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests!\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes (`grunt test`).\n5. Make sure your code lints (`grunt lint`) - we've done our best to make sure these rules match our internal linting guidelines.\n6. If you haven't already, complete the [CLA](https://code.facebook.com/cla).\n\nReturning false ensures that the page does not reload when one of the input fields is empty. Consequently, this prevents form data from being cleared on page reload.\n", "A_clean_body": ["befor", "submit", "pull", "request", "pleas", "make", "sure", "follow", "done", "fork", "repo", "creat", "your", "branch", "master", "you", "'ve", "ad", "code", "that", "test", "add", "test", "you", "'ve", "chang", "api", "ap", "updat", "document", "ensur", "test", "suit", "pass", "grunt", "test", "make", "sure", "your", "code", "lint", "grunt", "lint", "we", "'ve", "done", "our", "best", "make", "sure", "these", "rule", "match", "our", "intern", "lint", "guidelin", "you", "have", "n't", "alreadi", "complet", "cla", "http", "facebook", "code", "com", "cla", "return", "fals", "ensur", "that", "page", "not", "reload", "when", "one", "input", "field", "empti", "consequ", "thi", "prevent", "form", "data", "be", "clear", "page", "reload"], "B_body": "Finally found a more robust solution for the \"too many open files\"\nproblem: https://github.com/benjamn/commoner/commit/ad72ba42db.\n\nCloses #137.\nCloses #138.\n\ncc @zpao @jeffreylin\n", "B_clean_body": ["final", "found", "more", "robust", "solut", "too", "mani", "open", "file", "problem", "http", "github", "com", "benjamn", "common", "commit", "ad72ba42db", "close", "137", "close", "138", "cc", "zpao", "jeffreylin"], "title_sim": [0.07110604110065726], "body_sim": [0.10887128611247293], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 1084}, {"A_title": "missing semicolon", "A_clean_title": ["miss", "semicolon"], "B_title": "Resolve eslint error", "B_clean_title": ["resolv", "eslint", "error"], "A_body": "", "A_clean_body": [], "B_body": "I was about to begin work on an issue and usually run the linter and tests before starting to be sure I'm starting with a clean slate. I noticed that the linter had one error, so I thought it would be a good idea to have it be a separate PR and not lump it in randomly with the actual issue fix.\n", "B_clean_body": ["wa", "about", "begin", "work", "issu", "usual", "run", "linter", "test", "befor", "start", "sure", "'m", "start", "clean", "slate", "notic", "that", "linter", "had", "one", "error", "so", "thought", "it", "would", "good", "idea", "have", "it", "separ", "pr", "not", "lump", "it", "randomli", "actual", "issu", "fix"], "title_sim": [-0.022340508073816306], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Remove extraneous `value` in controlled form elements docs", "A_clean_title": ["remov", "extran", "valu", "control", "form", "element", "doc"], "B_title": "Fix doc for Uncontrolled Components", "B_clean_title": ["fix", "doc", "uncontrol", "compon"], "A_body": "The uncontrolled input should not have `value` attribute \u2013 this is the main difference and it\u2019s confusing to see it in this example. Codepen is correct (does not have the `value` attr`).\n", "A_clean_body": ["uncontrol", "input", "not", "have", "valu", "attribut", "thi", "main", "differ", "it", "confus", "see", "it", "thi", "exampl", "codepen", "correct", "not", "have", "valu", "attr"], "B_body": "_Before_ submitting a pull request, please make sure the following is done...\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests!\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes (`npm test`).\n5. Make sure your code lints (`npm run lint`) - we've done our best to make sure these rules match our internal linting guidelines.\n6. If you haven't already, complete the [CLA](https://code.facebook.com/cla).\n\nFix code snippet for Uncontrolled Components to match example from codepen.io.\n", "B_clean_body": ["befor", "submit", "pull", "request", "pleas", "make", "sure", "follow", "done", "fork", "repo", "creat", "your", "branch", "master", "you", "'ve", "ad", "code", "that", "test", "add", "test", "you", "'ve", "chang", "api", "ap", "updat", "document", "ensur", "test", "suit", "pass", "npm", "test", "make", "sure", "your", "code", "lint", "npm", "run", "lint", "we", "'ve", "done", "our", "best", "make", "sure", "these", "rule", "match", "our", "intern", "lint", "guidelin", "you", "have", "n't", "alreadi", "complet", "cla", "http", "facebook", "code", "com", "cla", "fix", "code", "snippet", "uncontrol", "compon", "match", "exampl", "codepen", "io"], "title_sim": [0.5880861093694529], "body_sim": [0.120498489459923], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Forms Update", "A_clean_title": ["form", "updat"], "B_title": "Fix doc for Uncontrolled Components", "B_clean_title": ["fix", "doc", "uncontrol", "compon"], "A_body": "Fixes [8052](https://github.com/facebook/react/issues/8052)\nFixes [8068](https://github.com/facebook/react/issues/8068)\n- Removed .includes() and updated corresponding CodePen\n- Added line-highlighting on first 2 examples\n", "A_clean_body": ["fix", "8052", "http", "github", "com", "facebook", "react", "issu", "8052", "fix", "8068", "http", "github", "com", "facebook", "react", "issu", "8068", "remov", "includ", "updat", "correspond", "codepen", "code", "pen", "ad", "line", "highlight", "first", "exampl"], "B_body": "_Before_ submitting a pull request, please make sure the following is done...\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests!\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes (`npm test`).\n5. Make sure your code lints (`npm run lint`) - we've done our best to make sure these rules match our internal linting guidelines.\n6. If you haven't already, complete the [CLA](https://code.facebook.com/cla).\n\nFix code snippet for Uncontrolled Components to match example from codepen.io.\n", "B_clean_body": ["befor", "submit", "pull", "request", "pleas", "make", "sure", "follow", "done", "fork", "repo", "creat", "your", "branch", "master", "you", "'ve", "ad", "code", "that", "test", "add", "test", "you", "'ve", "chang", "api", "ap", "updat", "document", "ensur", "test", "suit", "pass", "npm", "test", "make", "sure", "your", "code", "lint", "npm", "run", "lint", "we", "'ve", "done", "our", "best", "make", "sure", "these", "rule", "match", "our", "intern", "lint", "guidelin", "you", "have", "n't", "alreadi", "complet", "cla", "http", "facebook", "code", "com", "cla", "fix", "code", "snippet", "uncontrol", "compon", "match", "exampl", "codepen", "io"], "title_sim": [0.011757667687424698], "body_sim": [0.1861748514284482], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.10714285714285714, 0.10714285714285714], "pattern": 0, "time": 0}, {"A_title": "Forms Update", "A_clean_title": ["form", "updat"], "B_title": "Remove extraneous `value` in controlled form elements docs", "B_clean_title": ["remov", "extran", "valu", "control", "form", "element", "doc"], "A_body": "Fixes [8052](https://github.com/facebook/react/issues/8052)\nFixes [8068](https://github.com/facebook/react/issues/8068)\n- Removed .includes() and updated corresponding CodePen\n- Added line-highlighting on first 2 examples\n", "A_clean_body": ["fix", "8052", "http", "github", "com", "facebook", "react", "issu", "8052", "fix", "8068", "http", "github", "com", "facebook", "react", "issu", "8068", "remov", "includ", "updat", "correspond", "codepen", "code", "pen", "ad", "line", "highlight", "first", "exampl"], "B_body": "The uncontrolled input should not have `value` attribute \u2013 this is the main difference and it\u2019s confusing to see it in this example. Codepen is correct (does not have the `value` attr`).\n", "B_clean_body": ["uncontrol", "input", "not", "have", "valu", "attribut", "thi", "main", "differ", "it", "confus", "see", "it", "thi", "exampl", "codepen", "correct", "not", "have", "valu", "attr"], "title_sim": [-0.0015189195135461694], "body_sim": [0.04569205608930078], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.10714285714285714, 0.10714285714285714], "pattern": 0, "time": 0}, {"A_title": "Fix exceptions when running `grunt test --debug`", "A_clean_title": ["fix", "except", "when", "run", "grunt", "test", "debug"], "B_title": "Make events propagate through shadow DOMs.\n", "B_clean_title": ["make", "event", "propag", "through", "shadow", "dom", "ms"], "A_body": "", "A_clean_body": [], "B_body": "Make events propagate through shadow DOMs.  This is necessary for WebComponents, which often render into shadow DOMs, through which events may need to propagate.\n", "B_clean_body": ["make", "event", "propag", "through", "shadow", "dom", "ms", "thi", "necessari", "webcompon", "web", "compon", "which", "often", "render", "into", "shadow", "dom", "ms", "through", "which", "event", "may", "need", "propag"], "title_sim": [0.04281254133790123], "body_sim": [0.0], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 1}, {"A_title": "Add full support for SVG 1.1", "A_clean_title": ["add", "full", "support", "svg"], "B_title": "Add support for SVG tspan and image elements, and the preserveAspectRatio attribute", "B_clean_title": ["add", "support", "svg", "tspan", "imag", "element", "preserveaspectratio", "preserv", "aspect", "ratio", "attribut"], "A_body": "Adds all the missing elements from http://www.w3.org/TR/SVG/eltindex.html\nAdds all the missing attributes, except for the event related ones (starting with 'on') from http://www.w3.org/TR/SVG/attindex.html\n\nUpdates documentation.\n\nAdds support for namespaced attributes that need `setAttributeNS`\n\nI have signed the CLA\n", "A_clean_body": ["add", "all", "miss", "element", "http", "w3", "html", "www", "org", "tr", "svg", "eltindex", "add", "all", "miss", "attribut", "except", "event", "relat", "one", "start", "'on", "http", "w3", "html", "www", "org", "tr", "svg", "attindex", "updat", "document", "add", "support", "namespac", "attribut", "that", "need", "setattributen", "set", "attribut", "ns", "have", "sign", "cla"], "B_body": "This pull request adds this support and updates the documentation.\n", "B_clean_body": ["thi", "pull", "request", "add", "thi", "support", "updat", "document"], "title_sim": [0.38911228460413344], "body_sim": [0.2347928628140396], "file_list_sim": 0.7142857142857143, "overlap_files_len": 5, "code_sim": [0.5090963462880344, 0.4923398881589889], "location_sim": [0.6975169300225733, 0.7573529411764706], "pattern": 0, "time": 11}, {"A_title": "Fix null node issue in ReactCSSTransitionGroup", "A_clean_title": ["fix", "null", "node", "issu", "reactcsstransitiongroup", "react", "css", "transit", "group"], "B_title": "Fix undefined DOM element at transition group", "B_clean_title": ["fix", "undefin", "dom", "element", "at", "transit", "group"], "A_body": "Fixes #6619. Thanks for reviewing! CC @spicyj \n", "A_clean_body": ["fix", "6619", "thank", "review", "cc", "spicyj"], "B_body": "It relates to #6619. Since isMounted() 'will likely be removed entirely in a future version of React' (according to [this](https://github.com/facebook/react/blob/15-stable/docs/docs/ref-02-component-api.md#ismounted)) maybe it would be better use findDOMNode to check whether element has node or not.\n\nfindDOMNode returns null if in render method we return null or false (e.g. to hide element), otherwise we have node to make some manipulation with it.\n", "B_clean_body": ["it", "relat", "6619", "sinc", "ismount", "mount", "'will", "like", "remov", "entir", "futur", "version", "react", "accord", "thi", "http", "02", "compon", "stabl", "doc", "doc", "ref", "api", "md", "github", "com", "facebook", "react", "blob", "15", "ismount", "mayb", "it", "would", "better", "use", "finddomnod", "find", "dom", "node", "check", "whether", "element", "ha", "node", "or", "not", "finddomnod", "find", "dom", "node", "return", "null", "render", "method", "we", "return", "null", "or", "fals", "hide", "element", "otherwis", "we", "have", "node", "make", "some", "manipul", "it"], "title_sim": [0.33668888701806404], "body_sim": [0.03231648541404124], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.28700407819316626, 0.36975710093212005], "location_sim": [0.40625, 0.7222222222222222], "pattern": 1, "time": 23}, {"A_title": "Fix html-jsx compiler", "A_clean_title": ["fix", "html", "jsx", "compil"], "B_title": "Fix home page code samples", "B_clean_title": ["fix", "home", "page", "code", "sampl"], "A_body": "It changed React Playground to add a required props but unfortunately didn't update the call sites of the front-page. I don't think it should be required so I'm just making it optional and providing the correct default value.\n\nTest Plan:\n- Open the front page and make sure examples are working\n- Open /react/jsx-compiler.html and make sure it is working\n- Open /react/html-jsx.html and make sure it is working\n", "A_clean_body": ["it", "chang", "react", "playground", "add", "requir", "prop", "but", "unfortun", "did", "n't", "updat", "call", "site", "front", "page", "n't", "think", "it", "requir", "so", "'m", "just", "make", "it", "option", "provid", "correct", "default", "valu", "test", "plan", "open", "front", "page", "make", "sure", "exampl", "are", "work", "open", "react", "jsx", "compil", "html", "make", "sure", "it", "work", "open", "react", "html", "jsx", "html", "make", "sure", "it", "work"], "B_body": "This change defaults the ReactPlayground to JSX compilation by default, which fixes the errors with the samples on the home page.\n", "B_clean_body": ["thi", "chang", "default", "reactplayground", "react", "playground", "jsx", "compil", "by", "default", "which", "fix", "error", "sampl", "home", "page"], "title_sim": [0.08480522734173644], "body_sim": [0.444810052492292], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0000000000000002, 1.0000000000000002], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Add new ReactPerf", "A_clean_title": ["add", "new", "reactperf", "react", "perf"], "B_title": "Perf actual React components", "B_clean_title": ["perf", "actual", "react", "compon"], "A_body": "This is a work in progress on implementing new ReactPerf as discussed in #6015.\n\nPer @sebmarkbage\u2019s request, I decided to focus on removing dependencies on internal method names. Data will be explicitly passed to the perf tool from React methods, and we will attempt to not rely on the execution order.\n\nRather than refactor the existing code, I chose to create a new tool side by side so I can compare their output until I\u2019m confident about correctness. I will later add `PROFILE` feature gates to the calls.\n- [x] Add barebones implementation of new ReactPerf\n- [x] It should count `totalTime` for flushes\n- [x] It should not count `totalTime` twice for nested flushes (fixes a minor bug in ReactPerf)\n- [x] It should not rely on the rendering and mounting stack matching parent hierarchy\n- [x] Decide how inclusive measurements work\n- [x] Add a safety mechanism to avoid accidentally forgetting `endMeasure()`\n- [x] It should count exclusive time for every lifecycle method\n- [x] It should include `displayNames` and other component information\n- [x] It should reconstruct the parent tree\n- [x] It should count `counts` and `created` for components\n- [x] It should count `exclusive` times for components\n- [x] It should count `inclusive` times for components based on parent tree\n- [x] Make it _the_ DebugTool\n- [x] Make sure teams that replaced ReactDefaultPerf with [wtf](https://google.github.io/tracing-framework/index.html) can keep doing so\n- [x] It should implement `printDOM()`\n- [x] It should implement `printWasted()`\n- [x] Treat stateless components correctly\n- [x] Expose the new `ReactPerf` as `react-addons-perf`\n- [x] Make sure wasted measurements are useful (something\u2019s off right now)\n- [ ] Do we want to rely on owner?\n- [ ] TESTS\n- [ ] Remove the old ReactPerf code\n- [ ] Introduce the new `PROFILE` gate and put calls behind it\n- [x] Consider the implications of using `WeakMap` in `__PROFILE__` builds\n- [ ] Expose `React.unstable_Instrumentation`\n- [x] Make sure we have new `get*()` methods and deprecated `printDOM()` and `getMeasurementSummaryMap()` are still there\n- [ ] Expose whatever React Native needs for systrace integration and enabling `PROFILE`\n- [ ] Verify compatibility with React ART (e.g. add [stuff like this](https://github.com/facebook/react-devtools/blob/master/backend/getData.js#L87-L89))\n- [ ] Ensure we throw a meaningful error when [`start()` is called inside the lifecycle](http://stackoverflow.com/questions/27279488/react-js-performance-tool-addon-throws-cannot-read-property-counts-of-undefin) or, better, consider providing support for that. See also #2095, #3436, https://github.com/lostthetrail/react-ssr-perf\n- [ ] New ReactPerf is correct, tested, has no effect in production, is hard to break accidentally when refactoring, and does not rely on implementation details\n", "A_clean_body": ["thi", "work", "progress", "implement", "new", "reactperf", "react", "perf", "as", "discuss", "6015", "per", "sebmarkbag", "request", "decid", "focu", "remov", "depend", "intern", "method", "name", "data", "will", "explicitli", "pass", "perf", "tool", "react", "method", "we", "will", "attempt", "not", "reli", "execut", "order", "rather", "than", "refactor", "exist", "code", "chose", "creat", "new", "tool", "side", "by", "side", "so", "compar", "their", "output", "until", "confid", "about", "correct", "will", "later", "add", "profil", "featur", "gate", "call", "add", "barebon", "implement", "new", "reactperf", "react", "perf", "it", "count", "totaltim", "total", "time", "flush", "it", "not", "count", "totaltim", "total", "time", "twice", "nest", "flush", "fix", "minor", "bug", "reactperf", "react", "perf", "it", "not", "reli", "render", "mount", "stack", "match", "parent", "hierarchi", "decid", "how", "inclus", "measur", "work", "add", "safeti", "mechan", "avoid", "accident", "forget", "endmeasur", "end", "measur", "it", "count", "exclus", "time", "everi", "lifecycl", "method", "it", "includ", "displaynam", "display", "name", "other", "compon", "inform", "it", "reconstruct", "parent", "tree", "it", "count", "count", "creat", "compon", "it", "count", "exclus", "time", "compon", "it", "count", "inclus", "time", "compon", "base", "parent", "tree", "make", "it", "debugtool", "debug", "tool", "make", "sure", "team", "that", "replac", "reactdefaultperf", "react", "default", "perf", "wtf", "http", "github", "html", "googl", "io", "trace", "framework", "index", "keep", "do", "so", "it", "implement", "printdom", "print", "dom", "it", "implement", "printwast", "print", "wast", "treat", "stateless", "compon", "correctli", "expos", "new", "reactperf", "react", "perf", "as", "react", "addon", "perf", "make", "sure", "wast", "measur", "are", "use", "someth", "off", "right", "now", "we", "want", "reli", "owner", "test", "remov", "old", "reactperf", "react", "perf", "code", "introduc", "new", "profil", "gate", "put", "call", "behind", "it", "consid", "implic", "weakmap", "weak", "map", "profil", "build", "expos", "react", "unstabl", "instrument", "make", "sure", "we", "have", "new", "get*", "method", "deprec", "printdom", "print", "dom", "getmeasurementsummarymap", "get", "measur", "summari", "map", "are", "still", "there", "expos", "whatev", "react", "nativ", "need", "systrac", "integr", "enabl", "profil", "verifi", "compat", "react", "art", "add", "stuff", "like", "thi", "http", "js", "github", "com", "facebook", "react", "devtool", "blob", "master", "backend", "getdata", "get", "data", "l87", "l89", "ensur", "we", "throw", "meaning", "error", "when", "start", "call", "insid", "lifecycl", "http", "js", "perform", "tool", "addon", "throw", "stackoverflow", "com", "question", "27279488", "react", "not", "read", "properti", "count", "undefin", "or", "better", "consid", "provid", "support", "that", "see", "also", "2095", "3436", "http", "ssr", "perf", "github", "com", "lostthetrail", "react", "new", "reactperf", "react", "perf", "correct", "test", "ha", "no", "effect", "product", "hard", "break", "accident", "when", "refactor", "not", "reli", "implement", "detail"], "B_body": "Working through #5254 \n\nI'm hijacking the lifecycle methods of the react components and then enabling DefaultPerf to measure them and print high-level statistics on the measures.\n\nI started at a basic implementation. Would like to submit subsequent PRs with more advanced functionality such as tracking # of times returned true vs false for shouldComponentUpdate, etc.\n", "B_clean_body": ["work", "through", "5254", "'m", "hijack", "lifecycl", "method", "react", "compon", "then", "enabl", "defaultperf", "default", "perf", "measur", "them", "print", "high", "level", "statist", "measur", "start", "at", "basic", "implement", "would", "like", "submit", "subsequ", "pr", "rs", "more", "advanc", "function", "such", "as", "track", "time", "return", "true", "vs", "fals", "shouldcomponentupd", "compon", "updat", "etc"], "title_sim": [0.17540337521456625], "body_sim": [0.37557466398176365], "file_list_sim": 0.13333333333333333, "overlap_files_len": 2, "code_sim": [0.4433425772724205, 0.1619698825880992], "location_sim": [0.0, 0.0], "pattern": -1, "time": 115}, {"A_title": "update create-react-class package.json to use latest react", "A_clean_title": ["updat", "creat", "react", "class", "packag", "json", "use", "latest", "react"], "B_title": "Remove broken GCC annotation from create-react-class", "B_clean_title": ["remov", "broken", "gcc", "annot", "creat", "react", "class"], "A_body": "**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. If you've added code that should be tested, add tests!\r\n3. If you've changed APIs, update the documentation.\r\n4. Ensure the test suite passes (`npm test`).\r\n5. Make sure your code lints (`npm run lint`).\r\n6. Format your code with [prettier](https://github.com/prettier/prettier) (`npm run prettier`).\r\n7. Run the [Flow](https://flowtype.org/) typechecks (`npm run flow`).\r\n8. If you added or removed any tests, run `./scripts/fiber/record-tests` before submitting the pull request, and commit the resulting changes.\r\n9. If you haven't already, complete the CLA.\r\n", "A_clean_body": ["**befor", "submit", "pull", "request", "pleas", "make", "sure", "follow", "done", "fork", "repositori", "http", "github", "com", "facebook", "react", "creat", "your", "branch", "master", "you", "'ve", "ad", "code", "that", "test", "add", "test", "you", "'ve", "chang", "api", "ap", "updat", "document", "ensur", "test", "suit", "pass", "npm", "test", "make", "sure", "your", "code", "lint", "npm", "run", "lint", "format", "your", "code", "prettier", "http", "github", "com", "prettier", "prettier", "npm", "run", "prettier", "run", "flow", "http", "flowtyp", "org", "typecheck", "npm", "run", "flow", "you", "ad", "or", "remov", "ani", "test", "run", "test", "script", "fiber", "record", "befor", "submit", "pull", "request", "commit", "result", "chang", "you", "have", "n't", "alreadi", "complet", "cla"], "B_body": "Fixes last issue in https://github.com/facebook/react/issues/7551.\r\nSame as https://github.com/facebook/react/pull/9928 but submitted against the right branch.", "B_clean_body": ["fix", "last", "issu", "http", "github", "com", "facebook", "react", "issu", "7551", "same", "as", "http", "github", "com", "facebook", "react", "pull", "9928", "but", "submit", "against", "right", "branch"], "title_sim": [0.11353461630962972], "body_sim": [0.3600633438917597], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "Warn on missing event handler properties", "A_clean_title": ["warn", "miss", "event", "handler", "properti"], "B_title": "warn when a propName looks like a mistyped event", "B_clean_title": ["warn", "when", "propnam", "prop", "name", "look", "like", "mistyp", "event"], "A_body": "Fixes #3548. Warns on properties that are case-insensitive matches for registered event names (e.g. \"onclick\" instead of \"onClick\").\n", "A_clean_body": ["fix", "3548", "warn", "properti", "that", "are", "case", "insensit", "match", "regist", "event", "name", "onclick", "instead", "onclick", "click"], "B_body": "closes #3548\n", "B_clean_body": ["close", "3548"], "title_sim": [0.45313619523594934], "body_sim": [0.0018913659605925828], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.47656664381520886, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 170}, {"A_title": "Update CommonJS example to use Babel 6", "A_clean_title": ["updat", "commonj", "common", "js", "exampl", "use", "babel"], "B_title": "Update examples for 15 (and other examples fixes)", "B_clean_title": ["updat", "exampl", "15", "other", "exampl", "fix"], "A_body": "Initially I tried updating the version of React but this caused Node to resolve it to the parent directory, and Babel started failing because it didn\u2019t recognize the `presets` option. To fix this, I updated Babel as well. I had to add the presets explicitly since Babel 6 requires that. While we don\u2019t explicitly use ES6 in the example I figured that adding a preset to it would cause less confusion than omitting it.\n\nBoth `npm start` and `npm run build` work correctly in my testing.\n\nReviewers: @zpao \n", "A_clean_body": ["initi", "tri", "updat", "version", "react", "but", "thi", "caus", "node", "resolv", "it", "parent", "directori", "babel", "start", "fail", "becaus", "it", "didn", "recogn", "preset", "option", "fix", "thi", "updat", "babel", "as", "well", "had", "add", "preset", "explicitli", "sinc", "babel", "requir", "that", "while", "we", "don", "explicitli", "use", "es6", "exampl", "figur", "that", "ad", "preset", "it", "would", "caus", "less", "confus", "than", "omit", "it", "both", "npm", "start", "npm", "run", "build", "work", "correctli", "my", "test", "review", "zpao"], "B_body": "No code in here had to change, unlike the 0.14 upgrade, we're warning free in here. I only fixed up a little bit of code to match our other examples and upgraded where we're pointing for several remote files (pulling in from their cdns where appropriate). I also removed webcomponents.js from the examples and just pointed that at a cdn like we do for our other third party deps.\n", "B_clean_body": ["no", "code", "here", "had", "chang", "unlik", "14", "upgrad", "we", "'re", "warn", "free", "here", "onli", "fix", "up", "littl", "bit", "code", "match", "our", "other", "exampl", "upgrad", "where", "we", "'re", "point", "sever", "remot", "file", "pull", "their", "cdn", "where", "appropri", "also", "remov", "webcompon", "js", "exampl", "just", "point", "that", "at", "cdn", "like", "we", "our", "other", "third", "parti", "dep"], "title_sim": [0.4649166738941504], "body_sim": [0.15777118890333494], "file_list_sim": 0.3333333333333333, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.2619047619047619, 1.0], "pattern": 0, "time": 2}, {"A_title": "Update introducting-react-elements.html", "A_clean_title": ["updat", "introduct", "react", "element", "html"], "B_title": "[docs] Move React Elements post to right place, fix typo", "B_clean_title": ["doc", "move", "react", "element", "post", "right", "place", "fix", "typo"], "A_body": "Simple typo correction.\n\nThe file name should also be changed, but that would break permalinks, probably better to simply leave it incorrect for the time being.\n", "A_clean_body": ["simpl", "typo", "correct", "file", "name", "also", "chang", "but", "that", "would", "break", "permalink", "probabl", "better", "simpli", "leav", "it", "incorrect", "time", "be"], "B_body": "The URL already made its way around so we can't just break it. We might\nwant to just live with it instead of even doing this redirect.\n\nhttps://github.com/plaxdan/react/commit/2b225446c03192b58e176f8885e60055cf5ea436#commitcomment-8176218\n\nReviewers: @spicyj @vjeux @sebmarkbage \nTest Plan: used the redirect locally\n", "B_clean_body": ["url", "alreadi", "made", "it", "way", "around", "so", "we", "ca", "n't", "just", "break", "it", "we", "might", "want", "just", "live", "it", "instead", "even", "do", "thi", "redirect", "http", "github", "com", "plaxdan", "react", "commit", "2b225446c03192b58e176f8885e60055cf5ea436", "commitcom", "8176218", "review", "spicyj", "vjeux", "sebmarkbag", "test", "plan", "use", "redirect", "local"], "title_sim": [0.275171817354992], "body_sim": [0.12639800106229832], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "Add XML style JSX namespacing support using @jsxns docblock comment.", "A_clean_title": ["add", "xml", "style", "jsx", "namespac", "support", "jsxn", "docblock", "comment"], "B_title": "Support for JSX tag namespaces <React:DOM:div />", "B_clean_title": ["support", "jsx", "tag", "namespac", "react", "dom", "div"], "A_body": "Adds support for using XML namespaces in JSX to refer to custom defined identifiers in a `@jsxns` docblock comment. Can make a namespace refer to any JS identifier.\n\n``` javascript\n/**\n * @jsx React.DOM\n * @jsxns {\"UI\": \"MyApp.UI\", \"External\": \"External\"}\n */\n\nReact.createClass({\n  render: function() {\n    return (\n      <UI:Component />\n    );\n  }\n});\n```\n\nCompiles to:\n\n``` javascript\nReact.createClass({\n  render: function() {\n    return (\n      MyApp.UI.Component(null )\n    );\n  }\n});\n```\n\nShould address most of the concerns and patterns mentioned in #221.\n\nIncluded some basic tests for validating namespace definition and usage.\n", "A_clean_body": ["add", "support", "xml", "namespac", "jsx", "refer", "custom", "defin", "identifi", "jsxn", "docblock", "comment", "make", "namespac", "refer", "ani", "js", "identifi", "javascript", "jsx", "react", "dom", "jsxn", "ui", "myapp", "ui", "my", "app", "extern", "extern", "react", "createclass", "creat", "class", "render", "function", "return", "ui", "compon", "compil", "javascript", "react", "createclass", "creat", "class", "render", "function", "return", "myapp", "ui", "compon", "my", "app", "null", "address", "most", "concern", "pattern", "mention", "221", "includ", "some", "basic", "test", "valid", "namespac", "definit", "usag"], "B_body": "This has been suggested and discussed before: https://github.com/facebook/react/issues/74, https://github.com/facebook/react/issues/221, https://github.com/facebook/esprima/pull/6, etc.\n\nBut it seems to me like the discussions rather died out than a rejection of the issue. So here's for one final resurrection of the issue, with a proper implementation, using the XML-namespaces as seemed to be preferred by @jeffmo.\n\nIn my opinion, this issue points to a very pleasant _but not required_ feature that vanilla JS has, that JSX currently lacks. To me, it also highlights a possible issue with respect to best practices for sharing components and frameworks, as this may have impact design decisions depending on the authors preference for JS or JSX. Having to locally require and assign every single component intended to be used is _tedious_ and unnecessarily verbose. Simply being able to refer to a collection of components, as we easily can in JS, should be available to JSX as well.\n\n``` JS\n// In plain JS\nvar MyDOM = require('MyDOM');\nMyDOM.ComponentA(null);\nMyDOM.ComponentB(null);\n\n// In existing JSX\nvar MyDOM = require('MyDOM');\nvar MyDOM_ComponentA = MyDOM.ComponentA;\nvar MyDOM_ComponentB = MyDOM.ComponentB;\n<MyDOM_ComponentA />\n<MyDOM_ComponentB />\n\n// In enhanced JSX\nvar MyDOM = require('MyDOM');\n<MyDOM:ComponentA />\n<MyDOM:ComponentB />\n```\n\nThis brings JS and JSX to parity on this issue in my opinion, without inventing custom features or weird syntaxes, and it seems to me that this should not block any important future design decisions (that would be compatible with JSX), and it's entirely optional for the user.\n\nTechnically, the JSX implementation quotes invalid JS identifiers resulting from unusual characters in namespaces or tags (when possible), which explains the implementation of `quoteNamespacedTagName`.\n\nThis PR depends on https://github.com/facebook/esprima/pull/7 for `fb-esprima`, which is why the tests are failing.\n\nAll feedback and criticisms are appreciated.\n\nFixes #74.\n", "B_clean_body": ["thi", "ha", "been", "suggest", "discuss", "befor", "http", "github", "com", "facebook", "react", "issu", "74", "http", "github", "com", "facebook", "react", "issu", "221", "http", "github", "com", "facebook", "esprima", "pull", "etc", "but", "it", "seem", "me", "like", "discuss", "rather", "die", "out", "than", "reject", "issu", "so", "here", "'s", "one", "final", "resurrect", "issu", "proper", "implement", "xml", "namespac", "as", "seem", "prefer", "by", "jeffmo", "my", "opinion", "thi", "issu", "point", "veri", "pleasant", "but", "not", "requir", "featur", "that", "vanilla", "js", "ha", "that", "jsx", "current", "lack", "me", "it", "also", "highlight", "possibl", "issu", "respect", "best", "practic", "share", "compon", "framework", "as", "thi", "may", "have", "impact", "design", "decis", "depend", "author", "prefer", "js", "or", "jsx", "have", "local", "requir", "assign", "everi", "singl", "compon", "intend", "use", "tediou", "unnecessarili", "verbos", "simpli", "be", "abl", "refer", "collect", "compon", "as", "we", "easili", "js", "avail", "jsx", "as", "well", "js", "plain", "js", "var", "mydom", "my", "dom", "requir", "'mydom", "'mi", "dom", "mydom", "componenta", "my", "dom", "compon", "null", "mydom", "componentb", "my", "dom", "compon", "null", "exist", "jsx", "var", "mydom", "my", "dom", "requir", "'mydom", "'mi", "dom", "var", "mydom", "componenta", "my", "dom", "compon", "mydom", "componenta", "my", "dom", "compon", "var", "mydom", "componentb", "my", "dom", "compon", "mydom", "componentb", "my", "dom", "compon", "mydom", "componenta", "my", "dom", "compon", "mydom", "componentb", "my", "dom", "compon", "enhanc", "jsx", "var", "mydom", "my", "dom", "requir", "'mydom", "'mi", "dom", "mydom", "my", "dom", "componenta", "compon", "mydom", "my", "dom", "componentb", "compon", "thi", "bring", "js", "jsx", "pariti", "thi", "issu", "my", "opinion", "without", "invent", "custom", "featur", "or", "weird", "syntax", "it", "seem", "me", "that", "thi", "not", "block", "ani", "import", "futur", "design", "decis", "that", "would", "compat", "jsx", "it", "'s", "entir", "option", "user", "technic", "jsx", "implement", "quot", "invalid", "js", "identifi", "result", "unusu", "charact", "namespac", "or", "tag", "when", "possibl", "which", "explain", "implement", "quotenamespacedtagnam", "quot", "namespac", "tag", "name", "thi", "pr", "depend", "http", "github", "com", "facebook", "esprima", "pull", "fb", "esprima", "which", "whi", "test", "are", "fail", "all", "feedback", "critic", "are", "appreci", "fix", "74"], "title_sim": [0.5969556732936577], "body_sim": [0.5361584737311047], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.11653157682924666, 0.1334072985298411], "location_sim": [0.463855421686747, 1.0], "pattern": 1, "time": 64}, {"A_title": "docs in chapter forms", "A_clean_title": ["doc", "chapter", "form"], "B_title": "Remove extraneous `value` in controlled form elements docs", "B_clean_title": ["remov", "extran", "valu", "control", "form", "element", "doc"], "A_body": "While reading the docs I was a bit confused as there was no difference between the component code in the section _Controlled Components_ and _Uncontrolled Components_ in chapter [forms](https://facebook.github.io/react/docs/forms.html).\n\nI changed it to the code which was provided on CodePen.\n", "A_clean_body": ["while", "read", "doc", "wa", "bit", "confus", "as", "there", "wa", "no", "differ", "between", "compon", "code", "section", "control", "compon", "uncontrol", "compon", "chapter", "form", "http", "github", "html", "facebook", "io", "react", "doc", "form", "chang", "it", "code", "which", "wa", "provid", "codepen", "code", "pen"], "B_body": "The uncontrolled input should not have `value` attribute \u2013 this is the main difference and it\u2019s confusing to see it in this example. Codepen is correct (does not have the `value` attr`).\n", "B_clean_body": ["uncontrol", "input", "not", "have", "valu", "attribut", "thi", "main", "differ", "it", "confus", "see", "it", "thi", "exampl", "codepen", "correct", "not", "have", "valu", "attr"], "title_sim": [0.31323507314338433], "body_sim": [0.25683460820505266], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Change tabIndex to MUST_USE_ATTRIBUTE to avoid special focus treatment in Chrome", "A_clean_title": ["chang", "tabindex", "tab", "index", "must", "use", "attribut", "avoid", "special", "focu", "treatment", "chrome"], "B_title": "Use removeAttribute to forcefully remove properties from the DOM", "B_clean_title": ["use", "removeattribut", "remov", "attribut", "forc", "remov", "properti", "dom"], "A_body": "Chrome treats anchor tags with an explicit `tabIndex='0'` different then if the attribute was not present. Specifically when clicking a link with an implicit tab index (i.e. no attribute on the node) no focus outline is shown. Whereas with an explicit tabindex='0' it does get shown. This is super minor, but maintaining react-bootstrap has taught me that A LOT of people are VERY touchy about browser focus outlines.\n\nIf anything this just makes the behavior consistent across browsers. (tested in recent FF, Chrome, and Edge)\n\nexample: https://jsfiddle.net/7kmck1f7/1/\n", "A_clean_body": ["chrome", "treat", "anchor", "tag", "explicit", "tabindex=", "tab", "index=", "differ", "then", "attribut", "wa", "not", "present", "specif", "when", "click", "link", "implicit", "tab", "index", "no", "attribut", "node", "no", "focu", "outlin", "shown", "wherea", "explicit", "tabindex=", "it", "get", "shown", "thi", "super", "minor", "but", "maintain", "react", "bootstrap", "ha", "taught", "me", "that", "lot", "peopl", "are", "veri", "touchi", "about", "browser", "focu", "outlin", "anyth", "thi", "just", "make", "behavior", "consist", "across", "browser", "test", "recent", "ff", "chrome", "edg", "exampl", "http", "jsfiddl", "net", "7kmck1f7"], "B_body": "Proper implementation of #1448, because now there's something factual to discuss.\n\nThe DOM now statelessly reflects the props provided to DOM components.  No more `getDefaultValueForProperty`. `\"\"`, `null` and `undefined` no longer behave differently depending on the value being an attribute or property, with `\"\"` being an actual value and distinct from `null` and `undefined`. I would dare say that this is the _correct_ fix for #1431.\n\nAs is mentioned and benchmarked in the #1448, there should be a theoretically _measurable_ impact of this (in _some_ browsers). But I dare anyone to suggest a reasonable real-life use-case where it is actually at all measurable (unless my benchmark is flawed).\n\n---\n\nIf we want to push the performance of edge-browsers to the limit, we could conditionally make the default type be attribute (instead of property) as FF and Chrome perform significantly better, but they're basically an order of magnitude faster already making it quite pointless (and fragile) IMHO.\n\nBasic tests added, removed an existing test (that has been half-broken) as it no longer makes sense.\n\n```\n   raw     gz Compared to master @ 32b84a4c5ea32835b93a857cf00f0db86d6c755a\n     =      = build/JSXTransformer-previous.js\n     =      = build/JSXTransformer.js\n     =      = build/react-previous.min.js\n     =      = build/react-test.js\n  -580   -172 build/react-with-addons.js\n  -151    -60 build/react-with-addons.min.js\n  -580   -169 build/react.js\n  -150    -53 build/react.min.js\n```\n", "B_clean_body": ["proper", "implement", "1448", "becaus", "now", "there", "'s", "someth", "factual", "discuss", "dom", "now", "statelessli", "reflect", "prop", "provid", "dom", "compon", "no", "more", "getdefaultvalueforproperti", "get", "default", "valu", "properti", "null", "undefin", "no", "longer", "behav", "differ", "depend", "valu", "be", "attribut", "or", "properti", "be", "actual", "valu", "distinct", "null", "undefin", "would", "dare", "say", "that", "thi", "correct", "fix", "1431", "as", "mention", "benchmark", "1448", "there", "theoret", "measur", "impact", "thi", "some", "browser", "but", "dare", "anyon", "suggest", "reason", "real", "life", "use", "case", "where", "it", "actual", "at", "all", "measur", "unless", "my", "benchmark", "flaw", "we", "want", "push", "perform", "edg", "browser", "limit", "we", "could", "condit", "make", "default", "type", "attribut", "instead", "properti", "as", "ff", "chrome", "perform", "significantli", "better", "but", "they", "'re", "basic", "order", "magnitud", "faster", "alreadi", "make", "it", "quit", "pointless", "fragil", "imho", "basic", "test", "ad", "remov", "exist", "test", "that", "ha", "been", "half", "broken", "as", "it", "no", "longer", "make", "sens", "raw", "gz", "compar", "master", "32b84a4c5ea32835b93a857cf00f0db86d6c755a", "build", "jsxtransform", "previou", "js", "jsx", "transform", "js", "build", "jsxtransform", "jsx", "transform", "build", "react", "previou", "min", "js", "build", "react", "test", "js", "580", "172", "build", "react", "addon", "js", "151", "60", "build", "react", "addon", "min", "js", "580", "169", "js", "build", "react", "150", "53", "min", "js", "build", "react"], "title_sim": [0.22056058103598528], "body_sim": [0.3044680245538984], "file_list_sim": 0.16666666666666666, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.1851106639839034, 0.4742268041237113], "pattern": 0, "time": 622}, {"A_title": "Pass all SVG attributes through", "A_clean_title": ["pass", "all", "svg", "attribut", "through"], "B_title": "Add support for SVG marker element", "B_clean_title": ["add", "support", "svg", "marker", "element"], "A_body": "# Update: this was reverted in favor of a different approach in https://github.com/facebook/react/pull/6243.\r\n\r\n# If any attribute is missing please file an issue and we'll add it.\r\n\r\n------------------\r\n\r\n\r\nAll attributes defined on SVG elements will now be passed directly regardless of the whitelist.\r\nThe casing specified by user will be preserved, and `setAttribute()` will be used.\r\n\r\nIn the future we will remove support for the camel case aliases to the hyphenated attributes. For example, we currently map `strokeWidth` to `stroke-width` but this is now deprecated behind a warning. When we remove support for this, we can remove some of the code paths introduced in this commit.\r\n\r\nThe purpose of this change is to stop maintaining a separate SVG property config.\r\nThe config still exists for two purposes:\r\n- Allow a migration path for deprecated camelcased versions of hyphenated SVG attributes\r\n- Track special namespaced attributes (they still require a whitelist)\r\n\r\nHowever it is no longer a blocker for using new non-namespaced SVG attributes, and users don't have to ask us to add them to the whitelist.\r\n\r\nFixes #1657\r\n\r\nReviewers: @spicyj @jimfb @sebmarkbage \r\n", "A_clean_body": ["updat", "thi", "wa", "revert", "favor", "differ", "approach", "http", "github", "com", "facebook", "react", "pull", "6243", "ani", "attribut", "miss", "pleas", "file", "issu", "we", "'ll", "add", "it", "all", "attribut", "defin", "svg", "element", "will", "now", "pass", "directli", "regardless", "whitelist", "case", "specifi", "by", "user", "will", "preserv", "setattribut", "set", "attribut", "will", "use", "futur", "we", "will", "remov", "support", "camel", "case", "alias", "hyphen", "attribut", "exampl", "we", "current", "map", "strokewidth", "stroke", "width", "stroke", "width", "but", "thi", "now", "deprec", "behind", "warn", "when", "we", "remov", "support", "thi", "we", "remov", "some", "code", "path", "introduc", "thi", "commit", "purpos", "thi", "chang", "stop", "maintain", "separ", "svg", "properti", "config", "config", "still", "exist", "two", "purpos", "allow", "migrat", "path", "deprec", "camelcas", "version", "hyphen", "svg", "attribut", "track", "special", "namespac", "attribut", "they", "still", "requir", "whitelist", "howev", "it", "no", "longer", "blocker", "new", "non", "namespac", "svg", "attribut", "user", "n't", "have", "ask", "us", "add", "them", "whitelist", "fix", "1657", "review", "spicyj", "jimfb", "sebmarkbag"], "B_body": "Including marker-specific attributes (markerUnits, refX, refY, markerWidth, markerHeight, orient) and an attribute applicaple on path and basic shapes (marker).\n\nThere is a slight semantic issue regarding `orient`. It does not map directly to any DOM property. There is [`orient` attribute](http://www.w3.org/TR/SVG11/painting.html#OrientAttribute) but [`orientType`](http://www.w3.org/TR/SVG11/painting.html#__svg__SVGMarkerElement__orientType) and [`orientAngle`](http://www.w3.org/TR/SVG11/painting.html#__svg__SVGMarkerElement__orientAngle) properties. However, orient property as defined here in React has `MUST_USE_ATTRIBUTE` flag so it should not be a problem.\n\nThis is part of umbrella issue #1657.\n", "B_clean_body": ["includ", "marker", "specif", "attribut", "markerunit", "marker", "unit", "refx", "ref", "refi", "ref", "markerwidth", "marker", "width", "markerheight", "marker", "height", "orient", "attribut", "applicapl", "path", "basic", "shape", "marker", "there", "slight", "semant", "issu", "regard", "orient", "it", "not", "map", "directli", "ani", "dom", "properti", "there", "orient", "attribut", "http", "w3", "html", "www", "org", "tr", "svg11", "paint", "orientattribut", "orient", "attribut", "but", "orienttyp", "orient", "type", "http", "w3", "html", "www", "org", "tr", "svg11", "paint", "svg", "svgmarkerel", "orienttyp", "svg", "marker", "element", "orient", "type", "orientangl", "orient", "angl", "http", "w3", "html", "www", "org", "tr", "svg11", "paint", "svg", "svgmarkerel", "orientangl", "svg", "marker", "element", "orient", "angl", "properti", "howev", "orient", "properti", "as", "defin", "here", "react", "ha", "must", "use", "attribut", "flag", "so", "it", "not", "problem", "thi", "part", "umbrella", "issu", "1657"], "title_sim": [0.05616284875054005], "body_sim": [0.5226503663116957], "file_list_sim": 0.08333333333333333, "overlap_files_len": 1, "code_sim": [0.05406410274039175, 0.0], "location_sim": [0.0855614973262032, 0.6], "pattern": 1, "time": 47}, {"A_title": "Pass all SVG attributes through", "A_clean_title": ["pass", "all", "svg", "attribut", "through"], "B_title": "Add support for SVG DOM property: filter", "B_clean_title": ["add", "support", "svg", "dom", "properti", "filter"], "A_body": "# Update: this was reverted in favor of a different approach in https://github.com/facebook/react/pull/6243.\r\n\r\n# If any attribute is missing please file an issue and we'll add it.\r\n\r\n------------------\r\n\r\n\r\nAll attributes defined on SVG elements will now be passed directly regardless of the whitelist.\r\nThe casing specified by user will be preserved, and `setAttribute()` will be used.\r\n\r\nIn the future we will remove support for the camel case aliases to the hyphenated attributes. For example, we currently map `strokeWidth` to `stroke-width` but this is now deprecated behind a warning. When we remove support for this, we can remove some of the code paths introduced in this commit.\r\n\r\nThe purpose of this change is to stop maintaining a separate SVG property config.\r\nThe config still exists for two purposes:\r\n- Allow a migration path for deprecated camelcased versions of hyphenated SVG attributes\r\n- Track special namespaced attributes (they still require a whitelist)\r\n\r\nHowever it is no longer a blocker for using new non-namespaced SVG attributes, and users don't have to ask us to add them to the whitelist.\r\n\r\nFixes #1657\r\n\r\nReviewers: @spicyj @jimfb @sebmarkbage \r\n", "A_clean_body": ["updat", "thi", "wa", "revert", "favor", "differ", "approach", "http", "github", "com", "facebook", "react", "pull", "6243", "ani", "attribut", "miss", "pleas", "file", "issu", "we", "'ll", "add", "it", "all", "attribut", "defin", "svg", "element", "will", "now", "pass", "directli", "regardless", "whitelist", "case", "specifi", "by", "user", "will", "preserv", "setattribut", "set", "attribut", "will", "use", "futur", "we", "will", "remov", "support", "camel", "case", "alias", "hyphen", "attribut", "exampl", "we", "current", "map", "strokewidth", "stroke", "width", "stroke", "width", "but", "thi", "now", "deprec", "behind", "warn", "when", "we", "remov", "support", "thi", "we", "remov", "some", "code", "path", "introduc", "thi", "commit", "purpos", "thi", "chang", "stop", "maintain", "separ", "svg", "properti", "config", "config", "still", "exist", "two", "purpos", "allow", "migrat", "path", "deprec", "camelcas", "version", "hyphen", "svg", "attribut", "track", "special", "namespac", "attribut", "they", "still", "requir", "whitelist", "howev", "it", "no", "longer", "blocker", "new", "non", "namespac", "svg", "attribut", "user", "n't", "have", "ask", "us", "add", "them", "whitelist", "fix", "1657", "review", "spicyj", "jimfb", "sebmarkbag"], "B_body": "DOM property equivalent of CSS filter\n", "B_clean_body": ["dom", "properti", "equival", "css", "filter"], "title_sim": [0.001204689227978449], "body_sim": [0.0342553994664696], "file_list_sim": 0.125, "overlap_files_len": 1, "code_sim": [0.19274412099245194, 0.0], "location_sim": [0.05664488017429194, 0.5416666666666666], "pattern": 0, "time": 16}, {"A_title": "autofocus should warn with autoFocus as alternate name", "A_clean_title": ["autofocu", "warn", "autofocu", "auto", "focu", "as", "altern", "name"], "B_title": "Add unknown property warning for use of `autofocus`", "B_clean_title": ["add", "unknown", "properti", "warn", "use", "autofocu"], "A_body": "#3248\n", "A_clean_body": ["3248"], "B_body": "Resolves #3248\n\nThis PR also:\n- Resurrects property warnings when `ReactDOMFeatureFlags.useCreateElement` is on\n- Adds property validity event to debug tool\n\nI wrote some tests for this work, but didn't notice any other `__DEV__` specific warnings being tested. I can include them with this PR if they're wanted.\n", "B_clean_body": ["resolv", "3248", "thi", "pr", "also", "resurrect", "properti", "warn", "when", "reactdomfeatureflag", "usecreateel", "react", "dom", "featur", "flag", "use", "creat", "element", "add", "properti", "valid", "event", "debug", "tool", "wrote", "some", "test", "thi", "work", "but", "did", "n't", "notic", "ani", "other", "dev", "specif", "warn", "be", "test", "includ", "them", "thi", "pr", "they", "'re", "want"], "title_sim": [0.22672418757609233], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.5798390367513696, 1.0], "location_sim": [0.49122807017543857, 1.0], "pattern": 1, "time": 124}, {"A_title": "Properly handle direct event dispatches", "A_clean_title": ["properli", "handl", "direct", "event", "dispatch"], "B_title": "Make Simulate.mouseEnter/Leave use direct dispatch", "B_clean_title": ["make", "simul", "mouseent", "leav", "mous", "enter", "use", "direct", "dispatch"], "A_body": "When registering events to `onMouseEnter` and `onMouseLeave` in a component, these events cannot be tested using the TestUtils. The methods `TestUtils.Simulate.mouseEnter` and `TestUtils.Simulate.mouseLeave` do exist, but the event is never actually dispatched, since `makeSimulator` function only calls `accumulateTwoPhaseDispatches`, which does not cover `mouseEnter` and `mouseLeave`.\n\nAdding a call to `accumulateDirectDispatches` takes care of this and the events are being dispatched normally.\n", "A_clean_body": ["when", "regist", "event", "onmouseent", "mous", "enter", "onmouseleav", "mous", "leav", "compon", "these", "event", "not", "test", "testutil", "test", "util", "method", "testutil", "simul", "mouseent", "test", "util", "mous", "enter", "testutil", "simul", "mouseleav", "test", "util", "mous", "leav", "exist", "but", "event", "never", "actual", "dispatch", "sinc", "makesimul", "make", "simul", "function", "onli", "call", "accumulatetwophasedispatch", "accumul", "two", "phase", "dispatch", "which", "not", "cover", "mouseent", "mous", "enter", "mouseleav", "mous", "leav", "ad", "call", "accumulatedirectdispatch", "accumul", "direct", "dispatch", "take", "care", "thi", "event", "are", "be", "dispatch", "normal"], "B_body": "Fixes #1297.\n\nonMouseEnter and onMouseLeave shouldn't _actually_ use direct dispatch, but doing so is more useful than doing nothing (and I don't think it precludes adding proper enter/leave dispatching later, either).\n\nTest Plan: grunt test\n", "B_clean_body": ["fix", "1297", "onmouseent", "mous", "enter", "onmouseleav", "mous", "leav", "n't", "actual", "use", "direct", "dispatch", "but", "do", "so", "more", "use", "than", "do", "noth", "n't", "think", "it", "preclud", "ad", "proper", "enter", "leav", "dispatch", "later", "either", "test", "plan", "grunt", "test"], "title_sim": [0.10476009845688355], "body_sim": [0.51644715999188], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.29779194877631915, 0.6547570154152949], "location_sim": [0.0, 0.0], "pattern": 0, "time": 104}, {"A_title": "fix onChange with placeholder on IE", "A_clean_title": ["fix", "onchang", "chang", "placehold", "ie"], "B_title": "opt out of input events for ie 10 and 11", "B_clean_title": ["opt", "out", "input", "event", "ie", "10", "11"], "A_body": "IE 10/11 will fire input event when input renders if input's placeholder contains Chinese words:\n\nplain: http://jsfiddle.net/yiminghe/fm3rckaz/2/\nreact: https://jsfiddle.net/yiminghe/69z2wepo/17145/\n\nand other situations: https://connect.microsoft.com/IE/feedback/details/885747/ie-11-fires-the-input-event-when-a-input-field-with-placeholder-is-focused\n", "A_clean_body": ["ie", "10", "11", "will", "fire", "input", "event", "when", "input", "render", "input", "'s", "placehold", "contain", "chines", "word", "plain", "http", "jsfiddl", "net", "yimingh", "fm3rckaz", "react", "http", "jsfiddl", "net", "yimingh", "69z2wepo", "17145", "other", "situat", "http", "11", "fire", "input", "event", "when", "input", "field", "placehold", "focus", "microsoft", "connect", "com", "ie", "feedback", "detail", "885747", "ie"], "B_body": "while supported, the \"input\" event is too noisy in IE. It Fires on\nplaceholder sets, and when an input is focused with a placeholder.\n\nThis is an potential alternative fix to #3826 \n\ncc @syranide\n\nfixes #3377 and fixes #3484\n", "B_clean_body": ["while", "support", "input", "event", "too", "noisi", "ie", "it", "fire", "placehold", "set", "when", "input", "focus", "placehold", "thi", "potenti", "altern", "fix", "3826", "cc", "syranid", "fix", "3377", "fix", "3484"], "title_sim": [0.05596606174208612], "body_sim": [0.6406634900829212], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.2460722538424382, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 114}, {"A_title": "Guard ensureScrollValueMonitoring against popup blockers overriding document.createEvent()", "A_clean_title": ["guard", "ensurescrollvaluemonitor", "ensur", "scroll", "valu", "monitor", "against", "popup", "blocker", "overrid", "document", "createev", "creat", "event"], "B_title": "fix for issue 6887", "B_clean_title": ["fix", "issu", "6887"], "A_body": "Fixes #6887\n\ncc @gaearon \n", "A_clean_body": ["fix", "6887", "cc", "gaearon"], "B_body": "_Before_ submitting a pull request, please make sure the following is done...\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests!\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes (`grunt test`).\n5. Make sure your code lints (`grunt lint`) - we've done our best to make sure these rules match our internal linting guidelines.\n6. If you haven't already, complete the [CLA](https://code.facebook.com/cla).\n", "B_clean_body": ["befor", "submit", "pull", "request", "pleas", "make", "sure", "follow", "done", "fork", "repo", "creat", "your", "branch", "master", "you", "'ve", "ad", "code", "that", "test", "add", "test", "you", "'ve", "chang", "api", "ap", "updat", "document", "ensur", "test", "suit", "pass", "grunt", "test", "make", "sure", "your", "code", "lint", "grunt", "lint", "we", "'ve", "done", "our", "best", "make", "sure", "these", "rule", "match", "our", "intern", "lint", "guidelin", "you", "have", "n't", "alreadi", "complet", "cla", "http", "facebook", "code", "com", "cla"], "title_sim": [0.0037511736608805634], "body_sim": [-0.00824395816132823], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.8482726788508173, 0.8482726788508173], "location_sim": [0.20430107526881722, 0.20430107526881722], "pattern": 1, "time": 96}, {"A_title": "Don't wrap text in <span> elements", "A_clean_title": ["n't", "wrap", "text", "span", "element"], "B_title": "Fix confusing whitespace nesting warning", "B_clean_title": ["fix", "confus", "whitespac", "nest", "warn"], "A_body": "Removes the `<span>` wrappers from text nodes, and handles cases where the browser may have split or merged adjacent text nodes.\n\nSorry if this is a totally insufficient way of going about this. It seems to work fine for my needs. If you can point me in a different direction I'm happy to keep working on it.\n", "A_clean_body": ["remov", "span", "wrapper", "text", "node", "handl", "case", "where", "browser", "may", "have", "split", "or", "merg", "adjac", "text", "node", "sorri", "thi", "total", "insuffici", "way", "go", "about", "thi", "it", "seem", "work", "fine", "my", "need", "you", "point", "me", "differ", "direct", "'m", "happi", "keep", "work", "it"], "B_body": "If any cases are missing please let me know https://github.com/facebook/react/issues/5071\n", "B_clean_body": ["ani", "case", "are", "miss", "pleas", "let", "me", "know", "http", "github", "com", "facebook", "react", "issu", "5071"], "title_sim": [-0.03591153860986645], "body_sim": [0.1695402438187156], "file_list_sim": 0.16666666666666666, "overlap_files_len": 2, "code_sim": [0.08652490525028704, 0.04877533119541424], "location_sim": [0.06589785831960461, 0.3225806451612903], "pattern": 0, "time": 82}, {"A_title": "Clearify callback text in the tutorial", "A_clean_title": ["clearifi", "callback", "text", "tutori"], "B_title": "[docs] Better clarification on passing callbacks to children", "B_clean_title": ["doc", "better", "clarif", "pass", "callback", "children"], "A_body": "Clarify callback text in the tutorial.  Supersedes https://github.com/facebook/react/pull/4642.\n", "A_clean_body": ["clarifi", "callback", "text", "tutori", "supersed", "http", "github", "com", "facebook", "react", "pull", "4642"], "B_body": "Improvement to #4642 since it's stale. \n", "B_clean_body": ["improv", "4642", "sinc", "it", "'s", "stale"], "title_sim": [0.41627526084687994], "body_sim": [-4.221541618451093e-05], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.8664270573670891, 0.8664270573670891], "location_sim": [0.6666666666666666, 0.6666666666666666], "pattern": 1, "time": 67}, {"A_title": "Fix tutorial code highlights", "A_clean_title": ["fix", "tutori", "code", "highlight"], "B_title": "Correct highlighted block", "B_clean_title": ["correct", "highlight", "block"], "A_body": "Lines got shift down due to changes made in [this commit](https://github.com/facebook/react/commit/c999785fa0721af549e3d00036714d27fff94158#diff-bec0158e5eafb7c12b1705b74dcaaffbR485).\n", "A_clean_body": ["line", "got", "shift", "down", "due", "chang", "made", "thi", "commit", "http", "github", "com", "facebook", "react", "commit", "c999785fa0721af549e3d00036714d27fff94158", "diff", "bec0158e5eafb7c12b1705b74dcaaffbr485", "bec0158e5eafb7c12b1705b74dcaaffb", "r485"], "B_body": "The top block stops one line too soon and the second block is one line too hight.\n", "B_clean_body": ["top", "block", "stop", "one", "line", "too", "soon", "second", "block", "one", "line", "too", "hight"], "title_sim": [-0.022566887254448706], "body_sim": [0.12332739613833878], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 1}, {"A_title": "Use '.firstElementChild' when looking for root element", "A_clean_title": ["use", "firstelementchild", "first", "element", "child", "when", "look", "root", "element"], "B_title": "Only reuse server-rendered React nodes if there are no unexpected siblings", "B_clean_title": ["onli", "reus", "server", "render", "react", "node", "there", "are", "no", "unexpect", "sibl"], "A_body": "when looking for a react root element the function would look at the 'container.firstChild' attribute, which is a convenience for childNodes[0]. this might be non-html nodes (#text for example), causing hierarchies containing spaces between the container and child (react root element) to fail locating the react root elem. modified to '.firstElementChild', which is a similar convenience for children[0]\n", "A_clean_body": ["when", "look", "react", "root", "element", "function", "would", "look", "at", "'contain", "firstchild", "first", "child", "attribut", "which", "conveni", "childnod", "child", "node", "thi", "might", "non", "html", "node", "text", "exampl", "caus", "hierarchi", "contain", "space", "between", "contain", "child", "react", "root", "element", "fail", "locat", "react", "root", "elem", "modifi", "firstelementchild", "first", "element", "child", "which", "similar", "conveni", "children"], "B_body": "PR for #996\n\nI choose to believe that users should be correcting their own \"mistakes\", rather than have React transparently fix and unknowingly introduce weird edge-cases and visual artifacts.\n\nQuite simply, this PR enforces that there are no other nodes except the node rendered by React inside the target, it obviously does not warn if there isn't a node rendered by React inside the target. It only performs this check in DEV.\n\nThere is another test in #1903 which complements this PR.\n", "B_clean_body": ["pr", "996", "choos", "believ", "that", "user", "correct", "their", "own", "mistak", "rather", "than", "have", "react", "transpar", "fix", "unknowingli", "introduc", "weird", "edg", "case", "visual", "artifact", "quit", "simpli", "thi", "pr", "enforc", "that", "there", "are", "no", "other", "node", "except", "node", "render", "by", "react", "insid", "target", "it", "obvious", "not", "warn", "there", "n't", "node", "render", "by", "react", "insid", "target", "it", "onli", "perform", "thi", "check", "dev", "there", "anoth", "test", "1903", "which", "complement", "thi", "pr"], "title_sim": [0.020085903514990552], "body_sim": [0.2813019045661553], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.20572656478816892, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 49}]