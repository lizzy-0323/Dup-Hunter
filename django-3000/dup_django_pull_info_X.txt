[{"A_title": "[WIP] Fixed #24554 -- Added preserve state option to mutate_state", "A_clean_title": ["wip", "fix", "24554", "ad", "preserv", "state", "option", "mutat", "state"], "B_title": "Speedup migration rendering", "B_clean_title": ["speedup", "migrat", "render"], "A_body": "In reference to https://code.djangoproject.com/ticket/24554\n\nLike I've mentioned in the ticket, I'm not convinced this is the best solution (or even safe) since state was intended to be immutable, but I am curious what you guys think. Additionally, it only solves half the problem for us since migration time is still lengthy. All expected test cases are passing locally with this change.\n", "A_clean_body": ["refer", "http", "djangoproject", "code", "com", "ticket", "24554", "like", "'ve", "mention", "ticket", "'m", "not", "convinc", "thi", "best", "solut", "or", "even", "safe", "sinc", "state", "wa", "intend", "immut", "but", "am", "curiou", "what", "you", "guy", "think", "addit", "it", "onli", "solv", "half", "problem", "us", "sinc", "migrat", "time", "still", "lengthi", "all", "expect", "test", "case", "are", "pass", "local", "thi", "chang"], "B_body": "https://code.djangoproject.com/ticket/24554\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "24554"], "title_sim": [-0.028791851510319214], "body_sim": [0.2738011667850086], "file_list_sim": 0.75, "overlap_files_len": 3, "code_sim": [0.48007835598233856, 0.5238345491023186], "location_sim": [0.8811881188118812, 1.0], "pattern": 1, "time": 42}, {"A_title": "Fixing ticket #21371", "A_clean_title": ["fix", "ticket", "21371"], "B_title": "Fixed #21371 - Added block.super to bodyclass blocks in relevant admin templates.", "B_clean_title": ["fix", "21371", "ad", "block", "super", "bodyclass", "block", "relev", "admin", "templat"], "A_body": "Added the test case for the ticket #21371 as well as updated the templates with the needed \"block.super\" .\nAll the these test cases are passing.\n\nJ\n", "A_clean_body": ["ad", "test", "case", "ticket", "21371", "as", "well", "as", "updat", "templat", "need", "block", "super", "all", "these", "test", "case", "are", "pass"], "B_body": "", "B_clean_body": [], "title_sim": [0.06286274819276189], "body_sim": [0.0], "file_list_sim": 0.6363636363636364, "overlap_files_len": 7, "code_sim": [0.5128711859043786, 1.0], "location_sim": [0.4803921568627451, 1.0], "pattern": 1, "time": 62}, {"A_title": "Fixed #24509 -- Added Expression support to SQLInsertCompiler", "A_clean_title": ["fix", "24509", "ad", "express", "support", "sqlinsertcompil", "sql", "insert", "compil"], "B_title": "Refs #19527 -- Allowed bulk_create() to set primary keys for PostgreSQL", "B_clean_title": ["ref", "19527", "allow", "bulk", "creat", "set", "primari", "key", "postgresql", "postgr", "sql"], "A_body": "This is an update/rebase/docs to: https://github.com/django/django/pull/5099\n", "A_clean_body": ["thi", "updat", "rebas", "doc", "http", "github", "com", "django", "django", "pull", "5099"], "B_body": "Postgres supports `RETURNING id` when doing a bulk create. With this,\nwe can set the primary keys on the newly saved objects from the keys\nthat the database supplied.\n\nAddresses #19527\n", "B_clean_body": ["postgr", "support", "return", "id", "when", "do", "bulk", "creat", "thi", "we", "set", "primari", "key", "newli", "save", "object", "key", "that", "databas", "suppli", "address", "19527"], "title_sim": [0.17820689265140954], "body_sim": [0.05743070307057107], "file_list_sim": 0.2631578947368421, "overlap_files_len": 5, "code_sim": [0.34362911841795535, 0.27466261395268365], "location_sim": [0.30173775671406006, 0.5805471124620061], "pattern": -1, "time": 31}, {"A_title": "Fixed #22510 -- Harden field removal to only None.", "A_clean_title": ["fix", "22510", "harden", "field", "remov", "onli", "none"], "B_title": "POC #22510 -- Reworked opting out from a base class form fields.", "B_clean_title": ["poc", "22510", "rework", "opt", "out", "base", "class", "form", "field"], "A_body": "Refs #8620.\n\nIf we allow any value to remove form fields then we get name clashes with method names, media classes etc. There was a backwards incompatibility introduced meaning ModelForm subclasses with declared fields called media or clean would lose those fields.\n\nField removal is now only permitted by using the sentinel value None. The docs have been slightly reworded to refer to removal of fields rather than shadowing.\n\nNotes for review:\n- There is an alternative approach which is to add a new feature `ignore_fields` or similar to remove fields.\n- Another alternative is to roll back the whole feature and document using `del` with `base_fields`. However as the only current documentation of `base_fields` says \"don't touch this\", I think this would be inadvisable. Personally, I also like the more declarative style.\n", "A_clean_body": ["ref", "8620", "we", "allow", "ani", "valu", "remov", "form", "field", "then", "we", "get", "name", "clash", "method", "name", "media", "class", "etc", "there", "wa", "backward", "incompat", "introduc", "mean", "modelform", "model", "form", "subclass", "declar", "field", "call", "media", "or", "clean", "would", "lose", "those", "field", "field", "remov", "now", "onli", "permit", "by", "sentinel", "valu", "none", "doc", "have", "been", "slightli", "reword", "refer", "remov", "field", "rather", "than", "shadow", "note", "review", "there", "altern", "approach", "which", "add", "new", "featur", "ignor", "field", "or", "similar", "remov", "field", "anoth", "altern", "roll", "back", "whole", "featur", "document", "del", "base", "field", "howev", "as", "onli", "current", "document", "base", "field", "say", "n't", "touch", "thi", "think", "thi", "would", "inadvis", "person", "also", "like", "more", "declar", "style"], "B_body": "**WIP, not ready for merge!**\n", "B_clean_body": ["**wip", "not", "readi", "merg"], "title_sim": [0.20731606394807578], "body_sim": [0.04564328086432158], "file_list_sim": 1.0, "overlap_files_len": 5, "code_sim": [0.5340959931853501, 0.5340959931853501], "location_sim": [0.918918918918919, 0.918918918918919], "pattern": 1, "time": 25}, {"A_title": "Fixes #16330 Dumpdata specify primary_keys --pks", "A_clean_title": ["fix", "16330", "dumpdata", "specifi", "primari", "key", "pk"], "B_title": "applying outdated patch files and wording change for help", "B_clean_title": ["appli", "outdat", "patch", "file", "word", "chang", "help"], "A_body": "https://code.djangoproject.com/ticket/16330\n", "A_clean_body": ["http", "djangoproject", "code", "com", "ticket", "16330"], "B_body": "https://code.djangoproject.com/ticket/16330#propertyform\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "16330", "propertyform"], "title_sim": [-0.02659670996022236], "body_sim": [1.0000000000000002], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.9082527719537257, 0.9490262048686523], "location_sim": [0.8324324324324325, 0.8850574712643678], "pattern": 1, "time": 168}, {"A_title": "Refs #24215 -- Prevented pending lookup pollution by abstract models.", "A_clean_title": ["ref", "24215", "prevent", "pend", "lookup", "pollut", "by", "abstract", "model"], "B_title": "Fixed #24215 -- Refactor of lazy model operations", "B_clean_title": ["fix", "24215", "refactor", "lazi", "model", "oper"], "A_body": "", "A_clean_body": [], "B_body": "See Trac ticket at https://code.djangoproject.com/ticket/24215.\n", "B_clean_body": ["see", "trac", "ticket", "at", "http", "djangoproject", "code", "com", "ticket", "24215"], "title_sim": [0.13372255176721842], "body_sim": [0.0], "file_list_sim": 0.42857142857142855, "overlap_files_len": 3, "code_sim": [0.6238646449942203, 0.7730139787186127], "location_sim": [0.27637130801687765, 0.42810457516339867], "pattern": 1, "time": 18}, {"A_title": "19015", "A_clean_title": ["19015"], "B_title": "Fix: slovenian l10n does not work with hidden field", "B_clean_title": ["fix", "slovenian", "l10n", "not", "work", "hidden", "field"], "A_body": "Automatically add ISO input formats to all localized input formats.\n", "A_clean_body": ["automat", "add", "iso", "input", "format", "all", "local", "input", "format"], "B_body": "Fix [#19015](https://code.djangoproject.com/ticket/19015#ticket) - Slovenian L10N - date field validation does not work for hidden fields\n", "B_clean_body": ["fix", "19015", "http", "djangoproject", "code", "com", "ticket", "19015", "ticket", "slovenian", "l10n", "date", "field", "valid", "not", "work", "hidden", "field"], "title_sim": [0.0], "body_sim": [0.1051962954270416], "file_list_sim": 0.029411764705882353, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.030162412993039442, 0.5909090909090909], "pattern": 1, "time": 19}, {"A_title": "Fixed #24351, #24346 -- Added app_label to the signature of allow_migrate.", "A_clean_title": ["fix", "24351", "24346", "ad", "app", "label", "signatur", "allow", "migrat"], "B_title": "24346: AuthRouter docs", "B_clean_title": ["24346", "authrout", "auth", "router", "doc"], "A_body": "", "A_clean_body": [], "B_body": "https://code.djangoproject.com/ticket/24346#ticket\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "24346", "ticket"], "title_sim": [-0.007596703058081283], "body_sim": [0.0], "file_list_sim": 0.038461538461538464, "overlap_files_len": 1, "code_sim": [0.10642273986641707, 0.22569365783321554], "location_sim": [0.0, 0.0], "pattern": 1, "time": 0}, {"A_title": "Fixed #25682 -- Corrected catching bare exceptions", "A_clean_title": ["fix", "25682", "correct", "catch", "bare", "except"], "B_title": "Make sure to never catch SystemExit.", "B_clean_title": ["make", "sure", "never", "catch", "systemexit", "system", "exit"], "A_body": "", "A_clean_body": [], "B_body": "If a `SystemExit` is raised one way or another, it should not be caught.\n\nIn some places, there are already some guards against catching `SystemExit`, but it's good to add some more.\n", "B_clean_body": ["systemexit", "system", "exit", "rais", "one", "way", "or", "anoth", "it", "not", "caught", "some", "place", "there", "are", "alreadi", "some", "guard", "against", "catch", "systemexit", "system", "exit", "but", "it", "'s", "good", "add", "some", "more"], "title_sim": [-0.07419349969495886], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 4, "code_sim": [0.9673616601430232, 1.0], "location_sim": [0.6542056074766355, 0.9090909090909091], "pattern": 0, "time": 10}, {"A_title": "Fixed #22557 -- ManifestStaticFilesStorage did not cleanup deleted files", "A_clean_title": ["fix", "22557", "manifeststaticfilesstorag", "manifest", "static", "file", "storag", "did", "not", "cleanup", "delet", "file"], "B_title": "Failing test and patch for #22557: staticfiles.json keeps deleted entries when collectstatic is run", "B_clean_title": ["fail", "test", "patch", "22557", "staticfil", "json", "keep", "delet", "entri", "when", "collectstat", "run"], "A_body": "When using ManifestStaticFilesStorage, deleted static files would be\ncorrectly cleaned up by \"collectstatic --clear\", but the manifest file\nwould still contain the stale entries.\n\nThanks to tedtieken for the report\n", "A_clean_body": ["when", "manifeststaticfilesstorag", "manifest", "static", "file", "storag", "delet", "static", "file", "would", "correctli", "clean", "up", "by", "collectstat", "clear", "but", "manifest", "file", "would", "still", "contain", "stale", "entri", "thank", "tedtieken", "report"], "B_body": "https://code.djangoproject.com/ticket/22557\n\nAll staticfiles and django tests pass with these changes.\n\nWould appreciate feedback.  I'm especially not sure if we should always zero the manifest on collectstatic, or if we should only zero the manifest when --clear is called.  \n\n```\n#current version\ndef on_collectstatic(self, command):\n    self.hashed_files = OrderedDict()\n```\n\nVs.\n\n```\n#reasonable alternate version\ndef on_collectstatic(self, command):\n    if command.clear:\n        self.hashed_files = OrderedDict()\n```\n\nI could go either way on the question.\n\nCopied from ticket:\nThere is some surprising behavior when the new HashedFilesMixin is used with the new ManifestFilesMixin.\nWhen you run manage.py collectstatic --clear:\n1) a copy of the old manifest.json is loaded from disk into memory at ManifestFilesMixin.hashed_files. This happens at the very beginning of collectstatic (when ManifestFilesMixin.**init** is called, which happens when the storage is initialized, which happens during Command.**init**) \n2) the old manifest.json is deleted (which would lead most people to believe the old manifest information is deleted as well)\n3) new files are added to the ManifestFilesMixin.hashed_files dict, and updated files get their records updated. But, this is building on top of the last version of manifest.json. Keys for deleted files are never removed and the deleted file mappings persist in the new manifest.json which gets written back to disk at the end of collectstatic's post_process phase.\n\n[Rest of ticket omitted]\n\nTo make testing cleaner, I broke post_process into two steps:  post_process and save_manifest.  Long term I think this is also a better API that will allow people to write cleaner sub-classes.  I found this bug writing sub-classes of ManifestFilesMixin and the code to save the manifest is pretty ugly with the current API of post_process doing both steps. \n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "22557", "all", "staticfil", "django", "test", "pass", "these", "chang", "would", "appreci", "feedback", "'m", "especi", "not", "sure", "we", "alway", "zero", "manifest", "collectstat", "or", "we", "onli", "zero", "manifest", "when", "clear", "call", "current", "version", "def", "collectstat", "self", "command", "self", "hash", "file", "ordereddict", "order", "dict", "vs", "reason", "altern", "version", "def", "collectstat", "self", "command", "command", "clear", "self", "hash", "file", "ordereddict", "order", "dict", "could", "go", "either", "way", "question", "copi", "ticket", "there", "some", "surpris", "behavior", "when", "new", "hashedfilesmixin", "hash", "file", "mixin", "use", "new", "manifestfilesmixin", "manifest", "file", "mixin", "when", "you", "run", "manag", "py", "collectstat", "clear", "copi", "old", "manifest", "json", "load", "disk", "into", "memori", "at", "manifestfilesmixin", "manifest", "file", "mixin", "hash", "file", "thi", "happen", "at", "veri", "begin", "collectstat", "when", "manifestfilesmixin", "manifest", "file", "mixin", "**init**", "call", "which", "happen", "when", "storag", "initi", "which", "happen", "dure", "command", "**init**", "old", "manifest", "json", "delet", "which", "would", "lead", "most", "peopl", "believ", "old", "manifest", "inform", "delet", "as", "well", "new", "file", "are", "ad", "manifestfilesmixin", "manifest", "file", "mixin", "hash", "file", "dict", "updat", "file", "get", "their", "record", "updat", "but", "thi", "build", "top", "last", "version", "manifest", "json", "key", "delet", "file", "are", "never", "remov", "delet", "file", "map", "persist", "new", "manifest", "json", "which", "get", "written", "back", "disk", "at", "end", "collectstat", "'s", "post", "process", "phase", "rest", "ticket", "omit", "make", "test", "cleaner", "broke", "post", "process", "into", "two", "step", "post", "process", "save", "manifest", "long", "term", "think", "thi", "also", "better", "api", "that", "will", "allow", "peopl", "write", "cleaner", "sub", "class", "found", "thi", "bug", "write", "sub", "class", "manifestfilesmixin", "manifest", "file", "mixin", "code", "save", "manifest", "pretti", "ugli", "current", "api", "post", "process", "do", "both", "step"], "title_sim": [0.2755050937484547], "body_sim": [0.7849927619401343], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.7054225673828269, 0.7198841641732576], "location_sim": [0.7983193277310925, 0.8636363636363636], "pattern": 1, "time": 13}, {"A_title": "Fixed #23812 - Replaced every range and xrange with django.utils.six.moves.range", "A_clean_title": ["fix", "23812", "replac", "everi", "rang", "xrang", "django", "util", "six", "move", "rang"], "B_title": "Use xrange iterator to generate characters for get_random_bytes", "B_clean_title": ["use", "xrang", "iter", "gener", "charact", "get", "random", "byte"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [-0.04454500485023296], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 1}, {"A_title": "Fix proxy instance equality", "A_clean_title": ["fix", "proxi", "instanc", "equal"], "B_title": "Made Model.__eq__ consider proxy models equivalent", "B_clean_title": ["made", "model", "eq", "consid", "proxi", "model", "equival"], "A_body": "This is a WIP patch for [#14492](https://code.djangoproject.com/ticket/14492).\n\nIt makes proxy instances equatable with model instances and other proxy instances.\n", "A_clean_body": ["thi", "wip", "patch", "14492", "http", "djangoproject", "code", "com", "ticket", "14492", "it", "make", "proxi", "instanc", "equat", "model", "instanc", "other", "proxi", "instanc"], "B_body": "This pull request fixes tickets #11892, #16458, #14492 and #20777.\n", "B_clean_body": ["thi", "pull", "request", "fix", "ticket", "11892", "16458", "14492", "20777"], "title_sim": [0.5395796625054297], "body_sim": [0.08695506373784148], "file_list_sim": 0.16666666666666666, "overlap_files_len": 2, "code_sim": [0.2380493821253049, 0.34346187925759125], "location_sim": [0.35655737704918034, 0.8613861386138614], "pattern": 1, "time": 1}, {"A_title": "Refs #25520 -- Tests for IntegrityErrors deleting M2M to proxy models", "A_clean_title": ["ref", "25520", "test", "integrityerror", "integr", "error", "delet", "m2m", "proxi", "model"], "B_title": "Fixed #18012 -- Propagated reverse foreign keys from proxy models to their concrete class.", "B_clean_title": ["fix", "18012", "propag", "revers", "foreign", "key", "proxi", "model", "their", "concret", "class"], "A_body": "Add unit tests that demonstrate the error condition where deleting a\nproxy-based object fails if that object has reverse M2M relationships\nto a proxy ancestor, using a database that enforces foreign key\nintegrity constraints (e.g. PostgreSQL, not SQLite)\n\nThe root cause is Django does not find/include reverse M2M relationships\nto proxy models when collecting objects for deletion via\n`get_deleted_objects` etc, these relationships are only included if they\ntarget concrete parent models.\n\nIn the new tests:\n- two of the four tests pass, because the M2M relationship targets a\n  concrete model\n- the other two tests fail with integrity errors, because the M2M rel\n  targets a proxy model.\n", "A_clean_body": ["add", "unit", "test", "that", "demonstr", "error", "condit", "where", "delet", "proxi", "base", "object", "fail", "that", "object", "ha", "revers", "m2m", "relationship", "proxi", "ancestor", "databas", "that", "enforc", "foreign", "key", "integr", "constraint", "postgresql", "postgr", "sql", "not", "sqlite", "sq", "lite", "root", "caus", "django", "not", "find", "includ", "revers", "m2m", "relationship", "proxi", "model", "when", "collect", "object", "delet", "via", "get", "delet", "object", "etc", "these", "relationship", "are", "onli", "includ", "they", "target", "concret", "parent", "model", "new", "test", "two", "four", "test", "pass", "becaus", "m2m", "relationship", "target", "concret", "model", "other", "two", "test", "fail", "integr", "error", "becaus", "m2m", "rel", "target", "proxi", "model"], "B_body": "", "B_clean_body": [], "title_sim": [0.43106908986922177], "body_sim": [0.0], "file_list_sim": 0.26666666666666666, "overlap_files_len": 4, "code_sim": [0.21247752722516727, 0.04896418334816131], "location_sim": [0.033268101761252444, 0.09289617486338798], "pattern": -1, "time": 5}, {"A_title": "Add back verbose_name[_plural] for contrib.auth.models.User", "A_clean_title": ["add", "back", "verbos", "name", "plural", "contrib", "auth", "model", "user"], "B_title": "Fixed #19945 -- Fixed default User model Meta inheritance.", "B_clean_title": ["fix", "19945", "fix", "default", "user", "model", "meta", "inherit"], "A_body": "I also translated to Hebrew.\n\nIt was lost with the changes to User in Django 1.5. Surely it was accidental.\n", "A_clean_body": ["also", "translat", "hebrew", "it", "wa", "lost", "chang", "user", "django", "sure", "it", "wa", "accident"], "B_body": "Updated default User model Meta class to extend AbstractUser Meta\nwhere translated verbose_name and verbose_name_plural are\ndefined.\n", "B_clean_body": ["updat", "default", "user", "model", "meta", "class", "extend", "abstractus", "abstract", "user", "meta", "where", "translat", "verbos", "name", "verbos", "name", "plural", "are", "defin"], "title_sim": [0.16811824546576623], "body_sim": [0.23845697357692022], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.5841237603818237, 0.0], "location_sim": [0.07692307692307693, 1.0], "pattern": -1, "time": 1}, {"A_title": "Improved patch for #23", "A_clean_title": ["improv", "patch", "23"], "B_title": "Add support for validation warnings.", "B_clean_title": ["add", "support", "valid", "warn"], "A_body": "", "A_clean_body": [], "B_body": "Got the code in trac ticket #23 working, moved doctests into a TestCase\n", "B_clean_body": ["got", "code", "trac", "ticket", "23", "work", "move", "doctest", "into", "testcas", "test", "case"], "title_sim": [0.00245068836453966], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 128}, {"A_title": "[WIP] Close #28126. Add Gist index", "A_clean_title": ["wip", "close", "28126", "add", "gist", "index"], "B_title": "Fixed #28126 -- Added GiST Index to contrib.postgres.", "B_clean_title": ["fix", "28126", "ad", "gist", "gi", "st", "index", "contrib", "postgr"], "A_body": "This PR adds the GIST index for PostGIS\r\n\r\nref: https://code.djangoproject.com/ticket/28126#ticket", "A_clean_body": ["thi", "pr", "add", "gist", "index", "postgi", "post", "gi", "ref", "http", "djangoproject", "code", "com", "ticket", "28126", "ticket"], "B_body": "We can already create them on spatial fields, but they are generally useful for other fields such as hstore.\r\n\r\nhttps://www.postgresql.org/docs/9.5/static/gist-examples.html\r\nhttps://code.djangoproject.com/ticket/28126", "B_clean_body": ["we", "alreadi", "creat", "them", "spatial", "field", "but", "they", "are", "gener", "use", "other", "field", "such", "as", "hstore", "http", "postgresql", "exampl", "html", "www", "org", "doc", "static", "gist", "http", "djangoproject", "code", "com", "ticket", "28126"], "title_sim": [0.29103859602540216], "body_sim": [0.20588867346630474], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.8247968352480635, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 19}, {"A_title": "Fix MONTH_DAY_FORMAT for Korean(ko) language", "A_clean_title": ["fix", "month", "day", "format", "korean", "ko", "languag"], "B_title": "Fixed #25194 -- Fixed Korean date formatting", "B_clean_title": ["fix", "25194", "fix", "korean", "date", "format"], "A_body": "Fix for ticket 25194\n\nhttps://code.djangoproject.com/ticket/25194\n", "A_clean_body": ["fix", "ticket", "25194", "http", "djangoproject", "code", "com", "ticket", "25194"], "B_body": "'F' translates a month to Korean name with a month number, so 'F \uc6d4' becomes '10 \uc6d4\uc6d4', for example, for October.\n'F \uc6d4' should be fixed to either 'F' or 'n\uc6d4', and I followed conventions in other languages like Japanese and Chinese.\n", "B_clean_body": ["translat", "month", "korean", "name", "month", "number", "so", "becom", "'10", "exampl", "octob", "fix", "either", "or", "'n\uc6d4", "follow", "convent", "other", "languag", "like", "japanes", "chines"], "title_sim": [0.3634177934850081], "body_sim": [0.011364883792383512], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [1.0, 1.0], "pattern": 1, "time": 0}, {"A_title": "Fixed #22223 -- Prevented over-escaping URLs in reverse()", "A_clean_title": ["fix", "22223", "prevent", "over", "escap", "url", "ur", "ls", "revers"], "B_title": "Fix unnecessary escaping of path chars in reverse() (#22223)", "B_clean_title": ["fix", "unnecessari", "escap", "path", "char", "revers", "22223"], "A_body": "And follow more closely the class of characters defined in the\nRFC 3986.\nThanks Erik van Zijst for the report and the initial patch.\n", "A_clean_body": ["follow", "more", "close", "class", "charact", "defin", "rfc", "3986", "thank", "erik", "van", "zijst", "report", "initi", "patch"], "B_body": "The path segments concatenated by reverse() only need to get characters\nquoted that are reserved as per section 3.3 of RFC-3986.\n\nUnreserved characters that Django currently quotes as part of the work done\non #13260 are: \":@&=+$,\"\n\nQuoting unreserved characters leads to issues in situations where client and\nserver require unambigious URL representation, like creating a signature base\nstring in OAuth 1. Here the client produces a digest of a URL with quoted\nchars, while the server ends up with a digest of the unquoted chars, leading\nto different signatures (see\nhttps://groups.google.com/forum/#!msg/django-developers/ZLGk7T4mJuw/4RqfgbZ-jOQJ).\n\nTo address this change still applies urlquote, but excludes the unreserved\npath characters.\n", "B_clean_body": ["path", "segment", "concaten", "by", "revers", "onli", "need", "get", "charact", "quot", "that", "are", "reserv", "as", "per", "section", "rfc", "3986", "unreserv", "charact", "that", "django", "current", "quot", "as", "part", "work", "done", "13260", "are", "quot", "unreserv", "charact", "lead", "issu", "situat", "where", "client", "server", "requir", "unambigi", "url", "represent", "like", "creat", "signatur", "base", "string", "oauth", "auth", "here", "client", "produc", "digest", "url", "quot", "char", "while", "server", "end", "up", "digest", "unquot", "char", "lead", "differ", "signatur", "see", "http", "googl", "group", "com", "forum", "joqj", "msg", "django", "develop", "zlgk7t4mjuw", "4rqfgbz", "oqj", "zl", "gk7t4m", "juw", "4rqfgb", "address", "thi", "chang", "still", "appli", "urlquot", "but", "exclud", "unreserv", "path", "charact"], "title_sim": [0.252374112714043], "body_sim": [0.1521475097319758], "file_list_sim": 0.25, "overlap_files_len": 2, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 111}, {"A_title": "Fixed #16727 -- contenttypes shortcut view error", "A_clean_title": ["fix", "16727", "contenttyp", "shortcut", "view", "error"], "B_title": "Support for network-path references in contenttypes.views.shortcut.", "B_clean_title": ["support", "network", "path", "refer", "contenttyp", "view", "shortcut"], "A_body": "Including shortcut fix and corresponding tests\n", "A_clean_body": ["includ", "shortcut", "fix", "correspond", "test"], "B_body": "Referencing ticket: https://code.djangoproject.com/ticket/16727\n", "B_clean_body": ["referenc", "ticket", "http", "djangoproject", "code", "com", "ticket", "16727"], "title_sim": [0.5588965113904465], "body_sim": [-0.021645303015823063], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.02478141324465743, 0.0], "location_sim": [0.14893617021276595, 0.7777777777777778], "pattern": 1, "time": 13}, {"A_title": "Fixed #21132 -- Removed the useless app_name argument to AdminSite.", "A_clean_title": ["fix", "21132", "remov", "useless", "app", "name", "argument", "adminsit", "admin", "site"], "B_title": "Ref #21132 -- Added admin app_name support for admin widgets.", "B_clean_title": ["ref", "21132", "ad", "admin", "app", "name", "support", "admin", "widget"], "A_body": "Thanks MarkusH for the report.\n", "A_clean_body": ["thank", "markush", "marku", "report"], "B_body": "", "B_clean_body": [], "title_sim": [0.4717380751428614], "body_sim": [0.0], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.4106242368543576, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 284}, {"A_title": "Fixed #26286 -- Prevented content type managers from sharing their cache.", "A_clean_title": ["fix", "26286", "prevent", "content", "type", "manag", "share", "their", "cach"], "B_title": "Don't cache non-ContentTypes in the ContentTypeManager cache", "B_clean_title": ["n't", "cach", "non", "contenttyp", "content", "type", "contenttypemanag", "content", "type", "manag", "cach"], "A_body": "This should prevent managers methods from returning content type instances\nregistered to foreign apps now that these managers are also attached to models\ncreated during migration phases.\n\nRefs #23822.\n", "A_clean_body": ["thi", "prevent", "manag", "method", "return", "content", "type", "instanc", "regist", "foreign", "app", "now", "that", "these", "manag", "are", "also", "attach", "model", "creat", "dure", "migrat", "phase", "ref", "23822"], "B_body": "Migration-time virtual models were being cached, which wreaks havoc with post-migration ORM queries that expect actual \"live\" ContentTypes to be passed in.\n\nIn case someone stumbles across the same problem:\n\n`ValueError: Cannot assign \"<ContentType: something>\": \"Something.content_type\" must be a \"ContentType\" instance.` can be worked around by calling `ContentType.objects._cache.clear()` at the end of migration steps that call any of the caching ContentType manager methods.\n", "B_clean_body": ["migrat", "time", "virtual", "model", "were", "be", "cach", "which", "wreak", "havoc", "post", "migrat", "orm", "queri", "that", "expect", "actual", "live", "contenttyp", "content", "type", "pass", "case", "someon", "stumbl", "across", "same", "problem", "valueerror", "valu", "error", "not", "assign", "contenttyp", "content", "type", "someth", "someth", "content", "type", "must", "contenttyp", "content", "type", "instanc", "work", "around", "by", "call", "contenttyp", "object", "clear", "content", "type", "cach", "at", "end", "migrat", "step", "that", "call", "ani", "cach", "contenttyp", "content", "type", "manag", "method"], "title_sim": [0.8715265495961337], "body_sim": [0.5651741703386944], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.37952114178076657, 0.08248927320970093], "location_sim": [0.3157894736842105, 0.5084745762711864], "pattern": 0, "time": 21}, {"A_title": "Fixed #23617 -- Added get_pk_value_on_save()", "A_clean_title": ["fix", "23617", "ad", "get", "pk", "valu", "save"], "B_title": "Fixed #23617 -- Documented caveats with pk=UUIDField.", "B_clean_title": ["fix", "23617", "document", "caveat", "pk=uuidfield", "pk=uuid", "field"], "A_body": "The method is mainly intended for use with UUIDField. For UUIDField we\nwant to call the field's default even when primary key value is\nexplicitly set to None to match the behaviour of AutoField.\n", "A_clean_body": ["method", "mainli", "intend", "use", "uuidfield", "uuid", "field", "uuidfield", "uuid", "field", "we", "want", "call", "field", "'s", "default", "even", "when", "primari", "key", "valu", "explicitli", "set", "none", "match", "behaviour", "autofield", "auto", "field"], "B_body": "Setting another field type than AutoField as the primary key does not necessarily guarantee AutoField like behaviour.\n", "B_clean_body": ["set", "anoth", "field", "type", "than", "autofield", "auto", "field", "as", "primari", "key", "not", "necessarili", "guarante", "autofield", "auto", "field", "like", "behaviour"], "title_sim": [0.056344693563864116], "body_sim": [0.5091680890119019], "file_list_sim": 0.16666666666666666, "overlap_files_len": 1, "code_sim": [0.3388539987751937, 0.11787612485093024], "location_sim": [0.0, 0.0], "pattern": 1, "time": 8}, {"A_title": "Fixed #22920 -- Avoid masking some exceptions.", "A_clean_title": ["fix", "22920", "avoid", "mask", "some", "except"], "B_title": "Fixed #22920 - AppConfig.create swallows informative exceptions during import time", "B_clean_title": ["fix", "22920", "appconfig", "creat", "app", "config", "swallow", "inform", "except", "dure", "import", "time"], "A_body": "If loading an application trigger an ImportError, the details of that\nerror were lost in some cases. Thanks Ben Davis for the report.\n", "A_clean_body": ["load", "applic", "trigger", "importerror", "import", "error", "detail", "that", "error", "were", "lost", "some", "case", "thank", "ben", "davi", "report"], "B_body": "See https://code.djangoproject.com/ticket/22920#ticket\n", "B_clean_body": ["see", "http", "djangoproject", "code", "com", "ticket", "22920", "ticket"], "title_sim": [0.28999109808975204], "body_sim": [0.028462596446725014], "file_list_sim": 0.2857142857142857, "overlap_files_len": 2, "code_sim": [0.28297144212190783, 0.31186700571224946], "location_sim": [0.5413533834586466, 0.6050420168067226], "pattern": 1, "time": 64}, {"A_title": "Fixed #25592 -- Fixed misnamed strictly_above PostGIS lookup", "A_clean_title": ["fix", "25592", "fix", "misnam", "strictli", "abov", "postgi", "post", "gi", "lookup"], "B_title": "Fixed #25592 -- Typo in PostGISOperators", "B_clean_title": ["fix", "25592", "typo", "postgisoper", "post", "gi", "oper"], "A_body": "Fixes a regression from 2bd1bbc42. Thanks Daniel Wiesmann for the report.\n", "A_clean_body": ["fix", "regress", "2bd1bbc42", "thank", "daniel", "wiesmann", "report"], "B_body": "Fixes `'strictly_above'` dictionary key typo in `PostGISOperators`.\n\nhttps://code.djangoproject.com/ticket/25592\n", "B_clean_body": ["fix", "'strictli", "abov", "dictionari", "key", "typo", "postgisoper", "post", "gi", "oper", "http", "djangoproject", "code", "com", "ticket", "25592"], "title_sim": [0.5769075590375542], "body_sim": [0.06836052870017788], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.18181818181818182, 1.0], "pattern": 1, "time": 0}, {"A_title": "Fixes #23799 squashmigrations optimize conditionally", "A_clean_title": ["fix", "23799", "squashmigr", "optim", "condit"], "B_title": "Fixed #23799 -- squashmigrations --no-optimize still optimizes", "B_clean_title": ["fix", "23799", "squashmigr", "no", "optim", "still", "optim"], "A_body": "This commit fixes this issue\nhttps://code.djangoproject.com/ticket/23799\n\nIt has tests and implementation\n", "A_clean_body": ["thi", "commit", "fix", "thi", "issu", "http", "djangoproject", "code", "com", "ticket", "23799", "it", "ha", "test", "implement"], "B_body": "I opted to not remove it because it might become useful when the migration optimizer breaks for some reason.\n", "B_clean_body": ["opt", "not", "remov", "it", "becaus", "it", "might", "becom", "use", "when", "migrat", "optim", "break", "some", "reason"], "title_sim": [0.9115343571605491], "body_sim": [0.1705607569495916], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.7627214147690754, 0.9566977230482183], "location_sim": [0.375, 1.0], "pattern": 1, "time": 3}, {"A_title": "Fixed #20625 -- Chainable Manager/QuerySet methods.", "A_clean_title": ["fix", "20625", "chainabl", "manag", "queryset", "queri", "set", "method"], "B_title": "For ticket #20625 to allow defining chainable QuerySet on custom model managers.", "B_clean_title": ["ticket", "20625", "allow", "defin", "chainabl", "queryset", "queri", "set", "custom", "model", "manag"], "A_body": "", "A_clean_body": [], "B_body": "Ticket #20625 - https://code.djangoproject.com/ticket/20625 allows for new functionality as follows: \n\n```\nclass OfferManager(models.Manager):\n    \"\"\" Example of a chainable custom query set \"\"\"\n\n    ...\n\n    QUERYSET_PUBLIC_KWARGS = {'status__gte': STATUS_ENABLED}\n    QUERYSET_ACTIVE_KWARGS = {'status': STATUS_ENABLED}\n\n    ...\n\n    def public(self):\n        \"\"\" Returns all entries accessible through front end site\"\"\"\n        return self.all().filter(...)\n    public.chainable = True     # instructs to dynamically tranplat this method onto\n                                # returned QuerySet as <queryset>.public(...) \n                                # effectively providing chainable custom QuerySets\n\n    def active(self):\n        \"\"\" Returns offers that are open to negotiation \"\"\"\n        return self.public().filter(**OfferManager.QUERYSET_ACTIVE_KWARGS)\n                                    # an example of how to reffer to OfferManager\n                                    # constants as 'self' context changes\n    active.chainable = True\n    ...\n```\n", "B_clean_body": ["ticket", "20625", "http", "djangoproject", "code", "com", "ticket", "20625", "allow", "new", "function", "as", "follow", "class", "offermanag", "offer", "manag", "model", "manag", "exampl", "chainabl", "custom", "queri", "set", "queryset", "public", "kwarg", "'statu", "gte", "statu", "enabl", "queryset", "activ", "kwarg", "'statu", "statu", "enabl", "def", "public", "self", "return", "all", "entri", "access", "through", "front", "end", "site", "return", "self", "all", "filter", "public", "chainabl", "true", "instruct", "dynam", "tranplat", "thi", "method", "onto", "return", "queryset", "queri", "set", "as", "queryset", "public", "effect", "provid", "chainabl", "custom", "queryset", "queri", "set", "def", "activ", "self", "return", "offer", "that", "are", "open", "negoti", "return", "self", "public", "filter", "**offermanag", "**offer", "manag", "queryset", "activ", "kwarg", "exampl", "how", "reffer", "offermanag", "offer", "manag", "constant", "as", "'self", "context", "chang", "activ", "chainabl", "true"], "title_sim": [0.7572453158948595], "body_sim": [0.0], "file_list_sim": 0.1, "overlap_files_len": 1, "code_sim": [0.42145713147492486, 0.23644397194477648], "location_sim": [0.059130434782608696, 0.2809917355371901], "pattern": 1, "time": 14}, {"A_title": "Fixed #19299 -- Removed Nullification of Foreign Keys To CharFields", "A_clean_title": ["fix", "19299", "remov", "nullif", "foreign", "key", "charfield", "char", "field"], "B_title": "Don't automatically collapse `''` and `None` for keys.", "B_clean_title": ["n't", "automat", "collaps", "none", "key"], "A_body": "This pull request fixes https://code.djangoproject.com/ticket/19299 (and https://code.djangoproject.com/ticket/21194)\n", "A_clean_body": ["thi", "pull", "request", "fix", "http", "djangoproject", "code", "com", "ticket", "19299", "http", "djangoproject", "code", "com", "ticket", "21194"], "B_body": "Ticket #19299 which I forgot to send this for.\n\nMany databases treat these differently, including MySQL, and there are\nlegitimate cases where `''` is a valid value in key fields. This change\nupdates both the ForeignKey class and the row cache to check the\nconnection feature `interprets_empty_strings_as_nulls` and will collapse\nthese two values if that's `True`, otherwise it will treat them\ndifferently.\n", "B_clean_body": ["ticket", "19299", "which", "forgot", "send", "thi", "mani", "databas", "treat", "these", "differ", "includ", "mysql", "my", "sql", "there", "are", "legitim", "case", "where", "valid", "valu", "key", "field", "thi", "chang", "updat", "both", "foreignkey", "foreign", "key", "class", "row", "cach", "check", "connect", "featur", "interpret", "empti", "string", "as", "null", "will", "collaps", "these", "two", "valu", "that", "'s", "true", "otherwis", "it", "will", "treat", "them", "differ"], "title_sim": [0.32940673073761345], "body_sim": [0.08549494841520763], "file_list_sim": 0.2857142857142857, "overlap_files_len": 2, "code_sim": [0.4560166782182717, 0.9795343636927584], "location_sim": [0.0, 0.0], "pattern": 1, "time": 130}, {"A_title": "Make Field.db_parameters() use db_type()", "A_clean_title": ["make", "field", "db", "paramet", "use", "db", "type"], "B_title": "Fixed #22001: GeoDjango (contrib.gis) does not create geometry columns in 1.7a2", "B_clean_title": ["fix", "22001", "geodjango", "geo", "django", "contrib", "gi", "not", "creat", "geometri", "column", "7a2"], "A_body": "This reverts parts of ca9c3cd, which appear to have been made unintentionally.\n\nIt removes support for `db_type` to return the \"CHECK (%s)\" constraint suffix.\nInternal code appears to use `db_parameters` for this.\n\nFixes https://code.djangoproject.com/ticket/22260.\n\nThis needs tests. Please point me at where to put them, and how to test this best.\n", "A_clean_body": ["thi", "revert", "part", "ca9c3cd", "which", "appear", "have", "been", "made", "unintent", "it", "remov", "support", "db", "type", "return", "check", "constraint", "suffix", "intern", "code", "appear", "use", "db", "paramet", "thi", "fix", "http", "djangoproject", "code", "com", "ticket", "22260", "thi", "need", "test", "pleas", "point", "me", "at", "where", "put", "them", "how", "test", "thi", "best"], "B_body": "https://code.djangoproject.com/ticket/22001\n\nFixed #22001: Added new method `get_column_type` to `BaseDatabaseCreation`, allowing child classes to have more logic then just string formatting a value in the `data_types` dict. This was nessecary for postgis creation where the name of the column type would change from `geometry(POINT, 4326)` to `geography(POINT, 4326)` given the `geography` flag on `GeometryField` (e.g. `PointField(srid=4326, geography=True)`).\n\nUpdated the `data_types` field in each `Creation` class under contrib/gis/db/backends to include all the Geodjango fields.\n\nAdded a test and supporting classes in the contrib.gis module.  This code follows the way tests are setup in the test folder under django/tests/migrations.\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "22001", "fix", "22001", "ad", "new", "method", "get", "column", "type", "basedatabasecr", "base", "databas", "creation", "allow", "child", "class", "have", "more", "logic", "then", "just", "string", "format", "valu", "data", "type", "dict", "thi", "wa", "nessecari", "postgi", "creation", "where", "name", "column", "type", "would", "chang", "geometri", "point", "4326", "geographi", "point", "4326", "given", "geographi", "flag", "geometryfield", "geometri", "field", "pointfield", "point", "field", "srid=4326", "geography=tru", "updat", "data", "type", "field", "each", "creation", "class", "under", "contrib", "gi", "db", "backend", "includ", "all", "geodjango", "field", "ad", "test", "support", "class", "contrib", "gi", "modul", "thi", "code", "follow", "way", "test", "are", "setup", "test", "folder", "under", "django", "test", "migrat"], "title_sim": [0.08181639327130034], "body_sim": [0.4512796287606391], "file_list_sim": 0.16666666666666666, "overlap_files_len": 1, "code_sim": [0.09777354519007384, 0.5802252505551315], "location_sim": [0.25, 1.0], "pattern": 0, "time": 15}, {"A_title": "Fixed #22232 -- Raised custom exception for recursive template extends", "A_clean_title": ["fix", "22232", "rais", "custom", "except", "recurs", "templat", "extend"], "B_title": "Fixed #15053 -- Improved template extending algorithm.", "B_clean_title": ["fix", "15053", "improv", "templat", "extend", "algorithm"], "A_body": "Fixed the RuntimeError Recursion Depth Exceeded caused in the case of templates being loaded cyclicly.\nAdded tests for template extension using variable names as well as constant file names.\n", "A_clean_body": ["fix", "runtimeerror", "runtim", "error", "recurs", "depth", "exceed", "caus", "case", "templat", "be", "load", "cyclicli", "ad", "test", "templat", "extens", "variabl", "name", "as", "well", "as", "constant", "file", "name"], "B_body": "", "B_clean_body": [], "title_sim": [0.515185430656515], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 72}, {"A_title": "#21271 Django's usage of smtplib.SMTP should have a timeout", "A_clean_title": ["21271", "django", "'s", "usag", "smtplib", "smtp", "have", "timeout"], "B_title": "Add configurable SMTP timeout.", "B_clean_title": ["add", "configur", "smtp", "timeout"], "A_body": "https://code.djangoproject.com/ticket/21271 \n\nTests pass. I added a short doc to 1.7 release notes and to https://docs.djangoproject.com/en/dev/topics/email/#smtp-backend. Do feel free to review. \n", "A_clean_body": ["http", "djangoproject", "code", "com", "ticket", "21271", "test", "pass", "ad", "short", "doc", "releas", "note", "http", "djangoproject", "doc", "com", "en", "dev", "topic", "email", "smtp", "backend", "feel", "free", "review"], "B_body": "This is related to https://code.djangoproject.com/ticket/21271\n\n\"When EmailBackend initializes SMTP objects it does not provide a timeout, and the default timeout is object() (no timeout). It would be sensible to provide some configurable timeout.\nI've got bitten by this when using the AdminEmailHandler. My database went down, a lot of exceptions were generated and Django was trying to send emails. The SMTP server started not responding and the requests started blocking, until all my workers were used up. By then Django stopped serving requests. Basically, I was DoSed by my own SMTP server.\"\n", "B_clean_body": ["thi", "relat", "http", "djangoproject", "code", "com", "ticket", "21271", "when", "emailbackend", "email", "backend", "initi", "smtp", "object", "it", "not", "provid", "timeout", "default", "timeout", "object", "no", "timeout", "it", "would", "sensibl", "provid", "some", "configur", "timeout", "'ve", "got", "bitten", "by", "thi", "when", "adminemailhandl", "admin", "email", "handler", "my", "databas", "went", "down", "lot", "except", "were", "gener", "django", "wa", "tri", "send", "email", "smtp", "server", "start", "not", "respond", "request", "start", "block", "until", "all", "my", "worker", "were", "use", "up", "by", "then", "django", "stop", "serv", "request", "basic", "wa", "dose", "sed", "by", "my", "own", "smtp", "server"], "title_sim": [0.6726013879598438], "body_sim": [0.3873663590699518], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.7048150464197213, 0.8071118912529632], "location_sim": [0.5546218487394958, 1.0], "pattern": 1, "time": 0}, {"A_title": "Fixed #23795 -- Fixed a regression in custom form fields", "A_clean_title": ["fix", "23795", "fix", "regress", "custom", "form", "field"], "B_title": "Fix FormFields w/ queryset but no limit_choices_to", "B_clean_title": ["fix", "formfield", "form", "field", "queryset", "but", "no", "limit", "choic"], "A_body": "Custom form fields having a `queryset` attribute but no\n`limit_choices_to` could no longer be used in ModelForms.\n\nRefs #2445.\n\nThanks to @artscoop for the report.\n", "A_clean_body": ["custom", "form", "field", "have", "queryset", "attribut", "but", "no", "limit", "choic", "could", "no", "longer", "use", "modelform", "model", "form", "ref", "2445", "thank", "artscoop", "report"], "B_body": "Django assumes a form field with a `queryset` attribute always has a `limit_choices_to` attribute.\nFor example, a field programmatically altered to have a `queryset` attribute (which works fine), may not be altered to also have a `limit_choices_to` attribute. So the assumption and code are wrong.\nFix proposed for master, affects 1.7 and above.\n", "B_clean_body": ["django", "assum", "form", "field", "queryset", "attribut", "alway", "ha", "limit", "choic", "attribut", "exampl", "field", "programmat", "alter", "have", "queryset", "attribut", "which", "work", "fine", "may", "not", "alter", "also", "have", "limit", "choic", "attribut", "so", "assumpt", "code", "are", "wrong", "fix", "propos", "master", "affect", "abov"], "title_sim": [0.40203162217165], "body_sim": [0.582910220005243], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.2077922077922078, 0.48484848484848486], "pattern": -1, "time": 1}, {"A_title": "Fixed #25840 -- Added a 'default' argument to self.get signature on BaseCache.get_or_set()", "A_clean_title": ["fix", "25840", "ad", "'default", "argument", "self", "get", "signatur", "basecach", "base", "cach", "get", "or", "set"], "B_title": "Fixed #25840 -- Added get_or_set method to dummy cache backend", "B_clean_title": ["fix", "25840", "ad", "get", "or", "set", "method", "dummi", "cach", "backend"], "A_body": "Refactored Django's built-in BaseCache.get_or_set() to\nwork well with DummyCache.\n\nget_or_set implementation tries to fetch the key first.\nIf it doesn't exists, it adds the default value\n(passed as 'default' parameter) to the cache and gets it.\n\nSince DummyCache backend doesn't actually add something\nbut returns True on add operation, get_or_cache() thinks\nthat it's successfully added to the cache and do a GET\noperation to the related key which returns None. This way\ninstead of returning default, returns None.\n\nThis also fixes possible data eviction problems\nbetween setting and getting a key. Another thread possibly\nremove the key before get_and_set access it again.\n\nAlso added the get_or_set related unit tests for DummyCache backend.\n", "A_clean_body": ["refactor", "django", "'s", "built", "basecach", "base", "cach", "get", "or", "set", "work", "well", "dummycach", "dummi", "cach", "get", "or", "set", "implement", "tri", "fetch", "key", "first", "it", "n't", "exist", "it", "add", "default", "valu", "pass", "as", "'default", "paramet", "cach", "get", "it", "sinc", "dummycach", "dummi", "cach", "backend", "n't", "actual", "add", "someth", "but", "return", "true", "add", "oper", "get", "or", "cach", "think", "that", "it", "'s", "success", "ad", "cach", "get", "oper", "relat", "key", "which", "return", "none", "thi", "way", "instead", "return", "default", "return", "none", "thi", "also", "fix", "possibl", "data", "evict", "problem", "between", "set", "get", "key", "anoth", "thread", "possibl", "remov", "key", "befor", "get", "set", "access", "it", "again", "also", "ad", "get", "or", "set", "relat", "unit", "test", "dummycach", "dummi", "cach", "backend"], "B_body": "https://code.djangoproject.com/ticket/25840\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "25840"], "title_sim": [0.5970194174699988], "body_sim": [-0.00024388640283835557], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.2688123033521044, 0.1474695296260018], "location_sim": [0.0, 0.0], "pattern": 1, "time": 0}, {"A_title": "Fixes #21495: Adds CSRF header name setting and moves CSRF settings to CSRF View Middleware.", "A_clean_title": ["fix", "21495", "add", "csrf", "header", "name", "set", "move", "csrf", "set", "csrf", "view", "middlewar"], "B_title": "Fixed #21495 Added a setting for CSRF Header name", "B_clean_title": ["fix", "21495", "ad", "set", "csrf", "header", "name"], "A_body": "This allows for the View Middleware to be subclassed to swap out any applicable settings. This currently pulls in the available settings from the settings module to be phased out eventually in favor of storing the CSRF settings solely in the CSRF View Middleware class.\nSee: https://code.djangoproject.com/ticket/21495\n", "A_clean_body": ["thi", "allow", "view", "middlewar", "subclass", "swap", "out", "ani", "applic", "set", "thi", "current", "pull", "avail", "set", "set", "modul", "phase", "out", "eventu", "favor", "store", "csrf", "set", "sole", "csrf", "view", "middlewar", "class", "see", "http", "djangoproject", "code", "com", "ticket", "21495"], "B_body": "https://code.djangoproject.com/ticket/21495\n\nThanks wesalvaro for report and initial PR.\n\nI'm missing test(s) and probably docs. I'm not sure what tests to write in `csrf_tests/tests.py`. Feel free to comment. \n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "21495", "thank", "wesalvaro", "report", "initi", "pr", "'m", "miss", "test", "probabl", "doc", "'m", "not", "sure", "what", "test", "write", "py", "csrf", "test", "test", "feel", "free", "comment"], "title_sim": [0.8249821059322007], "body_sim": [0.2188230469841889], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.08872396674752055, 0.034513512193227895], "location_sim": [0.21052631578947367, 0.48598130841121495], "pattern": 1, "time": 0}, {"A_title": "Fixed #12422 -- Don't override global email charset behavior for utf-8.", "A_clean_title": ["fix", "12422", "n't", "overrid", "global", "email", "charset", "behavior", "utf"], "B_title": "Fixed #12422 Django overrides the default email charset behaviour for utf-8", "B_clean_title": ["fix", "12422", "django", "overrid", "default", "email", "charset", "behaviour", "utf"], "A_body": "Thanks simonb for the report, Claude Paroz and Susan Tan for their work\non a fix.\n", "A_clean_body": ["thank", "simonb", "report", "claud", "paroz", "susan", "tan", "their", "work", "fix"], "B_body": "https://code.djangoproject.com/ticket/12422#no1 Thanks Claude for the patch and simonb for reporting the bug. All tests pass.\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "12422", "no1", "thank", "claud", "patch", "simonb", "report", "bug", "all", "test", "pass"], "title_sim": [0.6018613118250974], "body_sim": [0.23234116664054344], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 31}, {"A_title": "Fixed #21496 -- Fixed crash when GeometryField used TextInput", "A_clean_title": ["fix", "21496", "fix", "crash", "when", "geometryfield", "geometri", "field", "use", "textinput", "text", "input"], "B_title": "Don't crash if GeometryField widget doesn't know srid", "B_clean_title": ["n't", "crash", "geometryfield", "geometri", "field", "widget", "n't", "know", "srid"], "A_body": "Thanks Rhett Garber for the report and initial patch.\n", "A_clean_body": ["thank", "rhett", "garber", "report", "initi", "patch"], "B_body": "Also, it seems inappropriate for srid transformation to be done within the `clean` function, rather than `to_python`.\n\nThe `_has_changed` wont' see the transformation, for example.\n", "B_clean_body": ["also", "it", "seem", "inappropri", "srid", "transform", "done", "within", "clean", "function", "rather", "than", "python", "ha", "chang", "wont", "see", "transform", "exampl"], "title_sim": [0.5217145768809964], "body_sim": [0.020279084716391903], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.20787802348938128, 0.20787802348938128], "location_sim": [0.6444444444444445, 0.6444444444444445], "pattern": 0, "time": 0}, {"A_title": "Fixed #26750 -- Fixed introspection for geography point field with dim=3", "A_clean_title": ["fix", "26750", "fix", "introspect", "geographi", "point", "field", "dim=3"], "B_title": "Fixed #26750 -- Added PointZField model field.", "B_clean_title": ["fix", "26750", "ad", "pointzfield", "point", "field", "model", "field"], "A_body": "Thanks Yegor Kazantsev for the report and the initial patch.\n", "A_clean_body": ["thank", "yegor", "kazantsev", "report", "initi", "patch"], "B_body": "Add support for postgis field like: location geography(PointZ,4326) or GeoRuby like: t.st_point :location, geographic: true, has_z: true\n", "B_clean_body": ["add", "support", "postgi", "field", "like", "locat", "geographi", "pointz,4326", "point", "z,4326", "or", "georubi", "geo", "rubi", "like", "st", "point", "locat", "geograph", "true", "ha", "true"], "title_sim": [0.8290370214442297], "body_sim": [-0.0006904468282441947], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.34297888718492736, 0.4111310919425225], "location_sim": [0.23333333333333334, 0.6363636363636364], "pattern": 1, "time": 7}, {"A_title": "Made Model.__eq__ consider proxy models equivalent", "A_clean_title": ["made", "model", "eq", "consid", "proxi", "model", "equival"], "B_title": "Fixed #20777 -- admin delete page proxy models with proxy string representation", "B_clean_title": ["fix", "20777", "admin", "delet", "page", "proxi", "model", "proxi", "string", "represent"], "A_body": "This pull request fixes tickets #11892, #16458, #14492 and #20777.\n", "A_clean_body": ["thi", "pull", "request", "fix", "ticket", "11892", "16458", "14492", "20777"], "B_body": "This PR forces string evaluation before the proxy model is replaced with the\nconcrete model.\nThe concrete model str/unicode is replaced with a lambda function containing\nthe proxy class representation.\n\nAlternative using dict copy: https://github.com/django/django/pull/1436\n", "B_clean_body": ["thi", "pr", "forc", "string", "evalu", "befor", "proxi", "model", "replac", "concret", "model", "concret", "model", "str", "unicod", "replac", "lambda", "function", "contain", "proxi", "class", "represent", "altern", "dict", "copi", "http", "github", "com", "django", "django", "pull", "1436"], "title_sim": [0.7557561749192951], "body_sim": [0.20824599486041398], "file_list_sim": 0.5, "overlap_files_len": 6, "code_sim": [0.6026103070729162, 0.9466797940568626], "location_sim": [0.7339449541284404, 1.0], "pattern": 1, "time": 10}, {"A_title": "MonthArchiveView & BaseMonthArchiveView docstrings", "A_clean_title": ["montharchiveview", "month", "archiv", "view", "basemontharchiveview", "base", "month", "archiv", "view", "docstr"], "B_title": "Fix docstrings of MonthArchiveViews", "B_clean_title": ["fix", "docstr", "montharchiveview", "month", "archiv", "view"], "A_body": "MonthArchiveView & BaseMonthArchiveView docstrings now reference \"month\" rather than \"year\".\n\nThanks to @sztosz for [the report](https://github.com/refreshoxford/django-cbv-inspector/issues/87).\n", "A_clean_body": ["montharchiveview", "month", "archiv", "view", "basemontharchiveview", "base", "month", "archiv", "view", "docstr", "now", "refer", "month", "rather", "than", "year", "thank", "sztosz", "report", "http", "cbv", "inspector", "issu", "87", "github", "com", "refreshoxford", "django"], "B_body": "MonthArchiveView and BaseMonthArchiveView refer to \"year\" in their docstrings instead of \"month\".\n", "B_clean_body": ["montharchiveview", "month", "archiv", "view", "basemontharchiveview", "base", "month", "archiv", "view", "refer", "year", "their", "docstr", "instead", "month"], "title_sim": [0.9070922335092124], "body_sim": [0.6818933477225108], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Fixed #25285 -- Provided unknown command message with plain django-admin.py", "A_clean_title": ["fix", "25285", "provid", "unknown", "command", "messag", "plain", "django", "admin", "py"], "B_title": "Fixed #25285 -- Prevented django-admin from raising \"settings not configured\" on an unknown command.", "B_clean_title": ["fix", "25285", "prevent", "django", "admin", "rais", "set", "not", "configur", "unknown", "command"], "A_body": "Thanks Maxime Lorant for the report.\n", "A_clean_body": ["thank", "maxim", "lorant", "report"], "B_body": "The project could not exist yet, so it can raise the wrong exception.\n\nSee https://code.djangoproject.com/ticket/25285\n", "B_clean_body": ["project", "could", "not", "exist", "yet", "so", "it", "rais", "wrong", "except", "see", "http", "djangoproject", "code", "com", "ticket", "25285"], "title_sim": [0.41472937002286125], "body_sim": [-0.022159815659038355], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.6266888203740957, 0.6266888203740957], "location_sim": [0.9416666666666667, 1.0], "pattern": 1, "time": 1}, {"A_title": "Fixed #27102 -- Fixed simplify_regex in admindocs", "A_clean_title": ["fix", "27102", "fix", "simplifi", "regex", "admindoc"], "B_title": "Fixed #26621 -- Made simplify_regex handle named capture groups correctly", "B_clean_title": ["fix", "26621", "made", "simplifi", "regex", "handl", "name", "captur", "group", "correctli"], "A_body": "Fixes #27102: https://code.djangoproject.com/ticket/27102\n\nFixes an issue where simplify_regex would not notice a trailing\nbracket when cleaning up regex patterns involving groups.\n\nSteps to reproduce:\nrun this in your shell: \n`django.contrib.admindocs.views.simplify_regex('^orgs/(?P<org_id>([0-9a-f]{32}|[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}))$')`\noutput:\n`'/orgs/<org_id>)'`\n\nexpected output:\n`'/orgs/<org_id>'`\n", "A_clean_body": ["fix", "27102", "http", "djangoproject", "code", "com", "ticket", "27102", "fix", "issu", "where", "simplifi", "regex", "would", "not", "notic", "trail", "bracket", "when", "clean", "up", "regex", "pattern", "involv", "group", "step", "reproduc", "run", "thi", "your", "shell", "django", "contrib", "admindoc", "view", "simplifi", "regex", "'^org", "org", "id", "9a", "32", "9a", "9a", "9a", "9a", "9a", "12", "output", "org", "org", "id", "expect", "output", "org", "org", "id"], "B_body": "https://code.djangoproject.com/ticket/26621\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "26621"], "title_sim": [0.6706661989188166], "body_sim": [0.18117967687187525], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.4211186436164858, 0.467920100035189], "location_sim": [0.1761006289308176, 0.6511627906976745], "pattern": -1, "time": 85}, {"A_title": "Fixed #23712 -- Fixed KeyError with BaseForm._html_output()", "A_clean_title": ["fix", "23712", "fix", "keyerror", "key", "error", "baseform", "base", "form", "html", "output"], "B_title": "Fixed #23712 -- field_name no longer raises KeyError", "B_clean_title": ["fix", "23712", "field", "name", "no", "longer", "rais", "keyerror", "key", "error"], "A_body": "`field_name` was not fully add and will trigger the bug when using a hidden field with a unmatch `row_ender`.\n", "A_clean_body": ["field", "name", "wa", "not", "fulli", "add", "will", "trigger", "bug", "when", "hidden", "field", "unmatch", "row", "ender"], "B_body": "`field_name` was added in 053de6131af83c (#5749) to the part that\nbuilds the output list but not to the part that inserts hidden fields\nto the last row when the last row doesn't end with `row_ender`.\n\nAdded the `field_name` to the dict in said location.\n", "B_clean_body": ["field", "name", "wa", "ad", "053de6131af83c", "5749", "part", "that", "build", "output", "list", "but", "not", "part", "that", "insert", "hidden", "field", "last", "row", "when", "last", "row", "n't", "end", "row", "ender", "ad", "field", "name", "dict", "said", "locat"], "title_sim": [0.36298158332530994], "body_sim": [0.6250586509301934], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.8599317689544961, 0.8599317689544961], "location_sim": [0.1415929203539823, 0.1415929203539823], "pattern": 1, "time": 51}, {"A_title": "Fixed #25170 -- Made SimpleTestCase.assertXMLEqual() ignore whitespace outside of tags.", "A_clean_title": ["fix", "25170", "made", "simpletestcas", "assertxmlequ", "simpl", "test", "case", "assert", "xml", "equal", "ignor", "whitespac", "outsid", "tag"], "B_title": "Fixed #25170 -- fixed the assertXMLEqual behavior.", "B_clean_title": ["fix", "25170", "fix", "assertxmlequ", "assert", "xml", "equal", "behavior"], "A_body": "In every argument passed to `compare_xml` will be applied `split()` function.\nAll withespaces in the beginning and or end of xml string in `assertXMLEqual` will be ignored.\n", "A_clean_body": ["everi", "argument", "pass", "compar", "xml", "will", "appli", "split", "function", "all", "withespac", "begin", "or", "end", "xml", "string", "assertxmlequ", "assert", "xml", "equal", "will", "ignor"], "B_body": "Fixed the issue that caused two identical XMLs to be treated as\ndifferent if one of them had some extra whitespaces in the begining\nor the end of the xml string. Now, it is ignoring all whitespaces as it\nis expected to be. The corresponding test case was added.\n\nFix for ticket: https://code.djangoproject.com/ticket/25170\n", "B_clean_body": ["fix", "issu", "that", "caus", "two", "ident", "xml", "xm", "ls", "treat", "as", "differ", "one", "them", "had", "some", "extra", "whitespac", "begin", "or", "end", "xml", "string", "now", "it", "ignor", "all", "whitespac", "as", "it", "expect", "correspond", "test", "case", "wa", "ad", "fix", "ticket", "http", "djangoproject", "code", "com", "ticket", "25170"], "title_sim": [0.6296586433945772], "body_sim": [0.2844202940301566], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.46727930827995334, 0.46727930827995334], "location_sim": [0.0, 0.0], "pattern": 1, "time": 0}, {"A_title": "Fixed #27300 -- Made makemigrations --dry-run output a string (no bytes)", "A_clean_title": ["fix", "27300", "made", "makemigr", "dri", "run", "output", "string", "no", "byte"], "B_title": "Fixed #27300 -- Fixed encoding of makemigrations output", "B_clean_title": ["fix", "27300", "fix", "encod", "makemigr", "output"], "A_body": "", "A_clean_body": [], "B_body": "When using --dry-run and -v 3 with makemigrations on Python 3 the\ncontent of the migration file is not properly decoded.\n", "B_clean_body": ["when", "dri", "run", "makemigr", "python", "content", "migrat", "file", "not", "properli", "decod"], "title_sim": [0.48254941002679885], "body_sim": [0.0], "file_list_sim": 0.3333333333333333, "overlap_files_len": 2, "code_sim": [0.005835337183473889, 0.0008822858680806155], "location_sim": [0.0, 0.0], "pattern": 1, "time": 0}, {"A_title": "Fixed #21283 -- Added support for migrations if models is a package.", "A_clean_title": ["fix", "21283", "ad", "support", "migrat", "model", "packag"], "B_title": "Fixed #21283 -- Place migration files for package models in a folder on application level", "B_clean_title": ["fix", "21283", "place", "migrat", "file", "packag", "model", "folder", "applic", "level"], "A_body": "Refs #14300.\n", "A_clean_body": ["ref", "14300"], "B_body": "https://code.djangoproject.com/ticket/21283\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "21283"], "title_sim": [0.5319339383204837], "body_sim": [-0.001265614078957635], "file_list_sim": 0.25, "overlap_files_len": 1, "code_sim": [0.5089286383717774, 0.19865320885178375], "location_sim": [0.28431372549019607, 0.8055555555555556], "pattern": 1, "time": 0}, {"A_title": "Fixed #20099 -- Eased subclassing of BrokenLinkEmailsMiddleware", "A_clean_title": ["fix", "20099", "eas", "subclass", "brokenlinkemailsmiddlewar", "broken", "link", "email", "middlewar"], "B_title": "Implement `BrokenLinkEmailsMiddleware.is_request_we_should_notify_for`", "B_clean_title": ["implement", "brokenlinkemailsmiddlewar", "broken", "link", "email", "middlewar", "request", "we", "notifi"], "A_body": "An alternative approach based on coolRR patch\n", "A_clean_body": ["altern", "approach", "base", "coolrr", "cool", "rr", "patch"], "B_body": "Pull request for this issue: https://code.djangoproject.com/ticket/20099\n\nIf you want, I can rename `is_request_we_should_notify_for` to `is_relevant_request`.\n", "B_clean_body": ["pull", "request", "thi", "issu", "http", "djangoproject", "code", "com", "ticket", "20099", "you", "want", "renam", "request", "we", "notifi", "relev", "request"], "title_sim": [0.6399046790506485], "body_sim": [-0.015494756148880066], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.8275764305925021, 0.8275764305925021], "location_sim": [1.0, 1.0], "pattern": 1, "time": 38}, {"A_title": "Fixed #25710: Clarified the docs about what INTERNAL_IPS does.", "A_clean_title": ["fix", "25710", "clarifi", "doc", "about", "what", "intern", "ip"], "B_title": "Fixed #25710 -- Documented what INTERNAL_IPS does under the DEBUG set\u2026", "B_clean_title": ["fix", "25710", "document", "what", "intern", "ip", "under", "debug", "set\u2026"], "A_body": "", "A_clean_body": [], "B_body": "\u2026ting.\n", "B_clean_body": ["\u2026ting"], "title_sim": [0.3708093599985693], "body_sim": [0.0], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.33433348525357265, 0.036046228925297144], "location_sim": [0.0, 0.0], "pattern": 1, "time": 0}, {"A_title": "Fixed #27699 -- Fixed parse_duration() with a negative number of seconds.", "A_clean_title": ["fix", "27699", "fix", "pars", "durat", "neg", "number", "second"], "B_title": "Fixed #27699 -- Added negative timedelta support to parse_duration().", "B_clean_title": ["fix", "27699", "ad", "neg", "timedelta", "support", "pars", "durat"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.29980495384142297], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.9816135239129222, 0.9816135239129222], "location_sim": [1.0, 1.0], "pattern": 1, "time": 0}, {"A_title": "Fixed #21587 -- deprecation warning for upcoming permanent default", "A_clean_title": ["fix", "21587", "deprec", "warn", "upcom", "perman", "default"], "B_title": "Fixes #21587 Added Deprecation Warning for upcoming permanent default", "B_clean_title": ["fix", "21587", "ad", "deprec", "warn", "upcom", "perman", "default"], "A_body": "", "A_clean_body": [], "B_body": "As noted in the ticket, we need a deprecation warning.  This adds the warning into the current version, a test to make sure the warning indeed warns, and then changes to the documentation about the upcoming change.\n", "B_clean_body": ["as", "note", "ticket", "we", "need", "deprec", "warn", "thi", "add", "warn", "into", "current", "version", "test", "make", "sure", "warn", "inde", "warn", "then", "chang", "document", "about", "upcom", "chang"], "title_sim": [0.9571169748870205], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 3, "code_sim": [0.9110677147860488, 0.9110677147860488], "location_sim": [1.0, 1.0], "pattern": 1, "time": 31}, {"A_title": "Fixed #20846 -- Changed User.username max_length to 254", "A_clean_title": ["fix", "20846", "chang", "user", "usernam", "max", "length", "254"], "B_title": "Fixed #20846 -- Change username max_length to 254", "B_clean_title": ["fix", "20846", "chang", "usernam", "max", "length", "254"], "A_body": "", "A_clean_body": [], "B_body": "https://code.djangoproject.com/ticket/20846\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "20846"], "title_sim": [0.8670351983354884], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 4, "code_sim": [0.9372777939733096, 0.9372777939733096], "location_sim": [0.5, 0.5], "pattern": 1, "time": 179}, {"A_title": "Fixed #27119 -- Cached BaseFormSet.management_form property", "A_clean_title": ["fix", "27119", "cach", "baseformset", "base", "form", "set", "manag", "form", "properti"], "B_title": "Fixed #27119 -- management_form property as a cached_property", "B_clean_title": ["fix", "27119", "manag", "form", "properti", "as", "cach", "properti"], "A_body": "Thanks Karol Sztajerwald for the initial patch.", "A_clean_body": ["thank", "karol", "sztajerwald", "initi", "patch"], "B_body": "Wrapped management_form property with cached_property, because of multiple usage of management_form in BaseFormSet class.", "B_clean_body": ["wrap", "manag", "form", "properti", "cach", "properti", "becaus", "multipl", "usag", "manag", "form", "baseformset", "base", "form", "set", "class"], "title_sim": [0.8245091800555074], "body_sim": [0.02607842361821037], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.025111073236834598, 1.0], "location_sim": [0.22950819672131148, 1.0], "pattern": 1, "time": 25}, {"A_title": "Fixed #23621 -- Warn for duplicate models when a module is reloaded.", "A_clean_title": ["fix", "23621", "warn", "duplic", "model", "when", "modul", "reload"], "B_title": "Fixed #23621 -- Warn for duplicate models instead of raising an exception", "B_clean_title": ["fix", "23621", "warn", "duplic", "model", "instead", "rais", "except"], "A_body": "Previously a RuntimeError was raised every time two models clashed\nin the app registry. This prevented reloading a module in a REPL;\nwhile it's not recommended to do so, we decided not to forbid this\nuse-case by turning the error into a warning.\n\nThanks @dfunckt and Sergey Pashinin for the initial patches.\n", "A_clean_body": ["previous", "runtimeerror", "runtim", "error", "wa", "rais", "everi", "time", "two", "model", "clash", "app", "registri", "thi", "prevent", "reload", "modul", "repl", "while", "it", "'s", "not", "recommend", "so", "we", "decid", "not", "forbid", "thi", "use", "case", "by", "turn", "error", "into", "warn", "thank", "dfunckt", "sergey", "pashinin", "initi", "patch"], "B_body": "Enables code reloading, e.g. from Python shell.\n", "B_clean_body": ["enabl", "code", "reload", "python", "shell"], "title_sim": [0.3648729867228334], "body_sim": [0.1295704506594406], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.2563852372746991, 0.5922066452628258], "location_sim": [0.3424657534246575, 1.0], "pattern": 1, "time": 1}, {"A_title": "Fixed #21242 -- Allowed more IANA schemes in URLValidator", "A_clean_title": ["fix", "21242", "allow", "more", "iana", "scheme", "urlvalid", "url", "valid"], "B_title": "Fixed #21242 -- Allow more IANA schemes in URLValidator", "B_clean_title": ["fix", "21242", "allow", "more", "iana", "scheme", "urlvalid", "url", "valid"], "A_body": "Thanks Sascha Peilicke for the report and initial patch, and\nTim Graham for the review.\n", "A_clean_body": ["thank", "sascha", "peilick", "report", "initi", "patch", "tim", "graham", "review"], "B_body": "Add an optional \"schemes\" parameter to the URLValidator constructor\nthat allows to pass additional URL/URI schemes to validate against\nshould the validation fail against the default schemes (as part of the\ngeneric URL regex, i.e. http(s) or ftp(s)). Also add an \"uri\" utility\nmodule that provides constants with all currently registered IANA\nschemes as listed on\nhttps://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n", "B_clean_body": ["add", "option", "scheme", "paramet", "urlvalid", "url", "valid", "constructor", "that", "allow", "pass", "addit", "url", "uri", "scheme", "valid", "against", "valid", "fail", "against", "default", "scheme", "as", "part", "gener", "url", "regex", "http", "or", "ftp", "also", "add", "uri", "util", "modul", "that", "provid", "constant", "all", "current", "regist", "iana", "scheme", "as", "list", "http", "iana", "scheme", "uri", "scheme", "xhtml", "www", "org", "assign", "uri"], "title_sim": [0.9999999999999998], "body_sim": [0.01752023583639118], "file_list_sim": 0.6, "overlap_files_len": 3, "code_sim": [0.867700526474524, 0.9486819859625091], "location_sim": [0.7219251336898396, 0.8653846153846154], "pattern": 1, "time": 65}, {"A_title": "Fixed #25307 -- conditional aggregation over subqueries", "A_clean_title": ["fix", "25307", "condit", "aggreg", "over", "subqueri"], "B_title": "Fixed #25307 -- Conditional aggregation over subqueries", "B_clean_title": ["fix", "25307", "condit", "aggreg", "over", "subqueri"], "A_body": "", "A_clean_body": [], "B_body": "https://code.djangoproject.com/ticket/25307\n", "B_clean_body": ["http", "djangoproject", "code", "com", "ticket", "25307"], "title_sim": [1.0], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 2, "code_sim": [0.7064687716701678, 0.8183090674472552], "location_sim": [0.6396396396396397, 0.8554216867469879], "pattern": 1, "time": 0}, {"A_title": "Fixed #23098 -- Checked that lazy choices are not evaluated too soon", "A_clean_title": ["fix", "23098", "check", "that", "lazi", "choic", "are", "not", "evalu", "too", "soon"], "B_title": "Fixed #23098 -- Checked that lazy choices are not evaluated too soon", "B_clean_title": ["fix", "23098", "check", "that", "lazi", "choic", "are", "not", "evalu", "too", "soon"], "A_body": "Thanks Matthieu Agopian for the report.\n", "A_clean_body": ["thank", "matthieu", "agopian", "report"], "B_body": "Thanks Matthieu Agopian for the report.\n", "B_clean_body": ["thank", "matthieu", "agopian", "report"], "title_sim": [1.0], "body_sim": [1.0], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.9359106829725605, 0.9359106829725605], "location_sim": [1.0, 1.0], "pattern": 1, "time": 1}, {"A_title": "Fixed #25385 -- Allowed importing views.generic.View from views.View.", "A_clean_title": ["fix", "25385", "allow", "import", "view", "gener", "view", "view", "view"], "B_title": "Fixed #25385 -- Allowed importing views.generic.View from views.View.", "B_clean_title": ["fix", "25385", "allow", "import", "view", "gener", "view", "view", "view"], "A_body": "Changes in views/**init**.py, docs and release notes\n", "A_clean_body": ["chang", "py", "view", "**init**", "doc", "releas", "note"], "B_body": "docs and release note needed\n", "B_clean_body": ["doc", "releas", "note", "need"], "title_sim": [1.0], "body_sim": [0.7970170515234868], "file_list_sim": 0.42857142857142855, "overlap_files_len": 3, "code_sim": [0.7988336060667736, 0.8505702958888851], "location_sim": [0.5391304347826087, 0.8493150684931506], "pattern": 1, "time": 41}]