[{"A_title": "[BUGFIX release] Fix Glimmer memory leak", "A_clean_title": ["bugfix", "releas", "fix", "glimmer", "memori", "leak"], "B_title": "failing test for #11501", "B_clean_title": ["fail", "test", "11501"], "A_body": "This commit resolves a memory leak (#11501) in apps running Glimmer. The root cause of the issue was that a flag governing whether components/views remove themselves from their parent was being set incorrectly, so that when the code to cleanup a destroyed view ran, it was not removed from its parent\u2019s `childViews` array.\n\nSpecifically, three hooks are invoked when a render node is cleared:\n1. `env.hooks.willCleanupNode`\n2. `Morph#cleanup`\n3. `env.hooks.didCleanupNode`\n\nPrior to this commit, `willCleanupNode` would blindly set the owner view\u2019s `isDestroyingSubtree` flag if there was a view set in the `env` (i.e., basically always).\n\nSidebar on the `isDestroyingSubtree` flag: this flag is used as a performance optimization. If a view is destroyed, we want to remove that view from its parent\u2019s `childViews` array so that garbage collection can happen. However, it is unnecessary to remove child views from the destroyed view\u2019s `childViews` array; the GC will take care of any clean up when the link between the view hierarchy and the destroyed view is severed.\n\nFor example, imagine this hypothetical view hierarchy:\n\n```\n      A\n     / \\\n    B   C\n       / \\\n      D   E\n```\n\nIf the render node for view C is destroyed, we need to remove C from A\u2019s array of child views. However, it is unnecessary to remove D or E from C\u2019s child views, because they will be imminently removed by the GC, and temporarily lingering in the child views array does no harm.\n\nWe accomplish this by setting the `isDestroyingSubtree` flag on the root-most view in a hierarchy (view A in the example above), which we call the owner view. When the render node for C is destroyed, it removes C from A\u2019s child views array and sets the flag to true. When D and E\u2019s render nodes are destroyed, they see that the flag has already been flipped and do not remove their associated views from C\u2019s child views array.\n\nThe memory leak manifested itself when the a render node that did not have a view associated with it was destroyed, and contained a child render node that _did_ have a view associated. For example:\n\n``` handlebars\n{{#if foo}}\n  {{my-component}}\n{{/if}}\n```\n\nIn this case, the `willCleanupNode` hook would erroneously set the flag without actually moving the `my-component` view, because the render node for the `{{if}}` does not know about the component.\n\nWhen the cleanup for `{{my-component}}` finally happens (in Morph#cleanup), the flag has already been set, so the render node incorrectly assumes that its view is part of a subgraph that has already been severed.\n\nAs far as we can tell, the `willCleanupNode` hook is not doing any cleanup that is not already done in `Morph#cleanup`. We still do need `didCleanupNode` to clear the flag, but can leave individual render node cleanup to the render node itself.\n", "A_clean_body": ["thi", "commit", "resolv", "memori", "leak", "11501", "app", "run", "glimmer", "root", "caus", "issu", "wa", "that", "flag", "govern", "whether", "compon", "view", "remov", "themselv", "their", "parent", "wa", "be", "set", "incorrectli", "so", "that", "when", "code", "cleanup", "destroy", "view", "ran", "it", "wa", "not", "remov", "it", "parent", "childview", "child", "view", "array", "specif", "three", "hook", "are", "invok", "when", "render", "node", "clear", "env", "hook", "willcleanupnod", "will", "cleanup", "node", "morph", "cleanup", "env", "hook", "didcleanupnod", "did", "cleanup", "node", "prior", "thi", "commit", "willcleanupnod", "will", "cleanup", "node", "would", "blindli", "set", "owner", "view", "isdestroyingsubtre", "destroy", "subtre", "flag", "there", "wa", "view", "set", "env", "basic", "alway", "sidebar", "isdestroyingsubtre", "destroy", "subtre", "flag", "thi", "flag", "use", "as", "perform", "optim", "view", "destroy", "we", "want", "remov", "that", "view", "it", "parent", "childview", "child", "view", "array", "so", "that", "garbag", "collect", "happen", "howev", "it", "unnecessari", "remov", "child", "view", "destroy", "view", "childview", "child", "view", "array", "gc", "will", "take", "care", "ani", "clean", "up", "when", "link", "between", "view", "hierarchi", "destroy", "view", "sever", "exampl", "imagin", "thi", "hypothet", "view", "hierarchi", "render", "node", "view", "destroy", "we", "need", "remov", "array", "child", "view", "howev", "it", "unnecessari", "remov", "or", "child", "view", "becaus", "they", "will", "immin", "remov", "by", "gc", "temporarili", "linger", "child", "view", "array", "no", "harm", "we", "accomplish", "thi", "by", "set", "isdestroyingsubtre", "destroy", "subtre", "flag", "root", "most", "view", "hierarchi", "view", "exampl", "abov", "which", "we", "call", "owner", "view", "when", "render", "node", "destroy", "it", "remov", "child", "view", "array", "set", "flag", "true", "when", "render", "node", "are", "destroy", "they", "see", "that", "flag", "ha", "alreadi", "been", "flip", "not", "remov", "their", "associ", "view", "child", "view", "array", "memori", "leak", "manifest", "itself", "when", "render", "node", "that", "did", "not", "have", "view", "associ", "it", "wa", "destroy", "contain", "child", "render", "node", "that", "did", "have", "view", "associ", "exampl", "handlebar", "foo", "my", "compon", "thi", "case", "willcleanupnod", "will", "cleanup", "node", "hook", "would", "erron", "set", "flag", "without", "actual", "move", "my", "compon", "view", "becaus", "render", "node", "not", "know", "about", "compon", "when", "cleanup", "my", "compon", "final", "happen", "morph", "cleanup", "flag", "ha", "alreadi", "been", "set", "so", "render", "node", "incorrectli", "assum", "that", "it", "view", "part", "subgraph", "that", "ha", "alreadi", "been", "sever", "as", "far", "as", "we", "tell", "willcleanupnod", "will", "cleanup", "node", "hook", "not", "do", "ani", "cleanup", "that", "not", "alreadi", "done", "morph", "cleanup", "we", "still", "need", "didcleanupnod", "did", "cleanup", "node", "clear", "flag", "but", "leav", "individu", "render", "node", "cleanup", "render", "node", "itself"], "B_body": "- [ ] make it pass\n", "B_clean_body": ["make", "it", "pass"], "title_sim": [-0.04125365206996125], "body_sim": [0.12504367378066797], "file_list_sim": 0.06666666666666667, "overlap_files_len": 1, "code_sim": [0.8130337804740467, 0.9688745224103904], "location_sim": [0.3659942363112392, 0.9477611940298507], "pattern": 1, "time": 0}, {"A_title": "Added a link to Guidelines Page and Changelog", "A_clean_title": ["ad", "link", "guidelin", "page", "changelog"], "B_title": "Create CODE_OF_CONDUCT.md", "B_clean_title": ["creat", "md", "code", "conduct"], "A_body": "Practically, we should only be maintaining one copy of this. So I'm adding the missing links to places folks might go _looking_ for this :)\n", "A_clean_body": ["practic", "we", "onli", "maintain", "one", "copi", "thi", "so", "'m", "ad", "miss", "link", "place", "folk", "might", "go", "look", "thi"], "B_body": "Thank you so much for this tweet: https://twitter.com/trek/status/611619058098634752\n\nIt would be great to formalize your support with the inclusion of @CoralineAda's code of conduct.\n\nThanks for your consideration.\n", "B_clean_body": ["thank", "you", "so", "much", "thi", "tweet", "http", "twitter", "com", "trek", "statu", "611619058098634752", "it", "would", "great", "formal", "your", "support", "inclus", "coralineada", "coralin", "ada", "'s", "code", "conduct", "thank", "your", "consider"], "title_sim": [0.0585386367204509], "body_sim": [0.3682170050557069], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.24090372493368123, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "Make controllers handle events defined on their prototypes", "A_clean_title": ["make", "control", "handl", "event", "defin", "their", "prototyp"], "B_title": "{{action}} will target a template's controller", "B_clean_title": ["action", "will", "target", "templat", "'s", "control"], "A_body": "The following very simple use of `action` doesn't work:\n\n```\n<script type=\"text/x-handlebars\" data-template-name=\"application\">\n<div\u00a0{{action \"myAction\"}}>Action</div>    \n</script>\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n```\n\n``` javascript\nApp = Ember.Application.create();\n\nApp.ApplicationController = Ember.Controller.extend({\n    myAction: function(){ alert(\"it worked\")}\n});\n```\n\n(Runnable version here: http://jsfiddle.net/AMLf4/)\n\nThe event fails to fire because `ControllerMixin.send` uses `hasOwnProperty` to determine if the controller can handle the event. In this case (and most cases), the property is defined higher up the prototype chain.\n", "A_clean_body": ["follow", "veri", "simpl", "use", "action", "n't", "work", "script", "type=", "handlebar", "text", "data", "templat", "name=", "applic", "div", "action", "myaction", "my", "action", "action", "div", "script", "javascript", "app", "ember", "applic", "creat", "app", "applicationcontrol", "applic", "control", "ember", "control", "extend", "myaction", "my", "action", "function", "alert", "it", "work", "runnabl", "version", "here", "http", "jsfiddl", "net", "amlf4", "am", "lf4", "event", "fail", "fire", "becaus", "controllermixin", "send", "control", "mixin", "use", "hasownproperti", "ha", "own", "properti", "determin", "control", "handl", "event", "thi", "case", "most", "case", "properti", "defin", "higher", "up", "prototyp", "chain"], "B_body": "If a function whose name matches an an action is implemented on\na template's controller, that method will be called instead of\ndelegating the action to the application's current state.\n\nNot sure why a check of `hasOwnProperty` was used, but\nit prevented this new behavior from occurring.\n\n@tomdale and I discussed this briefly last night.\n", "B_clean_body": ["function", "whose", "name", "match", "action", "implement", "templat", "'s", "control", "that", "method", "will", "call", "instead", "deleg", "action", "applic", "'s", "current", "state", "not", "sure", "whi", "check", "hasownproperti", "ha", "own", "properti", "wa", "use", "but", "it", "prevent", "thi", "new", "behavior", "occur", "tomdal", "discuss", "thi", "briefli", "last", "night"], "title_sim": [0.353031012719251], "body_sim": [0.5448626043424445], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.386774077358796, 0.0], "location_sim": [0.1728395061728395, 1.0], "pattern": 0, "time": 0}, {"A_title": "[BUGFIX release] Fix #12475", "A_clean_title": ["bugfix", "releas", "fix", "12475"], "B_title": "Failing test for 12475", "B_clean_title": ["fail", "test", "12475"], "A_body": "Fixes #12475 by reverting the ArrayProxy code to use before-observers. In order to re-remove these before observers we will need to remove the `@array:before` event (AKA the `willChange` part of `array.addArrayObserver({ willChange, didChange })`)\n\nFor more details see https://github.com/emberjs/ember.js/pull/12860#issuecomment-179127070.\n", "A_clean_body": ["fix", "12475", "by", "revert", "arrayproxi", "array", "proxi", "code", "use", "befor", "observ", "order", "re", "remov", "these", "befor", "observ", "we", "will", "need", "remov", "array", "befor", "event", "aka", "willchang", "will", "chang", "part", "array", "addarrayobserv", "add", "array", "observ", "willchang", "will", "chang", "didchang", "did", "chang", "more", "detail", "see", "http", "github", "com", "emberj", "ember", "js", "pull", "12860", "issuecom", "179127070"], "B_body": "This adds a failing test for #12475. It appears that `obj.set('array', [a1, a2, a3])` fails to install contentKey observers on the new array value so that the subsequent changes to `foo` are ignored.\n", "B_clean_body": ["thi", "add", "fail", "test", "12475", "it", "appear", "that", "obj", "set", "'array", "a1", "a2", "a3", "fail", "instal", "contentkey", "content", "key", "observ", "new", "array", "valu", "so", "that", "subsequ", "chang", "foo", "are", "ignor"], "title_sim": [-0.04843313785548625], "body_sim": [0.3569900673772349], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.315809335472719, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 16}, {"A_title": "[BUGFIX beta] Cleanup view teardown.", "A_clean_title": ["bugfix", "beta", "cleanup", "view", "teardown"], "B_title": "Ensure top level destroys DOM", "B_clean_title": ["ensur", "top", "level", "destroy", "dom"], "A_body": "- [x] Add tests to ensure `.parentView` is available in all hooks.\n- [x] Add tests to ensure `.element` is available in appropriate hooks.\n- [x] add tests that assure counts of hooks in all dynamic scenarios\n- [x] add regression tests\n  - [x] `willDestroyElement` is called for components invoked from the `{{else}}` hook of an `{{#each` https://github.com/emberjs/ember.js/issues/12716.\n  - [x] `this.parentView` is available in `willDestroyElement` https://github.com/emberjs/ember.js/issues/12080.\n  - [x] `willDestroyElement` is called before actual destruction for components rendered with `{{component` helper.\n\nThis should fix #12080 #12716 and #13028\n", "A_clean_body": ["add", "test", "ensur", "parentview", "parent", "view", "avail", "all", "hook", "add", "test", "ensur", "element", "avail", "appropri", "hook", "add", "test", "that", "assur", "count", "hook", "all", "dynam", "scenario", "add", "regress", "test", "willdestroyel", "will", "destroy", "element", "call", "compon", "invok", "hook", "each", "http", "github", "com", "emberj", "ember", "js", "issu", "12716", "thi", "parentview", "parent", "view", "avail", "willdestroyel", "will", "destroy", "element", "http", "github", "com", "emberj", "ember", "js", "issu", "12080", "willdestroyel", "will", "destroy", "element", "call", "befor", "actual", "destruct", "compon", "render", "compon", "helper", "thi", "fix", "12080", "12716", "13028"], "B_body": "Prior to this change, the render nodes are cleared (replaced with `<!---->`) but not removed from the DOM\n\n/cc @krisselden\n", "B_clean_body": ["prior", "thi", "chang", "render", "node", "are", "clear", "replac", "but", "not", "remov", "dom", "cc", "krisselden"], "title_sim": [0.012658662804630403], "body_sim": [0.11424099702070789], "file_list_sim": 0.06666666666666667, "overlap_files_len": 1, "code_sim": [0.21586366644165517, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 3}, {"A_title": "Fix over zealous active view removal", "A_clean_title": ["fix", "over", "zealou", "activ", "view", "remov"], "B_title": "Prevent race condition in Router", "B_clean_title": ["prevent", "race", "condit", "router"], "A_body": "", "A_clean_body": [], "B_body": "This defends against deleting the wrong view from the Router's activeViews when we have a newer view with the same template name.  It closes #1657.\n", "B_clean_body": ["thi", "defend", "against", "delet", "wrong", "view", "router", "'s", "activeview", "activ", "view", "when", "we", "have", "newer", "view", "same", "templat", "name", "it", "close", "1657"], "title_sim": [0.008196965023200635], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.06045426127452956, 0.15583247610457562], "location_sim": [0.2831858407079646, 0.6956521739130435], "pattern": 0, "time": 7}, {"A_title": "[GLIMMER] Cleanup Glimmer View Support Mixin", "A_clean_title": ["glimmer", "cleanup", "glimmer", "view", "support", "mixin"], "B_title": "[Pre-Glimmer2] Remove references to HTMLBars and keywords", "B_clean_title": ["pre", "glimmer2", "remov", "refer", "htmlbar", "html", "bar", "keyword"], "A_body": "In glimmer we have a better strategy around setting layout and thus\nprivate APIS such as `templateNameFor` are no longer needed. This also\nremoves the following from the view support mixin.\n- CP for `template` (does nothing today)\n- CP for `layout` (cannot change post init, slotted in component class)\n- Slotted `layoutName` (in Component class)\n- Slotted `templateName` (doesn't work in components and was deprecated)\n- Slotted `isView` (not used in glimmer)\n\nThis also consolidates the component lookup between both engines and removes the `{{view}}` keyword from HTMLBars.\n\n/cc @krisselden\n", "A_clean_body": ["glimmer", "we", "have", "better", "strategi", "around", "set", "layout", "thu", "privat", "api", "such", "as", "templatenamefor", "templat", "name", "are", "no", "longer", "need", "thi", "also", "remov", "follow", "view", "support", "mixin", "cp", "templat", "noth", "today", "cp", "layout", "not", "chang", "post", "init", "slot", "compon", "class", "slot", "layoutnam", "layout", "name", "compon", "class", "slot", "templatenam", "templat", "name", "n't", "work", "compon", "wa", "deprec", "slot", "isview", "view", "not", "use", "glimmer", "thi", "also", "consolid", "compon", "lookup", "between", "both", "engin", "remov", "view", "keyword", "htmlbar", "html", "bar", "cc", "krisselden"], "B_body": "Remove all references to HTMLBars and keywords in test file that covers Ember's test helpers.\n\nQ: Should I also remove all references to View? Or is okay to do that as part of un-skipping tests for Glimmer?\n", "B_clean_body": ["remov", "all", "refer", "htmlbar", "html", "bar", "keyword", "test", "file", "that", "cover", "ember", "'s", "test", "helper", "also", "remov", "all", "refer", "view", "or", "okay", "that", "as", "part", "un", "skip", "test", "glimmer"], "title_sim": [-0.02205301529002576], "body_sim": [0.4691758580649415], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 4}, {"A_title": "Jsdoc fixes", "A_clean_title": ["jsdoc", "fix"], "B_title": "Doc", "B_clean_title": ["doc"], "A_body": "Added some jsdoc tags and moved a var get = Ember.get, set = Ember.set; that was in the wrong place.\n", "A_clean_body": ["ad", "some", "jsdoc", "tag", "move", "var", "get", "ember", "get", "set", "ember", "set", "that", "wa", "wrong", "place"], "B_body": "- Make ArrayController show up in JsDoc\n- Fix router docs\n  \n  `serialize`, not `deserialize` is called with the context object when\n  transitioning between states from within the application.\n", "B_clean_body": ["make", "arraycontrol", "array", "control", "show", "up", "jsdoc", "js", "doc", "fix", "router", "doc", "serial", "not", "deseri", "call", "context", "object", "when", "transit", "between", "state", "within", "applic"], "title_sim": [-0.07673982471616718], "body_sim": [0.010953901132806866], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "allows enumerable to be sorted in descending order", "A_clean_title": ["allow", "enumer", "sort", "descend", "order"], "B_title": "[FEATURE ember-runtime-sortable-sort-order] Sort order per proeprty in Sortable mixin", "B_clean_title": ["featur", "ember", "runtim", "sortabl", "sort", "order", "sort", "order", "per", "proeprti", "sortabl", "mixin"], "A_body": "useful in multi-column scenario when some columns asc and some desc\n", "A_clean_body": ["use", "multi", "column", "scenario", "when", "some", "column", "asc", "some", "desc"], "B_body": "This is a non breaking change that would allow one to specify a different sort order per property in `sortProperties` array.\n\nLet's say you have an array of users each of who has a weight. Weight can be the same for 2 users so then one would want the order to use the names, and logically the user with the most weight should be on the top of the list. With this feature it's possible now by adding a `:desc` at the end of the property which needs to be inverted before being included in the sort order:\n\n``` javascript\nsortProperties: ['weight:desc', 'name'],\n```\n\nBasically the `Sortable` mixin has the same behaviour as before (related to `sortProperties` and `sortAscending`) except that now you can append one or more property name(s) in `sortProperties` array with a `:desc` so that for that property(ies) the order function will work the other way around.\n", "B_clean_body": ["thi", "non", "break", "chang", "that", "would", "allow", "one", "specifi", "differ", "sort", "order", "per", "properti", "sortproperti", "sort", "properti", "array", "let", "'s", "say", "you", "have", "array", "user", "each", "who", "ha", "weight", "weight", "same", "user", "so", "then", "one", "would", "want", "order", "use", "name", "logic", "user", "most", "weight", "top", "list", "thi", "featur", "it", "'s", "possibl", "now", "by", "ad", "desc", "at", "end", "properti", "which", "need", "invert", "befor", "be", "includ", "sort", "order", "javascript", "sortproperti", "sort", "properti", "'weight", "desc", "'name", "basic", "sortabl", "mixin", "ha", "same", "behaviour", "as", "befor", "relat", "sortproperti", "sort", "properti", "sortascend", "sort", "ascend", "except", "that", "now", "you", "append", "one", "or", "more", "properti", "name", "sortproperti", "sort", "properti", "array", "desc", "so", "that", "that", "properti", "i", "order", "function", "will", "work", "other", "way", "around"], "title_sim": [0.36001810946380675], "body_sim": [0.10348631546223536], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.8160145410965349, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 301}, {"A_title": "[GLIMMER] Add component name to classNameBindings assertion.", "A_clean_title": ["glimmer", "add", "compon", "name", "classnamebind", "class", "name", "bind", "assert"], "B_title": "[Glimmer 2] Implement mut and readonly helpers", "B_clean_title": ["glimmer", "implement", "mut", "readonli", "helper"], "A_body": "", "A_clean_body": [], "B_body": "Also, implement support for the [INVOKE] symbol in closure actions.\n\nThis also enables (partial) \"reference pooling\" on components \u2013 when doing rending a `{{foo}}` in the `{{foo-bar}}` layout, it first checks if `{{foo}}` is an arg passed from the outside (`{{foo-bar foo=...}}`), and if so, it tries to reuse the same reference instead of making a newone. This should reduce the total number of references created and also reduce the number of `value()` computation as the same reference can be reused across multiple curlies.\n\nThis also allows Glimmer to better optimize things \u2013 for example, if the component is invoked with literals (`{{foo-bar foo=true}}`) and `foo` is then used in a conditional in its layout (`{{#if foo}}...`), Glimmer will be now able to see that `foo` is a const reference and optimize out the updating step. This works recursively as well \u2013 if `foo-bar` then passes the same property down (`{{bar-baz bar=foo}}`), we now propagate the same reference all the way down.\n\nThanks @Joelkang for doing most of the work on this one in #13541!\n\nCloses #13541\n", "B_clean_body": ["also", "implement", "support", "invok", "symbol", "closur", "action", "thi", "also", "enabl", "partial", "refer", "pool", "compon", "when", "do", "rend", "foo", "foo", "bar", "layout", "it", "first", "check", "foo", "arg", "pass", "outsid", "foo", "bar", "foo=", "so", "it", "tri", "reus", "same", "refer", "instead", "make", "newon", "thi", "reduc", "total", "number", "refer", "creat", "also", "reduc", "number", "valu", "comput", "as", "same", "refer", "reus", "across", "multipl", "curli", "thi", "also", "allow", "glimmer", "better", "optim", "thing", "exampl", "compon", "invok", "liter", "foo", "bar", "foo=tru", "foo", "then", "use", "condit", "it", "layout", "foo", "glimmer", "will", "now", "abl", "see", "that", "foo", "const", "refer", "optim", "out", "updat", "step", "thi", "work", "recurs", "as", "well", "foo", "bar", "then", "pass", "same", "properti", "down", "bar", "baz", "bar=foo", "we", "now", "propag", "same", "refer", "all", "way", "down", "thank", "joelkang", "do", "most", "work", "thi", "one", "13541", "close", "13541"], "title_sim": [0.3281242213532377], "body_sim": [0.0], "file_list_sim": 0.038461538461538464, "overlap_files_len": 1, "code_sim": [0.04612292693030768, 0.17574992291387773], "location_sim": [0.0112, 0.16091954022988506], "pattern": 0, "time": 0}, {"A_title": "[FEATURE ember-eager-url-update] non a-tags work", "A_clean_title": ["featur", "ember", "eager", "url", "updat", "non", "tag", "work"], "B_title": "[BUGFIX] Changing eager routing on link-to without href", "B_clean_title": ["bugfix", "chang", "eager", "rout", "link", "without", "href"], "A_body": "Eager url updating was breaking for non a tags \nsince their hrefs weren't being generated.\n\nThanks @jonnii for pointing this out\n", "A_clean_body": ["eager", "url", "updat", "wa", "break", "non", "tag", "sinc", "their", "href", "were", "n't", "be", "gener", "thank", "jonnii", "point", "thi", "out"], "B_body": "When eager routing occurs on a {{link-to}} with a tagName\nspecified the router attemps to find an href attribute\nand fails.\n", "B_clean_body": ["when", "eager", "rout", "occur", "link", "tagnam", "tag", "name", "specifi", "router", "attemp", "find", "href", "attribut", "fail"], "title_sim": [0.07881687678579131], "body_sim": [0.34489033974140704], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.5534389756050575, 0.5534389756050575], "location_sim": [0.6792452830188679, 0.6792452830188679], "pattern": 0, "time": 0}, {"A_title": "[BUGFIX Release] Special case `{{#with}}` for `isTruthy`", "A_clean_title": ["bugfix", "releas", "special", "case", "istruthi", "truthi"], "B_title": "Revert \"with-tests\"", "B_clean_title": ["revert", "test"], "A_body": "Should resepect `isTruthy` on objects.\n", "A_clean_body": ["resepect", "istruthi", "truthi", "object"], "B_body": "Reverts emberjs/ember.js#12919\n", "B_clean_body": ["revert", "js", "emberj", "ember", "12919"], "title_sim": [0.018808872179470824], "body_sim": [0.005314244116802083], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 0}, {"A_title": "add 1.12 to jquery regexp matches", "A_clean_title": ["add", "12", "jqueri", "regexp", "match"], "B_title": "[BUGFIX release-1-13] Remove jQuery version assertion.", "B_clean_title": ["bugfix", "releas", "13", "remov", "jqueri", "queri", "version", "assert"], "A_body": "due to http://blog.jquery.com/2016/01/08/jquery-2-2-and-1-12-released/\n", "A_clean_body": ["due", "http", "12", "jqueri", "releas", "blog", "com", "2016", "01", "08", "jqueri"], "B_body": "", "B_clean_body": [], "title_sim": [0.33605199328622], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.5652173913043478, 0.7647058823529411], "pattern": 0, "time": 1}, {"A_title": "[BUGFIX beta] Fix assertion to make sure doesn't affect old CP syntax", "A_clean_title": ["bugfix", "beta", "fix", "assert", "make", "sure", "n't", "affect", "old", "cp", "syntax"], "B_title": "[BUGFIX beta] Warn rather than raise readOnly CPs", "B_clean_title": ["bugfix", "beta", "warn", "rather", "than", "rais", "readonli", "read", "onli", "cp", "ps"], "A_body": "In #10761 I introduced an assertion was raised on `readOnly` when the function has a setter. \nWhile this is a reasonable check, it is a breaking change for people using the old CP syntax. \n\nThis assertion is only thrown if the getter and setter functions are different, so won't affect existing users.\n\n/cc @tomdale \n", "A_clean_body": ["10761", "introduc", "assert", "wa", "rais", "readonli", "read", "onli", "when", "function", "ha", "setter", "while", "thi", "reason", "check", "it", "break", "chang", "peopl", "old", "cp", "syntax", "thi", "assert", "onli", "thrown", "getter", "setter", "function", "are", "differ", "so", "wo", "n't", "affect", "exist", "user", "cc", "tomdal"], "B_body": "Previously, CPs with setters would raise an exception if they were\nmarked as readOnly. This change broke Semantic Versioning because\nit caused working app code to break.\n\nFor example, if you had a computed property that was read-only, but you\nhappened to include a second `value` argument out of habit or\nconvention, this change would cause your previously-functioning app to\nbreak:\n\n```\ncomputed(function(key, value) {\n  // value is unused\n}).readOnly()\n```\n\nThe above code example will cause an exception to be raised.\n\nIn Ember 2.0 we can change this deprecation back to an assertion.\n", "B_clean_body": ["previous", "cp", "ps", "setter", "would", "rais", "except", "they", "were", "mark", "as", "readonli", "read", "onli", "thi", "chang", "broke", "semant", "version", "becaus", "it", "caus", "work", "app", "code", "break", "exampl", "you", "had", "comput", "properti", "that", "wa", "read", "onli", "but", "you", "happen", "includ", "second", "valu", "argument", "out", "habit", "or", "convent", "thi", "chang", "would", "caus", "your", "previous", "function", "app", "break", "comput", "function", "key", "valu", "valu", "unus", "readonli", "read", "onli", "abov", "code", "exampl", "will", "caus", "except", "rais", "ember", "we", "chang", "thi", "deprec", "back", "assert"], "title_sim": [0.4013784621499589], "body_sim": [0.4103228344202495], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.07943108256598536, 0.07943108256598536], "location_sim": [1.0, 1.0], "pattern": -1, "time": 0}, {"A_title": "Ember.isArray will not detect plain object with length property", "A_clean_title": ["ember", "isarray", "array", "will", "not", "detect", "plain", "object", "length", "properti"], "B_title": "[BUGFIX beta] Align Em.isArray behavior with Array.isArray for FileList type", "B_clean_title": ["bugfix", "beta", "align", "em", "isarray", "array", "behavior", "array", "isarray", "array", "filelist", "file", "list", "type"], "A_body": "To fix https://github.com/emberjs/ember.js/issues/12738 and https://github.com/emberjs/ember.js/issues/12688\n\nThis is a backwards incompatible change (if someone was relying on this test returning true for an object that happened to have a length property), but the old behaviour is surprising and out of line with native Array.isArray implementations, lodash.isArray and so on.\n", "A_clean_body": ["fix", "http", "github", "com", "emberj", "ember", "js", "issu", "12738", "http", "github", "com", "emberj", "ember", "js", "issu", "12688", "thi", "backward", "incompat", "chang", "someon", "wa", "reli", "thi", "test", "return", "true", "object", "that", "happen", "have", "length", "properti", "but", "old", "behaviour", "surpris", "out", "line", "nativ", "array", "isarray", "array", "implement", "lodash", "isarray", "array", "so"], "B_body": "`FileList` type is currently detected as `array`, however it doesn't provide it's methods like `forEach` or `map`.\nAlso `Array.isArray` doesn't consider `FileType` as an `array`.\n\nThis PR unifies this behavior and fixes #12688.\n", "B_clean_body": ["filelist", "file", "list", "type", "current", "detect", "as", "array", "howev", "it", "n't", "provid", "it", "'s", "method", "like", "foreach", "each", "or", "map", "also", "array", "isarray", "array", "n't", "consid", "filetyp", "file", "type", "as", "array", "thi", "pr", "unifi", "thi", "behavior", "fix", "12688"], "title_sim": [0.46664739600866584], "body_sim": [0.4293134435894192], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.010147201189312113, 0.017734939043702668], "location_sim": [0.2638888888888889, 0.35185185185185186], "pattern": 1, "time": 16}, {"A_title": "Calling router.map now appends the routes instead of replacing them", "A_clean_title": ["call", "router", "map", "now", "append", "rout", "instead", "replac", "them"], "B_title": "Allow multiple calls to `App.Router.map`", "B_clean_title": ["allow", "multipl", "call", "app", "router", "map"], "A_body": "I would have added a test but there did not seem to be any route\ngeneration tests.\n", "A_clean_body": ["would", "have", "ad", "test", "but", "there", "did", "not", "seem", "ani", "rout", "gener", "test"], "B_body": "I've found a need to be able to add new routes at runtime (one of my apps allows plugins). Upon looking through docs and API, I couldn't find a way to do this so I went to source and still didn't find anything.\n\nAttached is code that allows you to call `App.Router.map` multiple times without overwriting the previous behavior.\n\nI've written two tests for it because the change is minor. I'm happy to write additional tests or receive guidance from the team.\n", "B_clean_body": ["'ve", "found", "need", "abl", "add", "new", "rout", "at", "runtim", "one", "my", "app", "allow", "plugin", "upon", "look", "through", "doc", "api", "could", "n't", "find", "way", "thi", "so", "went", "sourc", "still", "did", "n't", "find", "anyth", "attach", "code", "that", "allow", "you", "call", "app", "router", "map", "multipl", "time", "without", "overwrit", "previou", "behavior", "'ve", "written", "two", "test", "it", "becaus", "chang", "minor", "'m", "happi", "write", "addit", "test", "or", "receiv", "guidanc", "team"], "title_sim": [0.31715140602256875], "body_sim": [0.31362847478228606], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.9485349393215838, 0.9485349393215838], "location_sim": [0.6936416184971098, 0.6936416184971098], "pattern": 0, "time": 69}, {"A_title": "Fix Firefox <= 10 missing outerHTML", "A_clean_title": ["fix", "firefox", "10", "miss", "outerhtml", "outer", "html"], "B_title": "fallback for browsers that don't support domElement.outerHTML", "B_clean_title": ["fallback", "browser", "that", "n't", "support", "domel", "outerhtml", "dom", "element", "outer", "html"], "A_body": "In Firefox <= 10 there is no outerHTML, as a workaround we wrap the element with a div and return the wrapped elements innerHTML.\n\nIt looks ugly to me and someone with more insight might find a better solution, but it works for me.\n\nThis fixes https://github.com/emberjs/ember.js/issues/1993 for me\n", "A_clean_body": ["firefox", "10", "there", "no", "outerhtml", "outer", "html", "as", "workaround", "we", "wrap", "element", "div", "return", "wrap", "element", "innerhtml", "inner", "html", "it", "look", "ugli", "me", "someon", "more", "insight", "might", "find", "better", "solut", "but", "it", "work", "me", "thi", "fix", "http", "github", "com", "emberj", "ember", "js", "issu", "1993", "me"], "B_body": "If you look at the element.outerHTML page below, `outer.outerHTML` is available in most browsers, just not Firefox versions < 11. Even old IE has it. \n\nAlso let me know if I can improve the test. I tried deleting the `outerHTML` property from the element, but that raised an exception. I tried also stubbing `XMLSerializer` by redefining it on `window`, which also threw an exception.\n\nI know that the string I provide in the test is not **really** a DOM element, but I'm stuck on how to stub this out in a better way. Happy for suggestions.\n\nResources:\n\nhttp://stackoverflow.com/questions/1700870/how-do-i-do-outerhtml-in-firefox\nhttps://developer.mozilla.org/en-US/docs/XMLSerializer\nhttps://developer.mozilla.org/en-US/docs/DOM/element.outerHTML\n\nEDIT: http://jsfiddle.net/RCLd7/14/ <- This is the updated version of ember+handlebars from the original issue that I tested in Firefox 10.\n\nfixes emberjs/ember.js#1952\n", "B_clean_body": ["you", "look", "at", "element", "outerhtml", "outer", "html", "page", "below", "outer", "outerhtml", "outer", "html", "avail", "most", "browser", "just", "not", "firefox", "version", "11", "even", "old", "ie", "ha", "it", "also", "let", "me", "know", "improv", "test", "tri", "delet", "outerhtml", "outer", "html", "properti", "element", "but", "that", "rais", "except", "tri", "also", "stub", "xmlserial", "xml", "serial", "by", "redefin", "it", "window", "which", "also", "threw", "except", "know", "that", "string", "provid", "test", "not", "**really**", "dom", "element", "but", "'m", "stuck", "how", "stub", "thi", "out", "better", "way", "happi", "suggest", "resourc", "http", "outerhtml", "firefox", "stackoverflow", "com", "question", "1700870", "how", "http", "mozilla", "us", "doc", "xmlserial", "develop", "org", "en", "xml", "serial", "http", "mozilla", "outerhtml", "develop", "org", "en", "us", "doc", "dom", "element", "outer", "html", "edit", "http", "jsfiddl", "net", "rcld7", "14", "rc", "ld7", "thi", "updat", "version", "ember+handlebar", "origin", "issu", "that", "test", "firefox", "10", "fix", "js", "emberj", "ember", "1952"], "title_sim": [0.21771359843960436], "body_sim": [0.6352429351129975], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.500148947312821, 0.23213034093055765], "location_sim": [0.5357142857142857, 1.0], "pattern": -1, "time": 0}, {"A_title": "[WIP] Glimmer tags integration", "A_clean_title": ["wip", "glimmer", "tag", "integr"], "B_title": "Bump glimmer", "B_clean_title": ["bump", "glimmer"], "A_body": "First-pass implementation of integrating [Glimmer's validators system](https://github.com/tildeio/glimmer/blob/master/guides/05-validators.md)\n\n/cc @krisselden \n", "A_clean_body": ["first", "pass", "implement", "integr", "glimmer", "'s", "valid", "system", "http", "valid", "md", "github", "com", "tildeio", "glimmer", "blob", "master", "guid", "05", "cc", "krisselden"], "B_body": "", "B_clean_body": [], "title_sim": [0.3532624332365036], "body_sim": [0.0], "file_list_sim": 0.047619047619047616, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.017587939698492462, 1.0], "pattern": 0, "time": 1}, {"A_title": "Ember.ajax", "A_clean_title": ["ember", "ajax"], "B_title": "Add ember-http package", "B_clean_title": ["add", "ember", "http", "packag"], "A_body": "I did talk with @wycats, and I had an ok to implement this.\n\nIf this PR is usefull, I still have some doubts, like:\n- Is the package `jquery-extensions` apropriated ?\n- The ajax request isn't just a RSVP.Deferred, is actually a Ember.Object with Ember.Evented and Ember.DeferredMixin, so in some moment the destroy must be called?\n\nThanks in advance.\n", "A_clean_body": ["did", "talk", "wycat", "had", "ok", "implement", "thi", "thi", "pr", "useful", "still", "have", "some", "doubt", "like", "packag", "jqueri", "extens", "apropri", "ajax", "request", "n't", "just", "rsvp", "defer", "actual", "ember", "object", "ember", "event", "ember", "deferredmixin", "defer", "mixin", "so", "some", "moment", "destroy", "must", "call", "thank", "advanc"], "B_body": "", "B_clean_body": [], "title_sim": [0.49023485987239906], "body_sim": [0.0], "file_list_sim": 0.09090909090909091, "overlap_files_len": 1, "code_sim": [0.5862874191101383, 0.0], "location_sim": [0.02572347266881029, 1.0], "pattern": 0, "time": 35}, {"A_title": "Fix documentation for {{each}} and {{with}} helpers", "A_clean_title": ["fix", "document", "each", "helper"], "B_title": "[DOC] Use `as |obj|` syntax for #each examples", "B_clean_title": ["doc", "use", "as", "|obj|", "syntax", "each", "exampl"], "A_body": "Addresses https://github.com/emberjs/ember.js/issues/10994.\n## {{each}} helper\n\nRestored the original documentation from 1.11 with the following changes:\n- Updated to block params syntax (e.g. replace `{{#each post in posts}}` with `{{#each posts as |post|}}`\n- Removed mentions of `ObjectController` and replace with `Controller`.\n- Replaced `{{crossLink}}` helpers with links to relevant documentation.\n## {{with}} helper\n- Updated to block params syntax\n- Expanded the example for the section about the `controller` option\n## Comment about documentation of parameters\n\nI still think in both cases the description of the parameters are unclear and I think this holds for all helpers. Like the `{{each}}` helper documents the parameters `name` and `path` but it's not clear how they're used and what they represent.\n\nInstead, would it make sense to document the syntax of the helpers with a sort of grammar? I like how MDN documents the formal syntax of CSS rules. For instance, the formal syntax of the `box-shadow` rule is as follows (https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow#Formal_syntax):\n\n```\nnone | [inset? && [ <offset-x> <offset-y> <blur-radius>? <spread-radius>? <color>? ] ]#\n```\n\nUsing this for helpers you could have something as follows for `{{each}}`:\n\n```\n{{each <array> [itemViewClass=\"<item-view-class>\"]? [emptyViewClass=\"<empty-view-class>\"]? [itemController=\"<item-controller>\"]? as |<item>|}}\n```\n\nIn any case, correct me if I'm wrong but I don't think that in their current format, the documentation of the parameters are particularly useful to most of the Ember.js users.\n", "A_clean_body": ["address", "http", "github", "com", "emberj", "ember", "js", "issu", "10994", "each", "helper", "restor", "origin", "document", "11", "follow", "chang", "updat", "block", "param", "syntax", "replac", "each", "post", "post", "each", "post", "as", "|post|", "remov", "mention", "objectcontrol", "object", "control", "replac", "control", "replac", "crosslink", "cross", "link", "helper", "link", "relev", "document", "helper", "updat", "block", "param", "syntax", "expand", "exampl", "section", "about", "control", "option", "comment", "about", "document", "paramet", "still", "think", "both", "case", "descript", "paramet", "are", "unclear", "think", "thi", "hold", "all", "helper", "like", "each", "helper", "document", "paramet", "name", "path", "but", "it", "'s", "not", "clear", "how", "they", "'re", "use", "what", "they", "repres", "instead", "would", "it", "make", "sens", "document", "syntax", "helper", "sort", "grammar", "like", "how", "mdn", "document", "formal", "syntax", "css", "rule", "instanc", "formal", "syntax", "box", "shadow", "rule", "as", "follow", "http", "shadow", "mozilla", "us", "doc", "web", "css", "box", "develop", "org", "en", "formal", "syntax", "none", "inset", "offset", "offset", "blur", "radiu", "spread", "radiu", "color", "thi", "helper", "you", "could", "have", "someth", "as", "follow", "each", "each", "array", "itemviewclass=", "item", "view", "class=", "item", "view", "class", "emptyviewclass=", "empti", "view", "class=", "empti", "view", "class", "itemcontroller=", "item", "controller=", "item", "control", "as", "item", "ani", "case", "correct", "me", "'m", "wrong", "but", "n't", "think", "that", "their", "current", "format", "document", "paramet", "are", "particularli", "use", "most", "ember", "js", "user"], "B_body": "The parameters still needs some work though, as well as the helper itself since it says that it requires the `{{#each item in list}}` form.\n", "B_clean_body": ["paramet", "still", "need", "some", "work", "though", "as", "well", "as", "helper", "itself", "sinc", "it", "say", "that", "it", "requir", "each", "item", "list", "form"], "title_sim": [0.09243153210046604], "body_sim": [0.4628595171058596], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.634636064812278, 0.6576157406362881], "location_sim": [0.8852459016393442, 1.0], "pattern": 0, "time": 13}, {"A_title": "enhance custom location API documentation ", "A_clean_title": ["enhanc", "custom", "locat", "api", "document"], "B_title": "LocationApi:: Added notes about how to extend", "B_clean_title": ["locationapi", "locat", "api", "ad", "note", "about", "how", "extend"], "A_body": "didn't  find anything on how to register cutom location implementation for router.\n\nNot sure should i use `ember-cli` code examples with `export default {` instead of `Em.Application.initializer({`\n", "A_clean_body": ["did", "n't", "find", "anyth", "how", "regist", "cutom", "locat", "implement", "router", "not", "sure", "use", "ember", "cli", "code", "exampl", "export", "default", "instead", "em", "applic", "initi"], "B_body": "Put some notes about how ember scans /app/locations/\\* and an example of how to extend to make a custom location.\n", "B_clean_body": ["put", "some", "note", "about", "how", "ember", "scan", "app", "locat", "exampl", "how", "extend", "make", "custom", "locat"], "title_sim": [0.5081389193671129], "body_sim": [0.47394944613939793], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.33517051792915487, 0.33517051792915487], "location_sim": [1.0, 1.0], "pattern": 0, "time": 119}, {"A_title": "Fix the jQuery patch code for ember-testing click in Firefox.", "A_clean_title": ["fix", "jqueri", "queri", "patch", "code", "ember", "test", "click", "firefox"], "B_title": "Change ember click patch assertion to a warning", "B_clean_title": ["chang", "ember", "click", "patch", "assert", "warn"], "A_body": "The first problem was that Firefox was not firing all the expected events on checkboxes that were not in the DOM, so we have to make sure the checkboxes are appended to the body before testing them. The second problem was that Firefox fires change/click events on checkboxes in a [different order than everybody else](https://bugzilla.mozilla.org/show_bug.cgi?id=843554), so we can't make the more exact assertion about events fired without doing browser sniffing or more in depth bug sniffing, which didn't quite seem worth it.\n", "A_clean_body": ["first", "problem", "wa", "that", "firefox", "wa", "not", "fire", "all", "expect", "event", "checkbox", "that", "were", "not", "dom", "so", "we", "have", "make", "sure", "checkbox", "are", "append", "bodi", "befor", "test", "them", "second", "problem", "wa", "that", "firefox", "fire", "chang", "click", "event", "checkbox", "differ", "order", "than", "everybodi", "http", "mozilla", "cgi", "bugzilla", "bug", "org", "show", "id=843554", "so", "we", "ca", "n't", "make", "more", "exact", "assert", "about", "event", "fire", "without", "do", "browser", "snif", "or", "more", "depth", "bug", "snif", "which", "did", "n't", "quit", "seem", "worth", "it"], "B_body": "This is a sort-of fix for #2964. The assertion has been changed into a warning, so that application tests can continue to work on Firefox.\n", "B_clean_body": ["thi", "sort", "fix", "2964", "assert", "ha", "been", "chang", "into", "warn", "so", "that", "applic", "test", "continu", "work", "firefox"], "title_sim": [0.22658298754044542], "body_sim": [0.40919362886215666], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.1225344072108348, 0.1919090473247968], "location_sim": [0.8421052631578947, 1.0], "pattern": 0, "time": 0}, {"A_title": "[glimmer2] fix each key collision detection", "A_clean_title": ["glimmer2", "fix", "each", "key", "collis", "detect"], "B_title": "[GLIMMER2] Fix ember-glimmer iterators when handling dupes in ({{#each}})", "B_clean_title": ["glimmer2", "fix", "ember", "glimmer", "iter", "when", "handl", "dupe", "each"], "A_body": "When using `{{#each things key=\"key\" as |thing|}}`, glimmer2 integration\ndid not update the DOM correctly when `things` was an array with objects\nthat shared the same `key` value. For example:\n\n``` javascript\nthis.set('data', [\n  {\n    name: 'Yehuda' }\n  },\n  {\n    name: 'Jenn'\n  },\n  {\n    name: 'Yehuda'\n  }\n]);\n```\n\nand the following template:\n\n``` handlebars\n{{#each data key=\"name\" as |person|}}\n  {{person.name}}\n{{/each}}\n```\n\nIn the above example, we want each item in the list to render, even though two objects have the same\nvalue for the key (Notice there are two \"Yehuda\"'s above.\n\nAs the iterator goes through the array, it will cache value of the `key` `name`.\nIn order to make sure the cache updates correctly, we assign it a unique key.\n", "A_clean_body": ["when", "each", "thing", "key=", "key", "as", "|thing|", "glimmer2", "integr", "did", "not", "updat", "dom", "correctli", "when", "thing", "wa", "array", "object", "that", "share", "same", "key", "valu", "exampl", "javascript", "thi", "set", "'data", "name", "'yehuda", "name", "'jenn'", "name", "'yehuda'", "follow", "templat", "handlebar", "each", "data", "key=", "name", "as", "|person|", "person", "name", "each", "abov", "exampl", "we", "want", "each", "item", "list", "render", "even", "though", "two", "object", "have", "same", "valu", "key", "notic", "there", "are", "two", "yehuda", "'s", "abov", "as", "iter", "goe", "through", "array", "it", "will", "cach", "valu", "key", "name", "order", "make", "sure", "cach", "updat", "correctli", "we", "assign", "it", "uniqu", "key"], "B_body": "The purpose of this PR is to fix array iteration via `{{#each}}` in Glimmer2 when the iteratee contains duplicate items. The following tests from `ember-glimmer/tests/integration/syntax/each-test.js` are now passing for Glimmer2:\n- it can render duplicate primitive items\n- it can render duplicate objects\n\nKey changes:\n- The order that we check objects for array-like-ness changed such that we look for Emberish arrays before plain JS arrays. Emberish arrays seemed to be falling into the plain JS array check -- which seems wrong.\n- `ArrayIterator` and `EmberArrayIterator` now keep track of the keys they've seen, and when a duplicate key is seen it creates a composite key using a GUID of the array as a separator. \n", "B_clean_body": ["purpos", "thi", "pr", "fix", "array", "iter", "via", "each", "glimmer2", "when", "iterate", "contain", "duplic", "item", "follow", "test", "ember", "glimmer", "test", "integr", "syntax", "each", "test", "js", "are", "now", "pass", "glimmer2", "it", "render", "duplic", "primit", "item", "it", "render", "duplic", "object", "key", "chang", "order", "that", "we", "check", "object", "array", "like", "ness", "chang", "such", "that", "we", "look", "emberish", "array", "befor", "plain", "js", "array", "emberish", "array", "seem", "fall", "into", "plain", "js", "array", "check", "which", "seem", "wrong", "arrayiter", "array", "iter", "emberarrayiter", "ember", "array", "iter", "now", "keep", "track", "key", "they", "'ve", "seen", "when", "duplic", "key", "seen", "it", "creat", "composit", "key", "guid", "array", "as", "separ"], "title_sim": [0.6104455335260539], "body_sim": [0.605662379791138], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.1917592471096453, 0.1917592471096453], "location_sim": [0.5766423357664233, 0.5766423357664233], "pattern": 0, "time": 0}, {"A_title": "Router can not render View with embedded Template (non-externalized)", "A_clean_title": ["router", "not", "render", "view", "embed", "templat", "non", "extern"], "B_title": "Allow Route to render a View correctly when the View's Template is explicitly set.", "B_clean_title": ["allow", "rout", "render", "view", "correctli", "when", "view", "'s", "templat", "explicitli", "set"], "A_body": "I have a simple View that I would like to render when Route is executed. Apparently Route implementation of render function always try to set a particular template into the view, ignoring if:\n- View already has a template\n- Template which is trying to be set is not there (undefined)\n\nThis small fix checking if template is there and if not then it will not try to manipulate template parameter of the view.\n\nStackoverflow question - http://stackoverflow.com/questions/15210975/view-with-embedded-template-cant-be-rendered\n\nJSFiddle: http://jsfiddle.net/nL5vf/\n", "A_clean_body": ["have", "simpl", "view", "that", "would", "like", "render", "when", "rout", "execut", "appar", "rout", "implement", "render", "function", "alway", "tri", "set", "particular", "templat", "into", "view", "ignor", "view", "alreadi", "ha", "templat", "templat", "which", "tri", "set", "not", "there", "undefin", "thi", "small", "fix", "check", "templat", "there", "not", "then", "it", "will", "not", "tri", "manipul", "templat", "paramet", "view", "stackoverflow", "question", "http", "embed", "templat", "cant", "render", "stackoverflow", "com", "question", "15210975", "view", "jsfiddl", "js", "fiddl", "http", "jsfiddl", "net", "nl5vf", "l5vf"], "B_body": "If `template` is explicitly set on an `Ember.View`, I would expect the view to render with that template (as it would normally). However, a `template` explicitly set on an `Ember.View` that is obtained from the container in `Ember.Route.render` is ignored and the container is asked to provide the corresponding template. For view's that have simple one line templates (i.e. `template: Em.Handlebars.compile('My name is: {{name}}')`) it is desirable, from my perspective at least, that one should still be able to specify a `template` directly on a view and not be forced to use `defaultTemplate` or a separate file along with `templateName`.\n", "B_clean_body": ["templat", "explicitli", "set", "ember", "view", "would", "expect", "view", "render", "that", "templat", "as", "it", "would", "normal", "howev", "templat", "explicitli", "set", "ember", "view", "that", "obtain", "contain", "ember", "rout", "render", "ignor", "contain", "ask", "provid", "correspond", "templat", "view", "'s", "that", "have", "simpl", "one", "line", "templat", "templat", "em", "handlebar", "compil", "'mi", "name", "name", "it", "desir", "my", "perspect", "at", "least", "that", "one", "still", "abl", "specifi", "templat", "directli", "view", "not", "forc", "use", "defaulttempl", "default", "templat", "or", "separ", "file", "along", "templatenam", "templat", "name"], "title_sim": [0.6454760833784579], "body_sim": [0.8187818775539193], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.06958082483945335, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 22}, {"A_title": "{{action}} should also prevent default", "A_clean_title": ["action", "also", "prevent", "default"], "B_title": "Call preventDefault and stopPropagation on events handled through {{action}}", "B_clean_title": ["call", "preventdefault", "prevent", "default", "stoppropag", "stop", "propag", "event", "handl", "through", "action"], "A_body": "In order to make it work for <a /> elements, for example. As discussed in aaa22a7ced26ec4cc079818b6a8991baed51d77a /cc @wycats\n", "A_clean_body": ["order", "make", "it", "work", "element", "exampl", "as", "discuss", "aaa22a7ced26ec4cc079818b6a8991baed51d77a", "cc", "wycat"], "B_body": "The idea is that we'd like to be able to use arbitrary view methods as\naction handlers. As it is, they need to `return false` or call\n`e.preventDefault(); e.stopPropagation();` to be usable as handlers.\n\nFor the (presumably few) cases where propagation or default handling is\ndesired, we can still register our own handlers/delegates with jQuery,\nor use event handling on views or with eventManagers, which does not\nhave automatic preventDefault/stopPropagation.\n\n---\n\nI realize this change potentially breaks compatibility, so I'm targeting it at master, not 0-9-stable.\n\nWhat do you guys think?\n\nAlso, can someone with a larger Ember app please test this and report back whether it breaks things?\n\nCc @ebryn, who introduced the test I'm changing.\n\nIRC discussion:\n\n```\n[9:29pm] joliss: I'm bothered by the fact that all of my {{action}} handlers have to call `e.preventDefault(); e.stopPropagation()`. It means I can't just call arbitrary methods on my views as actions. Is there anything that's fundamentally stopping us from changing it to do this automatically?\n[9:31pm] michaellatta: joliss: returning false from click events seems to be sufficient in the experimenting I have done to date.\n[9:31pm] joliss: michaellatta: Right, unless they throw an exception though. And it's still the same problem, with fewer characters.\n[9:39pm] joliss: Hm, there used to be an automatic stopProgagation, but dmarcotte changed it in 6e2d3515. I'm not sure why.\n   (Note: This actually seems to be a different one, relating to event methods like `doubleClick`, not action handlers.)\n[9:42pm] knassar: joliss: i am a bit bothered by the same thing\n[9:43pm] peterwagenet: joliss: automatic stop propagation wasn't well implemented\n[9:43pm] knassar: seems like the 90% case is that you don't want the events to propagate\u2026\n[9:43pm] peterwagenet: if anyone has a solution for normalizing that seems fine\n[9:43pm] joliss: peterwagenet: Can you elaborate what the issue was?\n[9:44pm] peterwagenet: inconsistent\n[9:44pm] joliss: Looking at the diff, I'm just thinking preventDefault should be called as well, and it should be called *before* calling the handler.\n[9:45pm] joliss: Hm, you mean there were cases (other events?) where it *didn't* stop propagation?\n[9:57pm] endash: man there are certainly states where I'd like to ensure the end of propogation.\n[10:32pm] joliss: peterwagenet: ping; before I submit a pull request, do you happen to remember what the issue with stopping event propagation was?\n[10:33pm] peterwagenet: we weren't doing it across the board\n[10:33pm] peterwagenet: so it only worked some places\n[10:33pm] peterwagenet: and not others\n```\n", "B_clean_body": ["idea", "that", "we", "'d", "like", "abl", "use", "arbitrari", "view", "method", "as", "action", "handler", "as", "it", "they", "need", "return", "fals", "or", "call", "preventdefault", "prevent", "default", "stoppropag", "stop", "propag", "usabl", "as", "handler", "presum", "few", "case", "where", "propag", "or", "default", "handl", "desir", "we", "still", "regist", "our", "own", "handler", "deleg", "jqueri", "queri", "or", "use", "event", "handl", "view", "or", "eventmanag", "event", "manag", "which", "not", "have", "automat", "preventdefault", "stoppropag", "prevent", "default", "stop", "propag", "realiz", "thi", "chang", "potenti", "break", "compat", "so", "'m", "target", "it", "at", "master", "not", "stabl", "what", "you", "guy", "think", "also", "someon", "larger", "ember", "app", "pleas", "test", "thi", "report", "back", "whether", "it", "break", "thing", "cc", "ebryn", "who", "introduc", "test", "'m", "chang", "irc", "discuss", "9:29pm", "joliss", "'m", "bother", "by", "fact", "that", "all", "my", "action", "handler", "have", "call", "preventdefault", "prevent", "default", "stoppropag", "stop", "propag", "it", "mean", "ca", "n't", "just", "call", "arbitrari", "method", "my", "view", "as", "action", "there", "anyth", "that", "'s", "fundament", "stop", "us", "chang", "it", "thi", "automat", "9:31pm", "michaellatta", "joliss", "return", "fals", "click", "event", "seem", "suffici", "experi", "have", "done", "date", "9:31pm", "joliss", "michaellatta", "right", "unless", "they", "throw", "except", "though", "it", "'s", "still", "same", "problem", "fewer", "charact", "9:39pm", "joliss", "hm", "there", "use", "automat", "stopprogag", "stop", "progag", "but", "dmarcott", "chang", "it", "6e2d3515", "'m", "not", "sure", "whi", "note", "thi", "actual", "seem", "differ", "one", "relat", "event", "method", "like", "doubleclick", "doubl", "click", "not", "action", "handler", "9:42pm", "knassar", "joliss", "am", "bit", "bother", "by", "same", "thing", "9:43pm", "peterwagenet", "joliss", "automat", "stop", "propag", "wa", "n't", "well", "implement", "9:43pm", "knassar", "seem", "like", "90", "case", "that", "you", "n't", "want", "event", "propagate\u2026", "9:43pm", "peterwagenet", "anyon", "ha", "solut", "normal", "that", "seem", "fine", "9:43pm", "joliss", "peterwagenet", "you", "elabor", "what", "issu", "wa", "9:44pm", "peterwagenet", "inconsist", "9:44pm", "joliss", "look", "at", "diff", "'m", "just", "think", "preventdefault", "prevent", "default", "call", "as", "well", "it", "call", "*before*", "call", "handler", "9:45pm", "joliss", "hm", "you", "mean", "there", "were", "case", "other", "event", "where", "it", "*didn't*", "stop", "propag", "9:57pm", "endash", "man", "there", "are", "certainli", "state", "where", "'d", "like", "ensur", "end", "propog", "10:32pm", "joliss", "peterwagenet", "ping", "befor", "submit", "pull", "request", "you", "happen", "rememb", "what", "issu", "stop", "event", "propag", "wa", "10:33pm", "peterwagenet", "we", "were", "n't", "do", "it", "across", "board", "10:33pm", "peterwagenet", "so", "it", "onli", "work", "some", "place", "10:33pm", "peterwagenet", "not", "other"], "title_sim": [0.6881756956749482], "body_sim": [0.2794549224280794], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.5385567231132664, 0.9618852673385239], "location_sim": [0.2978723404255319, 0.6666666666666666], "pattern": 0, "time": 15}, {"A_title": "[BUGFIX] When selecting controller for view prioritize controllerName over controller matching template or route name", "A_clean_title": ["bugfix", "when", "select", "control", "view", "priorit", "controllernam", "control", "name", "over", "control", "match", "templat", "or", "rout", "name"], "B_title": "[BUGFIX beta] Increase precedence of route.controllerName", "B_clean_title": ["bugfix", "beta", "increas", "preced", "rout", "controllernam", "control", "name"], "A_body": "When specifying `controllerName` in a route, if a controller exists with a name matching the template name, it will be ignored.\n\nThis seems to go against the documentation for `controllerName` which states that the specified `controllerName` will be \"used as the controller for the view being rendered by the route.\"\n\nWe have added a test for this particular case. All existing tests pass unchanged.\n\nThe new priority for looking up the controller passed to the view is as follows:\n- use controller explicitly passed in `render`\n- use controller based on `controllerName`\n- use controller based on `templateName`\n- use controller based on `routeName`\n", "A_clean_body": ["when", "specifi", "controllernam", "control", "name", "rout", "control", "exist", "name", "match", "templat", "name", "it", "will", "ignor", "thi", "seem", "go", "against", "document", "controllernam", "control", "name", "which", "state", "that", "specifi", "controllernam", "control", "name", "will", "use", "as", "control", "view", "be", "render", "by", "rout", "we", "have", "ad", "test", "thi", "particular", "case", "all", "exist", "test", "pass", "unchang", "new", "prioriti", "look", "up", "control", "pass", "view", "as", "follow", "use", "control", "explicitli", "pass", "render", "use", "control", "base", "controllernam", "control", "name", "use", "control", "base", "templatenam", "templat", "name", "use", "control", "base", "routenam", "rout", "name"], "B_body": "Currently a controller specified for a route via the `controllerName`\nproperty is considered too late when the controller for the route is\ndetermined: when a controller with the routeName already exists - for\nexample it has been used elsewhere in the app before - then it is used,\nregardless of `controllerName` being present on the route.\n\nThis fix moves the check for a specified `controllerName` before the\nroute-name-controller-lookup.\n", "B_clean_body": ["current", "control", "specifi", "rout", "via", "controllernam", "control", "name", "properti", "consid", "too", "late", "when", "control", "rout", "determin", "when", "control", "routenam", "rout", "name", "alreadi", "exist", "exampl", "it", "ha", "been", "use", "elsewher", "app", "befor", "then", "it", "use", "regardless", "controllernam", "control", "name", "be", "present", "rout", "thi", "fix", "move", "check", "specifi", "controllernam", "control", "name", "befor", "rout", "name", "control", "lookup"], "title_sim": [0.7898404148863313], "body_sim": [0.8818493278138786], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.850179102514841, 0.850179102514841], "location_sim": [0.0, 0.0], "pattern": 0, "time": 120}, {"A_title": "Outlet helper allows to define its own view class", "A_clean_title": ["outlet", "helper", "allow", "defin", "it", "own", "view", "class"], "B_title": "Ability to specify the view class used by the outlet Handlebars helper", "B_clean_title": ["abil", "specifi", "view", "class", "use", "by", "outlet", "handlebar", "helper"], "A_body": "```\n{{outlet view=App.NavigationView}}\n```\n\nThe outlet view property allows to setup a view class to define how the route view content will be shown.\n\nWhen omitted, the outlet helper will use a Ember.OutletView\n", "A_clean_body": ["outlet", "view=app", "navigationview", "navig", "view", "outlet", "view", "properti", "allow", "setup", "view", "class", "defin", "how", "rout", "view", "content", "will", "shown", "when", "omit", "outlet", "helper", "will", "use", "ember", "outletview", "outlet", "view"], "B_body": "Currently, the `{{outlet}}` Handlebars helper always creates an \"OutletView\" (Metamorph extension of ContainerView) that manages the views rendered into the outlet.  While this handles simple view replacement on navigation (through connectOutlet class in routes, for example) it makes it difficult to animate between views since the outgoing view is immediately destroyed upon connecting the incoming view.\n\nThis change allows the view class used by the outlet to be set.  A simple use case is animating between views rendered into an outlet on a route change.  E.g. sliding (jQuery mobile-style) between master-detail views.  The pseudocode for a naive replacement outlet container view for this would be something like:\n\n``` handlebars\n{{outlet viewClass=App.SlideContainer}}\n```\n\n``` javascript\nApp.SlideContainer = Ember.ContainerView.extend({\n  _currentViewWillChange: Ember.beforeObserver(function() {\n    // Hold on to old view\n  }, 'currentView'),\n\n  _currentViewDidChange: Ember.observer(function() {\n    // Append new current view to container\n    // Slide all views in container to the left\n    // When animation is complete, destroy old view\n  }, 'currentView')\n});\n```\n\nPR #1034 addressed a similar issue but in @c0urg3tt3's case the problem could be easily solved by specifying `tagName` and other general view properties in the outlet helper call (since it's an extension of the view helper).  The problem being addressed here involves the need for custom view lifecycle handling code that requires replacing, not adding bindings to a hardcoded `OutletView` class.\n\nPR #1046 appears to be somewhat of a duplicate of #1034.  @wycats' [proposed solution](https://github.com/emberjs/ember.js/pull/1046#issuecomment-6497862) does allow a custom class to be used but no longer is a sufficient replacement for the role of an outlet since the base view helper does not find and set the `outletSource` property of the parent view.\n", "B_clean_body": ["current", "outlet", "handlebar", "helper", "alway", "creat", "outletview", "outlet", "view", "metamorph", "extens", "containerview", "contain", "view", "that", "manag", "view", "render", "into", "outlet", "while", "thi", "handl", "simpl", "view", "replac", "navig", "through", "connectoutlet", "connect", "outlet", "class", "rout", "exampl", "it", "make", "it", "difficult", "anim", "between", "view", "sinc", "outgo", "view", "immedi", "destroy", "upon", "connect", "incom", "view", "thi", "chang", "allow", "view", "class", "use", "by", "outlet", "set", "simpl", "use", "case", "anim", "between", "view", "render", "into", "outlet", "rout", "chang", "slide", "jqueri", "queri", "mobil", "style", "between", "master", "detail", "view", "pseudocod", "naiv", "replac", "outlet", "contain", "view", "thi", "would", "someth", "like", "handlebar", "outlet", "viewclass=app", "slidecontain", "view", "class=app", "slide", "contain", "javascript", "app", "slidecontain", "slide", "contain", "ember", "containerview", "extend", "contain", "view", "currentviewwillchang", "current", "view", "will", "chang", "ember", "beforeobserv", "befor", "observ", "function", "hold", "old", "view", "'currentview", "'current", "view", "currentviewdidchang", "current", "view", "did", "chang", "ember", "observ", "function", "append", "new", "current", "view", "contain", "slide", "all", "view", "contain", "left", "when", "anim", "complet", "destroy", "old", "view", "'currentview", "'current", "view", "pr", "1034", "address", "similar", "issu", "but", "c0urg3tt3", "'s", "case", "problem", "could", "easili", "solv", "by", "specifi", "tagnam", "tag", "name", "other", "gener", "view", "properti", "outlet", "helper", "call", "sinc", "it", "'s", "extens", "view", "helper", "problem", "be", "address", "here", "involv", "need", "custom", "view", "lifecycl", "handl", "code", "that", "requir", "replac", "not", "ad", "bind", "hardcod", "outletview", "outlet", "view", "class", "pr", "1046", "appear", "somewhat", "duplic", "1034", "wycat", "propos", "solut", "http", "github", "com", "emberj", "ember", "js", "pull", "1046", "issuecom", "6497862", "allow", "custom", "class", "use", "but", "no", "longer", "suffici", "replac", "role", "outlet", "sinc", "base", "view", "helper", "not", "find", "set", "outletsourc", "outlet", "sourc", "properti", "parent", "view"], "title_sim": [0.7345609263684157], "body_sim": [0.8869074317047306], "file_list_sim": 0.4, "overlap_files_len": 2, "code_sim": [0.9122758336753183, 0.9207099294952855], "location_sim": [0.751131221719457, 0.9651162790697675], "pattern": 0, "time": 34}, {"A_title": "[DOC RELEASE] Ember 1.13 Component Lifecycle Events API Docs", "A_clean_title": ["doc", "releas", "ember", "13", "compon", "lifecycl", "event", "api", "doc"], "B_title": "[DOC beta] Add API docs for the component lifecycle hooks.", "B_clean_title": ["doc", "beta", "add", "api", "doc", "compon", "lifecycl", "hook"], "A_body": "Fixes #13244\n\n![screen shot 2016-04-04 at 5 17 38 pm](https://cloud.githubusercontent.com/assets/313960/14263652/cf7ea118-fa89-11e5-94a9-b8f8cae40c6f.png)\n", "A_clean_body": ["fix", "13244", "screen", "shot", "2016", "04", "04", "at", "17", "38", "pm", "http", "fa89", "11e5", "94a9", "githubusercont", "b8f8cae40c6f", "png", "cloud", "com", "asset", "313960", "14263652", "cf7ea118"], "B_body": "These hooks were originally described here: http://emberjs.com/blog/2015/06/12/ember-1-13-0-released.html#toc_component-lifecycle-hooks\n\n<img width=\"733\" alt=\"screen shot 2015-10-18 at 6 47 50 pm\" src=\"https://cloud.githubusercontent.com/assets/54056/10567131/c8aea572-75c8-11e5-9831-83b1d0ac86c1.png\">\n<img width=\"734\" alt=\"screen shot 2015-10-18 at 6 47 23 pm\" src=\"https://cloud.githubusercontent.com/assets/54056/10567130/c8adf744-75c8-11e5-91d3-41dc70912898.png\">\n<img width=\"711\" alt=\"screen shot 2015-10-18 at 6 47 37 pm\" src=\"https://cloud.githubusercontent.com/assets/54056/10567132/c8b5d0b8-75c8-11e5-9bbe-7b8e44f5f3b4.png\">\n", "B_clean_body": ["these", "hook", "were", "origin", "describ", "here", "http", "13", "releas", "html", "emberj", "com", "blog", "2015", "06", "12", "ember", "lifecycl", "hook", "toc", "compon", "img", "width=", "733", "alt=", "screen", "shot", "2015", "10", "18", "at", "47", "50", "pm", "src=", "http", "75c8", "11e5", "9831", "githubusercont", "83b1d0ac86c1", "png", "cloud", "com", "asset", "54056", "10567131", "c8aea572", "img", "width=", "734", "alt=", "screen", "shot", "2015", "10", "18", "at", "47", "23", "pm", "src=", "http", "75c8", "11e5", "91d3", "githubusercont", "41dc70912898", "png", "cloud", "com", "asset", "54056", "10567130", "c8adf744", "img", "width=", "711", "alt=", "screen", "shot", "2015", "10", "18", "at", "47", "37", "pm", "src=", "http", "75c8", "11e5", "9bbe", "githubusercont", "7b8e44f5f3b4", "png", "cloud", "com", "asset", "54056", "10567132", "c8b5d0b8"], "title_sim": [0.7905331505679246], "body_sim": [0.7247630538307955], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.5181198015808691, 0.5181198015808691], "location_sim": [1.0, 1.0], "pattern": 0, "time": 168}, {"A_title": "Ember.Arrangable mixin (SortableMixin + FilterableMixin)", "A_clean_title": ["ember", "arrang", "mixin", "sortablemixin", "sortabl", "mixin", "filterablemixin", "filter", "mixin"], "B_title": "Ember.SortableMixin: Add support of custom sortFunction", "B_clean_title": ["ember", "sortablemixin", "sortabl", "mixin", "add", "support", "custom", "sortfunct", "sort", "function"], "A_body": "This PR take commits from https://github.com/emberjs/ember.js/pull/1288 and combines that with the existing `SortableMixin`. This makes it easier to use both at the same time. It also should be more performant in the combined use case because it does not have to loop over the `content` array twice to add observers. The existing api from `Ember.SortableMixin` is mirrored for filtering. You can specify `filterProperties` the same as `sortProperties`. \n\nThere is one failing test ATM. The test is carried over from the `Ember.SortableMixin` and the other PR. I've added more tests around filtering and sorting the same array.\n\nI've pushed this code to say that I'm serious about this feature. This is a major pain point of us. I can't see why there can't be one single mixin to do this.\n\nThe original implementation is from @crofty. I've simply pulled his commits and refactored them so they can be merged with `Ember.SortableMixin`.\n\nEdit: I've realized that I completely suck at spelling and/or typing.\n", "A_clean_body": ["thi", "pr", "take", "commit", "http", "github", "com", "emberj", "ember", "js", "pull", "1288", "combin", "that", "exist", "sortablemixin", "sortabl", "mixin", "thi", "make", "it", "easier", "use", "both", "at", "same", "time", "it", "also", "more", "perform", "combin", "use", "case", "becaus", "it", "not", "have", "loop", "over", "content", "array", "twice", "add", "observ", "exist", "api", "ember", "sortablemixin", "sortabl", "mixin", "mirror", "filter", "you", "specifi", "filterproperti", "filter", "properti", "same", "as", "sortproperti", "sort", "properti", "there", "one", "fail", "test", "atm", "test", "carri", "over", "ember", "sortablemixin", "sortabl", "mixin", "other", "pr", "'ve", "ad", "more", "test", "around", "filter", "sort", "same", "array", "'ve", "push", "thi", "code", "say", "that", "'m", "seriou", "about", "thi", "featur", "thi", "major", "pain", "point", "us", "ca", "n't", "see", "whi", "there", "ca", "n't", "one", "singl", "mixin", "thi", "origin", "implement", "crofti", "'ve", "simpli", "pull", "hi", "commit", "refactor", "them", "so", "they", "merg", "ember", "sortablemixin", "sortabl", "mixin", "edit", "'ve", "realiz", "that", "complet", "suck", "at", "spell", "or", "type"], "B_body": "The default sorting algorithm used in the Routable mixin (based on Ember.compare) was not satisfying in our case.\nFor example we want 'a' to appear before 'B' (in ascending order)\n\n(new clean PR, I closed #1194\n", "B_clean_body": ["default", "sort", "algorithm", "use", "routabl", "mixin", "base", "ember", "compar", "wa", "not", "satisfi", "our", "case", "exampl", "we", "want", "appear", "befor", "ascend", "order", "new", "clean", "pr", "close", "1194"], "title_sim": [0.06848884034787645], "body_sim": [0.20589735181784183], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 125}, {"A_title": "Decouple acceptance_test, helpers_test frm globals", "A_clean_title": ["decoupl", "accept", "test", "helper", "test", "frm", "global"], "B_title": "Decouple ember-testing/helpers_test from default resolver", "B_clean_title": ["decoupl", "ember", "test", "test", "helper", "default", "resolv"], "A_body": "1) Decouple the `acceptance_test` and `helpers_test` files from the globals\r\nresolver per #15058.\r\n2) Update `setupForTesting` to reference the router factory in the registry\r\ninstead of the globally resolved one on the application instance.\r\n3) Extend the Router during application registry setup to isolate\r\n`reopen` calls.", "A_clean_body": ["decoupl", "accept", "test", "helper", "test", "file", "global", "resolv", "per", "15058", "updat", "setupfortest", "setup", "test", "refer", "router", "factori", "registri", "instead", "global", "resolv", "one", "applic", "instanc", "extend", "router", "dure", "applic", "registri", "setup", "isol", "reopen", "call"], "B_body": "#15058 ", "B_clean_body": ["15058"], "title_sim": [0.5553112927605973], "body_sim": [0.0], "file_list_sim": 0, "overlap_files_len": 0, "code_sim": [0.0, 0.0], "location_sim": [0.0, 0.0], "pattern": 1, "time": 72}, {"A_title": "[DOC] Fix a typo in the `Ember.Component` documentation", "A_clean_title": ["doc", "fix", "typo", "ember", "compon", "document"], "B_title": "Component sendAction code sample", "B_clean_title": ["compon", "sendact", "send", "action", "code", "sampl"], "A_body": "", "A_clean_body": [], "B_body": "I think that the API evolved and the code sample wasn't adapted, right? `sendAction` is just a simpler version for `triggerAction`. But it can't be `triggerAction` because that one takes a hash as input. Correct me if I'm wrong.\n", "B_clean_body": ["think", "that", "api", "evolv", "code", "sampl", "wa", "n't", "adapt", "right", "sendact", "send", "action", "just", "simpler", "version", "triggeract", "trigger", "action", "but", "it", "ca", "n't", "triggeract", "trigger", "action", "becaus", "that", "one", "take", "hash", "as", "input", "correct", "me", "'m", "wrong"], "title_sim": [0.3350890608648407], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [1.0, 1.0], "location_sim": [1.0, 1.0], "pattern": 0, "time": 0}, {"A_title": "Added documentation for controllerName property on Route", "A_clean_title": ["ad", "document", "controllernam", "control", "name", "properti", "rout"], "B_title": "Document Ember.Route #controllerName and #viewName properties", "B_clean_title": ["document", "ember", "rout", "controllernam", "control", "name", "viewnam", "view", "name", "properti"], "A_body": "So I was trying to reuse a controller in multiple routes, and tucked away in the setup method on the routes I found the undocumented and very useful controllerName property I could use for just that.\n", "A_clean_body": ["so", "wa", "tri", "reus", "control", "multipl", "rout", "tuck", "away", "setup", "method", "rout", "found", "undocu", "veri", "use", "controllernam", "control", "name", "properti", "could", "use", "just", "that"], "B_body": "In reference to #3906.\n", "B_clean_body": ["refer", "3906"], "title_sim": [0.7908425625142426], "body_sim": [0.015444105312375991], "file_list_sim": 1.0, "overlap_files_len": 1, "code_sim": [0.4151334712518859, 0.4151334712518859], "location_sim": [0.0, 0.0], "pattern": 0, "time": 28}, {"A_title": "[DOC] update license to correct years", "A_clean_title": ["doc", "updat", "licens", "correct", "year"], "B_title": "[DOC] Update license year", "B_clean_title": ["doc", "updat", "licens", "year"], "A_body": "", "A_clean_body": [], "B_body": "", "B_clean_body": [], "title_sim": [0.8805850815665403], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.5714285714285714, 1.0], "pattern": 0, "time": 5}, {"A_title": "Add filter for undefined options.path during component-test blueprint/generator", "A_clean_title": ["add", "filter", "undefin", "option", "path", "dure", "compon", "test", "blueprint", "gener"], "B_title": "Fixes leading slash being added to component-test module name", "B_clean_title": ["fix", "lead", "slash", "be", "ad", "compon", "test", "modul", "name"], "A_body": "Howdy folks \ud83d\udc4b \r\n\r\nI don't know the root cause of this issue but I thought I thought I would open the discussion with a PR that actually fixes it for me. \r\n\r\nThe issue occurs when I use `ember g component-test super-component` from the command line. The render calls in the generated tests have the component name prepended with a `/` for some reason. Here is what it looks like: \r\n\r\n```\r\n  this.render(hbs`{{/super-component}}`);\r\n\r\n  this.render(hbs`\r\n    {{#/super-component}}\r\n      template block text\r\n    {{//super-component}}\r\n  `);\r\n```\r\n\r\nDoing a bit of debugging I found that `options.path` was undefined when coming into the generator, but like I said I don't know **why** that might be the case. All I know is that the fix in this PR works for me now \ud83d\udc4d \r\n\r\nI didn't include any tests or anything because at first glance I didn't see any test harness that actually exercises the generators. Let me know if there is one and I'll create whatever tests are required. \r\n\r\nAs ever if you have any questions just let me know \ud83d\udc4d ", "A_clean_body": ["howdi", "folk", "n't", "know", "root", "caus", "thi", "issu", "but", "thought", "thought", "would", "open", "discuss", "pr", "that", "actual", "fix", "it", "me", "issu", "occur", "when", "use", "ember", "compon", "test", "super", "compon", "command", "line", "render", "call", "gener", "test", "have", "compon", "name", "prepend", "some", "reason", "here", "what", "it", "look", "like", "thi", "render", "hb", "compon", "super", "thi", "render", "hb", "compon", "super", "templat", "block", "text", "compon", "super", "do", "bit", "debug", "found", "that", "option", "path", "wa", "undefin", "when", "come", "into", "gener", "but", "like", "said", "n't", "know", "**why**", "that", "might", "case", "all", "know", "that", "fix", "thi", "pr", "work", "me", "now", "did", "n't", "includ", "ani", "test", "or", "anyth", "becaus", "at", "first", "glanc", "did", "n't", "see", "ani", "test", "har", "that", "actual", "exercis", "gener", "let", "me", "know", "there", "one", "'ll", "creat", "whatev", "test", "are", "requir", "as", "ever", "you", "have", "ani", "question", "just", "let", "me", "know"], "B_body": "Fixes leading slash being added to component-test module name when not generated alongside a component.\n\nhttps://github.com/ember-cli/ember-cli/issues/5518\nhttps://github.com/ember-cli/ember-cli/pull/5673\n", "B_clean_body": ["fix", "lead", "slash", "be", "ad", "compon", "test", "modul", "name", "when", "not", "gener", "alongsid", "compon", "http", "cli", "ember", "cli", "issu", "5518", "github", "com", "ember", "http", "cli", "ember", "cli", "pull", "5673", "github", "com", "ember"], "title_sim": [0.18114291230979881], "body_sim": [0.16769624993983645], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.7593039606825801, 0.7593039606825801], "location_sim": [0.18666666666666668, 0.18666666666666668], "pattern": 0, "time": 339}, {"A_title": "[BUGFIX beta] improve nested @each property key warning", "A_clean_title": ["bugfix", "beta", "improv", "nest", "each", "properti", "key", "warn"], "B_title": "Adds warning for nested key passed to mapBy", "B_clean_title": ["add", "warn", "nest", "key", "pass", "mapbi", "map", "by"], "A_body": "I think this should be enough to help people easily locate the offending properties in their app. If so, we should be able to close:\r\n\r\n * https://github.com/emberjs/ember.js/issues/14514\r\n * https://github.com/emberjs/ember.js/issues/13622\r\n\r\nWhen using a key such as `comments.@each.author.name`, we'll now get the warning:\r\n\r\n```\r\nWARNING: Dependent keys containing @each only work one level deep. \r\nYou used the key \"comments.@each.author.name\" which is invalid. \r\nPlease create an intermediary computed property.\r\n```\r\n\r\ninstead of the previous generic message:\r\n\r\n```\r\nWARNING: Dependent keys containing @each only work one level deep. \r\nYou cannot use nested forms like todos.@each.owner.name or todos.@each.owner.@each.name. \r\nPlease create an intermediary computed property.\r\n```\r\n\r\nTODO:\r\n\r\n * [x] Verify that this gives a good warning with `computed.mapBy('todos', 'owner.name')`\r\n\r\n```js\r\npeople: [\r\n  { \r\n    nested: { name: 'Alex' } \r\n  }, \r\n  { \r\n    nested: { name: 'Ben' } \r\n  }\r\n],\r\nnames: Em.computed.mapBy('people', 'nested.name')\r\n```\r\n\r\ngives:\r\n\r\n<img width=\"835\" alt=\"screen shot 2016-11-26 at 08 49 04\" src=\"https://cloud.githubusercontent.com/assets/2526/20639223/436c276e-b3b5-11e6-8cc8-dd137c63bc40.png\">\r\n\r\n", "A_clean_body": ["think", "thi", "enough", "help", "peopl", "easili", "locat", "offend", "properti", "their", "app", "so", "we", "abl", "close", "http", "github", "com", "emberj", "ember", "js", "issu", "14514", "http", "github", "com", "emberj", "ember", "js", "issu", "13622", "when", "key", "such", "as", "comment", "each", "author", "name", "we", "'ll", "now", "get", "warn", "warn", "depend", "key", "contain", "each", "onli", "work", "one", "level", "deep", "you", "use", "key", "comment", "each", "author", "name", "which", "invalid", "pleas", "creat", "intermediari", "comput", "properti", "instead", "previou", "gener", "messag", "warn", "depend", "key", "contain", "each", "onli", "work", "one", "level", "deep", "you", "not", "use", "nest", "form", "like", "todo", "each", "owner", "name", "or", "todo", "each", "owner", "each", "name", "pleas", "creat", "intermediari", "comput", "properti", "todo", "verifi", "that", "thi", "give", "good", "warn", "comput", "mapbi", "map", "by", "'todo", "'owner", "name", "js", "peopl", "nest", "name", "'alex", "nest", "name", "'ben", "name", "em", "comput", "mapbi", "map", "by", "'peopl", "'nest", "name", "give", "img", "width=", "835", "alt=", "screen", "shot", "2016", "11", "26", "at", "08", "49", "04", "src=", "http", "b3b5", "11e6", "8cc8", "githubusercont", "dd137c63bc40", "png", "cloud", "com", "asset", "2526", "20639223", "436c276e"], "B_body": "When a nested dependent key is passed to a mapBy (e.g.\ncomputed.mapBy('todos', 'owner.name')), it will now\nwarn the user that nested dependent keys aren't supported.\n", "B_clean_body": ["when", "nest", "depend", "key", "pass", "mapbi", "map", "by", "comput", "mapbi", "map", "by", "'todo", "'owner", "name", "it", "will", "now", "warn", "user", "that", "nest", "depend", "key", "are", "n't", "support"], "title_sim": [0.4476003864439889], "body_sim": [0.5042268689929247], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.06938932774552123, 0.0], "location_sim": [0.0, 0.0], "pattern": 0, "time": 169}, {"A_title": "[DOC] Improved assertion message upon calling set on a destroyed object", "A_clean_title": ["doc", "improv", "assert", "messag", "upon", "call", "set", "destroy", "object"], "B_title": "Better error message for calling set on a destroyed object.", "B_clean_title": ["better", "error", "messag", "call", "set", "destroy", "object"], "A_body": "See https://github.com/emberjs/ember.js/issues/10865\n", "A_clean_body": ["see", "http", "github", "com", "emberj", "ember", "js", "issu", "10865"], "B_body": "cf: http://discuss.emberjs.com/t/could-calling-set-on-destroyed-object-error-be-more-descriptive/7730\n", "B_clean_body": ["cf", "http", "call", "set", "destroy", "object", "error", "more", "emberj", "descript", "7730", "discuss", "com", "could"], "title_sim": [0.7526950736378989], "body_sim": [0.3676305822638458], "file_list_sim": 0.6666666666666666, "overlap_files_len": 2, "code_sim": [0.042923118421062195, 0.04847403529387284], "location_sim": [0.6666666666666666, 0.8], "pattern": 0, "time": 3}, {"A_title": "[Glimmer2] Migrate input tests", "A_clean_title": ["glimmer2", "migrat", "input", "test"], "B_title": "[Glimmer2] port {{input}} helper tests", "B_clean_title": ["glimmer2", "port", "input", "helper", "test"], "A_body": "", "A_clean_body": [], "B_body": "Part of https://github.com/emberjs/ember.js/issues/13127\n\nUPDATE: **This is ready for review**\n\nTODO:\n- [x] port main tests\n- [x] port remaining two tests\n- [x] refactor to remove boilerplate\n- [x] \ud83c\udf4f build (there are some tests failing in saucelabs possible due to a [bug with `{{input}}` on firefox](https://ember-twiddle.com/33e506329f8176ae874422644d4cc08c?fileTreeShown=false&openFiles=components.input-component.js%2Ctemplates.components.input-component.hbs)?)\n- [x] annotate/deleted moved tests\n- [x] comment on commented out `null` tests ([comment here](https://github.com/emberjs/ember.js/pull/13194#discussion_r60652043))\n", "B_clean_body": ["part", "http", "github", "com", "emberj", "ember", "js", "issu", "13127", "updat", "**thi", "readi", "review**", "todo", "port", "main", "test", "port", "remain", "two", "test", "refactor", "remov", "boilerpl", "build", "there", "are", "some", "test", "fail", "saucelab", "possibl", "due", "bug", "input", "firefox", "http", "ember", "twiddl", "com", "33e506329f8176ae874422644d4cc08c", "filetreeshown=fals", "file", "tree", "shown=fals", "openfiles=compon", "input", "compon", "js", "open", "files=compon", "2ctemplat", "compon", "input", "compon", "hb", "annot", "delet", "move", "test", "comment", "comment", "out", "null", "test", "comment", "here", "http", "github", "com", "emberj", "ember", "js", "pull", "13194", "discuss", "r60652043"], "title_sim": [0.7200060929252514], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.3056081232240977, 0.3056081232240977], "location_sim": [1.0, 1.0], "pattern": 0, "time": 60}, {"A_title": "Recognizes jquery v1.12 for ember views", "A_clean_title": ["recogn", "jqueri", "v1", "12", "ember", "view"], "B_title": "Support jQuery versions 1.12 and 2.2", "B_clean_title": ["support", "jqueri", "queri", "version", "12"], "A_body": "ember-cli uses semver ^1.11.3 for jquery, which resolves to 1.12.0.  Unfortunately, the regexp in ember.debug only matches 1.7 through 1.11 for 1.x releases, resulting in \"Assertion Failed: Ember Views require jQuery between 1.7 and 2.1\".  (Note that as a result of this error, the tutorial as presented in the guide will not run, which must give newcomers fits.)  This PR simply amends the regexp to include 1.12.\n", "A_clean_body": ["ember", "cli", "use", "semver", "^1", "11", "jqueri", "which", "resolv", "12", "unfortun", "regexp", "ember", "debug", "onli", "match", "through", "11", "releas", "result", "assert", "fail", "ember", "view", "requir", "jqueri", "queri", "between", "note", "that", "as", "result", "thi", "error", "tutori", "as", "present", "guid", "will", "not", "run", "which", "must", "give", "newcom", "fit", "thi", "pr", "simpli", "amend", "regexp", "includ", "12"], "B_body": "The [1.12.0](https://github.com/jquery/jquery/tree/1.12.0) and [2.2.0](https://github.com/jquery/jquery/tree/2.2.0) release of jQuery have been tagged  a couple of hours ago.\nThe regex for checking jQuery versions for Ember Views didn't pass for 1.12.x or 2.2.x\n", "B_clean_body": ["12", "http", "12", "github", "com", "jqueri", "jqueri", "tree", "http", "github", "com", "jqueri", "jqueri", "tree", "releas", "jqueri", "queri", "have", "been", "tag", "coupl", "hour", "ago", "regex", "check", "jqueri", "queri", "version", "ember", "view", "did", "n't", "pass", "12", "or"], "title_sim": [0.5497833477871519], "body_sim": [0.5453018216145209], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.6666666666666666, 1.0], "pattern": 1, "time": 0}, {"A_title": "Add required to TextSupport attributeBindings", "A_clean_title": ["add", "requir", "textsupport", "text", "support", "attributebind", "attribut", "bind"], "B_title": "[FEATURE ember-views-bindable-attributes]", "B_clean_title": ["featur", "ember", "view", "bindabl", "attribut"], "A_body": "I personally use the `required` attribute all the time since most modern browsers support it nowadays I suggest we add it to the default attribute bindings.\n", "A_clean_body": ["person", "use", "requir", "attribut", "all", "time", "sinc", "most", "modern", "browser", "support", "it", "nowaday", "suggest", "we", "add", "it", "default", "attribut", "bind"], "B_body": "Any properties listed in `bindableAttributes` that exist on the\nat the time of the first render will be bound (and observed).\nHowever, any properties that do not exist will not have observers\nsetup.\n\nThe main difference here from `attributeBindings` is the fact that the\nobservers are only setup when needed.\n\nThe `Ember.BindableAttributesMixin` is mixed into `Ember.TextSupport` by\ndefault, and all HTML5 attributes for `<input type='text'>` and `<textarea>`.\n\n---\n\nCredit for the idea goes to @lukemelia. Any errors/mistakes in implementation are my own. :smiley: \n", "B_clean_body": ["ani", "properti", "list", "bindableattribut", "bindabl", "attribut", "that", "exist", "at", "time", "first", "render", "will", "bound", "observ", "howev", "ani", "properti", "that", "not", "exist", "will", "not", "have", "observ", "setup", "main", "differ", "here", "attributebind", "attribut", "bind", "fact", "that", "observ", "are", "onli", "setup", "when", "need", "ember", "bindableattributesmixin", "bindabl", "attribut", "mixin", "mix", "into", "ember", "textsupport", "text", "support", "by", "default", "all", "html5", "attribut", "input", "type='text", "textarea", "credit", "idea", "goe", "lukemelia", "ani", "error", "mistak", "implement", "are", "my", "own", "smiley"], "title_sim": [0.26959940631860563], "body_sim": [0.5831074134267626], "file_list_sim": 0.08333333333333333, "overlap_files_len": 1, "code_sim": [0.016110795051842968, 0.2487166987881287], "location_sim": [0.05714285714285714, 1.0], "pattern": 0, "time": 7}, {"A_title": "[BUGFIX release] allow current-when to be a boolean #12512", "A_clean_title": ["bugfix", "releas", "allow", "current", "when", "boolean", "12512"], "B_title": "[BUGFIX release-1-13] Allow current-when to be specified via a variable", "B_clean_title": ["bugfix", "releas", "13", "allow", "current", "when", "specifi", "via", "variabl"], "A_body": "Bring current-when in line with the docs\n\nSorry but I created this PR from within Github, as a start. My testing experience is not enough to create a test and run it locally on my machine. Hope this helps though...\n", "A_clean_body": ["bring", "current", "when", "line", "doc", "sorri", "but", "creat", "thi", "pr", "within", "github", "as", "start", "my", "test", "experi", "not", "enough", "creat", "test", "run", "it", "local", "my", "machin", "hope", "thi", "help", "though"], "B_body": "Per guidance from @stefanpenner this fixes the issue where we are not able to set `current-when` to a variable property in 1.13.\n\nFixes #12296\n", "B_clean_body": ["per", "guidanc", "stefanpenn", "thi", "fix", "issu", "where", "we", "are", "not", "abl", "set", "current", "when", "variabl", "properti", "13", "fix", "12296"], "title_sim": [0.9580251991119187], "body_sim": [0.3939283175391109], "file_list_sim": 0.0, "overlap_files_len": 0, "code_sim": [0.08056973978602341, 0.0], "location_sim": [0.0, 0.0], "pattern": -1, "time": 66}, {"A_title": "Deprecate {{render helper", "A_clean_title": ["deprec", "render", "helper"], "B_title": "[WIP] Deprecate `{{render}}` and outlet orphaning", "B_clean_title": ["wip", "deprec", "render", "outlet", "orphan"], "A_body": "This implements #13583.\n\nHere is the TODO list from @mixonic.\n- [x] Add the deprecation of {{render 'foo'}} in a PR.\n- [x]  Add tests for the deprecation of {{render 'foo'}}.\n- [x]  Update any tests that still use {{render 'foo'}} to test unrelated behavior to use modern idioms (components).\n- [x]  Audit the codebase for any remaining usage, for example in documentation, and refactor that to modern idioms.\n- [x]  Audit the guides for any remaining usage of {{render that can be removed.\n- [x]  Open a deprecation guide PR on the website.\n\nI'm happy to work in the other items as well, but I'm not sure what to do with the current tests we have. Note that we have quite a few tests around `render into` from a route e.g. https://github.com/emberjs/ember.js/blob/master/packages/ember/tests/routing/basic_test.js#L1813\nAlso, there are several test failures because of the deprecation. Would love to get some guidance on how to update these tests and migrate the render into tests.\n\n@ErikCH any change you still are interested in taking on some documentation? \n", "A_clean_body": ["thi", "implement", "13583", "here", "todo", "list", "mixon", "add", "deprec", "render", "'foo", "pr", "add", "test", "deprec", "render", "'foo", "updat", "ani", "test", "that", "still", "use", "render", "'foo", "test", "unrel", "behavior", "use", "modern", "idiom", "compon", "audit", "codebas", "ani", "remain", "usag", "exampl", "document", "refactor", "that", "modern", "idiom", "audit", "guid", "ani", "remain", "usag", "render", "that", "remov", "open", "deprec", "guid", "pr", "websit", "'m", "happi", "work", "other", "item", "as", "well", "but", "'m", "not", "sure", "what", "current", "test", "we", "have", "note", "that", "we", "have", "quit", "few", "test", "around", "render", "into", "rout", "http", "js", "github", "com", "emberj", "ember", "test", "js", "blob", "master", "packag", "ember", "test", "rout", "basic", "l1813", "also", "there", "are", "sever", "test", "failur", "becaus", "deprec", "would", "love", "get", "some", "guidanc", "how", "updat", "these", "test", "migrat", "render", "into", "test", "erikch", "erik", "ch", "ani", "chang", "you", "still", "are", "interest", "take", "some", "document"], "B_body": "Want to get the ball rolling on #14097 so it's not forgotten.\n", "B_clean_body": ["want", "get", "ball", "roll", "14097", "so", "it", "'s", "not", "forgotten"], "title_sim": [0.37279260757344324], "body_sim": [0.20946991689667527], "file_list_sim": 0.2857142857142857, "overlap_files_len": 2, "code_sim": [0.7244234539289743, 0.8752681577617644], "location_sim": [0.29863013698630136, 0.6123595505617978], "pattern": -1, "time": 31}, {"A_title": "[DOC] Add link to Handlebars.helpers", "A_clean_title": ["doc", "add", "link", "handlebar", "helper"], "B_title": "[DOC] Add missing link to handlebars.helpers.input in Ember.Checkbox.", "B_clean_title": ["doc", "add", "miss", "link", "handlebar", "helper", "input", "ember", "checkbox"], "A_body": "In the explanation of Ember.Checkbox, it says, \"See\nHandlebars.helpers.input for usage details.\" This commit adds\na link to that text to the appropriate method.\n", "A_clean_body": ["explan", "ember", "checkbox", "it", "say", "see", "handlebar", "helper", "input", "usag", "detail", "thi", "commit", "add", "link", "that", "text", "appropri", "method"], "B_body": "", "B_clean_body": [], "title_sim": [0.8995646138589158], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.9428429687530185, 1.0], "location_sim": [0.6818181818181818, 1.0], "pattern": 0, "time": 1}, {"A_title": "Fix for using {{render}} with same template multiple times", "A_clean_title": ["fix", "render", "same", "templat", "multipl", "time"], "B_title": "Fix render helper with model when used multiple times", "B_clean_title": ["fix", "render", "helper", "model", "when", "use", "multipl", "time"], "A_body": "Yehuda added support for using `{{render}}` with same template multiple times with different models in 47dfe5ed39bade9f261b9049e7e5636bf056d718. But when using it, Ember threw an assertion error, `\"This view is already rendered\"`, for everything but the first `{{render}}` call.\n\nThis should be fixed now, and I added a test for it and adjusted the assertion error message.\n", "A_clean_body": ["yehuda", "ad", "support", "render", "same", "templat", "multipl", "time", "differ", "model", "47dfe5ed39bade9f261b9049e7e5636bf056d718", "but", "when", "it", "ember", "threw", "assert", "error", "thi", "view", "alreadi", "render", "everyth", "but", "first", "render", "call", "thi", "fix", "now", "ad", "test", "it", "adjust", "assert", "error", "messag"], "B_body": "", "B_clean_body": [], "title_sim": [0.5881515663076422], "body_sim": [0.0], "file_list_sim": 1.0, "overlap_files_len": 2, "code_sim": [0.8465045393976027, 0.8465045393976027], "location_sim": [0.3881578947368421, 0.3881578947368421], "pattern": 0, "time": 7}, {"A_title": "Allow State.transitionTo handle multiple contexts", "A_clean_title": ["allow", "state", "transitionto", "transit", "handl", "multipl", "context"], "B_title": "Update State.transitionTo transition generator to allow multiple contexts", "B_clean_title": ["updat", "state", "transitionto", "transit", "transit", "gener", "allow", "multipl", "context"], "A_body": " Allows multiple contexts to be passed to `Ember.State.transitionTo` either as multiple arguments or as an array of contexts within an event.\n\nChanged `StateManager.send` and `sendRecursively` to allow multiple context arguments.\n\nAdded missing test coverage for transitionTo.\n", "A_clean_body": ["allow", "multipl", "context", "pass", "ember", "state", "transitionto", "transit", "either", "as", "multipl", "argument", "or", "as", "array", "context", "within", "event", "chang", "statemanag", "send", "state", "manag", "sendrecurs", "send", "recurs", "allow", "multipl", "context", "argument", "ad", "miss", "test", "coverag", "transitionto", "transit"], "B_body": "Right now if you do `{{action someAction context1 context2}}` the generated transition only passes the first context.\n\nI think I covered every weird context/contexts edge case. I'm pretty sure the jQuery event _always_ has a `contexts` property which would clean this up quite a bit, but I wanted someone else to chime in.\n\nCould use a hint on how to write a test that involves  presence of Event. I can't seem to fake the `typeof Event` if no matter how many things I tried.\n", "B_clean_body": ["right", "now", "you", "action", "someact", "some", "action", "context1", "context2", "gener", "transit", "onli", "pass", "first", "context", "think", "cover", "everi", "weird", "context", "context", "edg", "case", "'m", "pretti", "sure", "jqueri", "queri", "event", "alway", "ha", "context", "properti", "which", "would", "clean", "thi", "up", "quit", "bit", "but", "want", "someon", "chime", "could", "use", "hint", "how", "write", "test", "that", "involv", "presenc", "event", "ca", "n't", "seem", "fake", "typeof", "event", "no", "matter", "how", "mani", "thing", "tri"], "title_sim": [0.8704653849216107], "body_sim": [0.27303384224094135], "file_list_sim": 0.2, "overlap_files_len": 1, "code_sim": [0.6122843880529291, 0.29876108064550305], "location_sim": [0.24691358024691357, 1.0], "pattern": 0, "time": 31}, {"A_title": "[CLEANUP beta] Remove deprecated LinkComponent#currentWhen", "A_clean_title": ["cleanup", "beta", "remov", "deprec", "linkcompon", "link", "compon", "currentwhen", "current", "when"], "B_title": "[CLEANUP beta] Removed deprecated currentWhen of LinkComponent", "B_clean_title": ["cleanup", "beta", "remov", "deprec", "currentwhen", "current", "when", "linkcompon", "link", "compon"], "A_body": "`Use current-when instead.`\n", "A_clean_body": ["use", "current", "when", "instead"], "B_body": "Use `current-when` instead\n", "B_clean_body": ["use", "current", "when", "instead"], "title_sim": [0.9999999999999999], "body_sim": [1.0], "file_list_sim": 0.3333333333333333, "overlap_files_len": 1, "code_sim": [0.0, 0.0], "location_sim": [0.2909090909090909, 0.4], "pattern": 0, "time": 1}, {"A_title": "Add underscore and camelize to string prototype extensions.", "A_clean_title": ["add", "underscor", "camel", "string", "prototyp", "extens"], "B_title": "Add underscore and camelize to String.prototype.", "B_clean_title": ["add", "underscor", "camel", "string", "prototyp"], "A_body": "", "A_clean_body": [], "B_body": "I thought that these methods mix automatically to String.prototype because tests passes with this:\n\n```\nif (Ember.EXTEND_PROTOTYPES) {\n  same('innerHTML'.underscore(), 'inner_html');\n}\n```\n\nBut that code is never called.\nQ: How to run tests with extended prototypes?\n\nThanks.\n", "B_clean_body": ["thought", "that", "these", "method", "mix", "automat", "string", "prototyp", "becaus", "test", "pass", "thi", "ember", "extend", "prototyp", "same", "'innerhtml'", "underscor", "'inner", "html'", "'inner", "html", "but", "that", "code", "never", "call", "how", "run", "test", "extend", "prototyp", "thank"], "title_sim": [0.8305639720171368], "body_sim": [0.0], "file_list_sim": 0.5, "overlap_files_len": 1, "code_sim": [0.9850488203691004, 1.0000000000000002], "location_sim": [0.9017857142857143, 1.0], "pattern": 0, "time": 5}]